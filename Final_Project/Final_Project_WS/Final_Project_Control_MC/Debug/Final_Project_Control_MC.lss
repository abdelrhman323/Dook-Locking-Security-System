
Final_Project_Control_MC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ea8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00002ea8  00002f3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000a0  008000a0  00002f7c  2**0
                  ALLOC
  3 .stab         00003078  00000000  00000000  00002f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014ca  00000000  00000000  00005ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000074be  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000075fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000776e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000093b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a2a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b050  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b1b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b43d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bc0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 ba 12 	jmp	0x2574	; 0x2574 <__vector_3>
      10:	0c 94 87 12 	jmp	0x250e	; 0x250e <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 54 12 	jmp	0x24a8	; 0x24a8 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 21 12 	jmp	0x2442	; 0x2442 <__vector_8>
      24:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ea       	ldi	r26, 0xA0	; 160
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3a       	cpi	r26, 0xAC	; 172
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cb 0a 	call	0x1596	; 0x1596 <main>
      8a:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1b 17 	jmp	0x2e36	; 0x2e36 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 37 17 	jmp	0x2e6e	; 0x2e6e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 27 17 	jmp	0x2e4e	; 0x2e4e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 27 17 	jmp	0x2e4e	; 0x2e4e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1b 17 	jmp	0x2e36	; 0x2e36 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 37 17 	jmp	0x2e6e	; 0x2e6e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 27 17 	jmp	0x2e4e	; 0x2e4e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 27 17 	jmp	0x2e4e	; 0x2e4e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 27 17 	jmp	0x2e4e	; 0x2e4e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2b 17 	jmp	0x2e56	; 0x2e56 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <BUZZER_init>:

#include "buzzer.h"
#include <AVR/io.h>

void BUZZER_init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Make direction of buzzer pin as output*/
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <GPIO_setupPinDirection>
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <BUZZER_ON>:
void BUZZER_ON()
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
	/*Set direction of buzzer pin */
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <GPIO_writePin>
}
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	08 95       	ret

00000b76 <BUZZER_OFF>:
void BUZZER_OFF()
{
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
	/*Clear direction of buzzer pin as output*/
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <GPIO_writePin>
}
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <Save_Password>:
 *            Assisting functions for Control MC to do it's function        *
 ****************************************************************************/


void Save_Password(uint8* pass)
{
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	63 97       	sbiw	r28, 0x13	; 19
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
     ba2:	9b 8b       	std	Y+19, r25	; 0x13
     ba4:	8a 8b       	std	Y+18, r24	; 0x12
		 * Synchronous Function
		 * Input : one passwords strings
		 * Output: Void
		 */

	g_password_length=0;/*reset password length global variable*/
     ba6:	10 92 a1 00 	sts	0x00A1, r1
	uint8 idx = 0; /*index for saving loop*/
     baa:	19 8a       	std	Y+17, r1	; 0x11
	uint16 address = 0x0311; /*assumed address in EEPROM*/
     bac:	81 e1       	ldi	r24, 0x11	; 17
     bae:	93 e0       	ldi	r25, 0x03	; 3
     bb0:	98 8b       	std	Y+16, r25	; 0x10
     bb2:	8f 87       	std	Y+15, r24	; 0x0f
     bb4:	88 c0       	rjmp	.+272    	; 0xcc6 <Save_Password+0x138>
	/*Saving loop*/
	while(pass[idx-1] != '=')
	{
		EEPROM_writeByte(address,pass[idx]);
     bb6:	89 89       	ldd	r24, Y+17	; 0x11
     bb8:	28 2f       	mov	r18, r24
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	8a 89       	ldd	r24, Y+18	; 0x12
     bbe:	9b 89       	ldd	r25, Y+19	; 0x13
     bc0:	fc 01       	movw	r30, r24
     bc2:	e2 0f       	add	r30, r18
     bc4:	f3 1f       	adc	r31, r19
     bc6:	20 81       	ld	r18, Z
     bc8:	8f 85       	ldd	r24, Y+15	; 0x0f
     bca:	98 89       	ldd	r25, Y+16	; 0x10
     bcc:	62 2f       	mov	r22, r18
     bce:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <EEPROM_writeByte>
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	aa e7       	ldi	r26, 0x7A	; 122
     bd8:	b4 e4       	ldi	r27, 0x44	; 68
     bda:	8b 87       	std	Y+11, r24	; 0x0b
     bdc:	9c 87       	std	Y+12, r25	; 0x0c
     bde:	ad 87       	std	Y+13, r26	; 0x0d
     be0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     be2:	6b 85       	ldd	r22, Y+11	; 0x0b
     be4:	7c 85       	ldd	r23, Y+12	; 0x0c
     be6:	8d 85       	ldd	r24, Y+13	; 0x0d
     be8:	9e 85       	ldd	r25, Y+14	; 0x0e
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	4a e7       	ldi	r20, 0x7A	; 122
     bf0:	53 e4       	ldi	r21, 0x43	; 67
     bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bf6:	dc 01       	movw	r26, r24
     bf8:	cb 01       	movw	r24, r22
     bfa:	8f 83       	std	Y+7, r24	; 0x07
     bfc:	98 87       	std	Y+8, r25	; 0x08
     bfe:	a9 87       	std	Y+9, r26	; 0x09
     c00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c02:	6f 81       	ldd	r22, Y+7	; 0x07
     c04:	78 85       	ldd	r23, Y+8	; 0x08
     c06:	89 85       	ldd	r24, Y+9	; 0x09
     c08:	9a 85       	ldd	r25, Y+10	; 0x0a
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e8       	ldi	r20, 0x80	; 128
     c10:	5f e3       	ldi	r21, 0x3F	; 63
     c12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c16:	88 23       	and	r24, r24
     c18:	2c f4       	brge	.+10     	; 0xc24 <Save_Password+0x96>
		__ticks = 1;
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	9e 83       	std	Y+6, r25	; 0x06
     c20:	8d 83       	std	Y+5, r24	; 0x05
     c22:	3f c0       	rjmp	.+126    	; 0xca2 <Save_Password+0x114>
	else if (__tmp > 65535)
     c24:	6f 81       	ldd	r22, Y+7	; 0x07
     c26:	78 85       	ldd	r23, Y+8	; 0x08
     c28:	89 85       	ldd	r24, Y+9	; 0x09
     c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	3f ef       	ldi	r19, 0xFF	; 255
     c30:	4f e7       	ldi	r20, 0x7F	; 127
     c32:	57 e4       	ldi	r21, 0x47	; 71
     c34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c38:	18 16       	cp	r1, r24
     c3a:	4c f5       	brge	.+82     	; 0xc8e <Save_Password+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c3c:	6b 85       	ldd	r22, Y+11	; 0x0b
     c3e:	7c 85       	ldd	r23, Y+12	; 0x0c
     c40:	8d 85       	ldd	r24, Y+13	; 0x0d
     c42:	9e 85       	ldd	r25, Y+14	; 0x0e
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	40 e2       	ldi	r20, 0x20	; 32
     c4a:	51 e4       	ldi	r21, 0x41	; 65
     c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c50:	dc 01       	movw	r26, r24
     c52:	cb 01       	movw	r24, r22
     c54:	bc 01       	movw	r22, r24
     c56:	cd 01       	movw	r24, r26
     c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c5c:	dc 01       	movw	r26, r24
     c5e:	cb 01       	movw	r24, r22
     c60:	9e 83       	std	Y+6, r25	; 0x06
     c62:	8d 83       	std	Y+5, r24	; 0x05
     c64:	0f c0       	rjmp	.+30     	; 0xc84 <Save_Password+0xf6>
     c66:	89 e1       	ldi	r24, 0x19	; 25
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	9c 83       	std	Y+4, r25	; 0x04
     c6c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	9c 81       	ldd	r25, Y+4	; 0x04
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	f1 f7       	brne	.-4      	; 0xc72 <Save_Password+0xe4>
     c76:	9c 83       	std	Y+4, r25	; 0x04
     c78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c7a:	8d 81       	ldd	r24, Y+5	; 0x05
     c7c:	9e 81       	ldd	r25, Y+6	; 0x06
     c7e:	01 97       	sbiw	r24, 0x01	; 1
     c80:	9e 83       	std	Y+6, r25	; 0x06
     c82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c84:	8d 81       	ldd	r24, Y+5	; 0x05
     c86:	9e 81       	ldd	r25, Y+6	; 0x06
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	69 f7       	brne	.-38     	; 0xc66 <Save_Password+0xd8>
     c8c:	14 c0       	rjmp	.+40     	; 0xcb6 <Save_Password+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c8e:	6f 81       	ldd	r22, Y+7	; 0x07
     c90:	78 85       	ldd	r23, Y+8	; 0x08
     c92:	89 85       	ldd	r24, Y+9	; 0x09
     c94:	9a 85       	ldd	r25, Y+10	; 0x0a
     c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c9a:	dc 01       	movw	r26, r24
     c9c:	cb 01       	movw	r24, r22
     c9e:	9e 83       	std	Y+6, r25	; 0x06
     ca0:	8d 83       	std	Y+5, r24	; 0x05
     ca2:	8d 81       	ldd	r24, Y+5	; 0x05
     ca4:	9e 81       	ldd	r25, Y+6	; 0x06
     ca6:	9a 83       	std	Y+2, r25	; 0x02
     ca8:	89 83       	std	Y+1, r24	; 0x01
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	9a 81       	ldd	r25, Y+2	; 0x02
     cae:	01 97       	sbiw	r24, 0x01	; 1
     cb0:	f1 f7       	brne	.-4      	; 0xcae <Save_Password+0x120>
     cb2:	9a 83       	std	Y+2, r25	; 0x02
     cb4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		idx++;
     cb6:	89 89       	ldd	r24, Y+17	; 0x11
     cb8:	8f 5f       	subi	r24, 0xFF	; 255
     cba:	89 8b       	std	Y+17, r24	; 0x11
		address++;
     cbc:	8f 85       	ldd	r24, Y+15	; 0x0f
     cbe:	98 89       	ldd	r25, Y+16	; 0x10
     cc0:	01 96       	adiw	r24, 0x01	; 1
     cc2:	98 8b       	std	Y+16, r25	; 0x10
     cc4:	8f 87       	std	Y+15, r24	; 0x0f

	g_password_length=0;/*reset password length global variable*/
	uint8 idx = 0; /*index for saving loop*/
	uint16 address = 0x0311; /*assumed address in EEPROM*/
	/*Saving loop*/
	while(pass[idx-1] != '=')
     cc6:	89 89       	ldd	r24, Y+17	; 0x11
     cc8:	88 2f       	mov	r24, r24
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	9c 01       	movw	r18, r24
     cce:	21 50       	subi	r18, 0x01	; 1
     cd0:	30 40       	sbci	r19, 0x00	; 0
     cd2:	8a 89       	ldd	r24, Y+18	; 0x12
     cd4:	9b 89       	ldd	r25, Y+19	; 0x13
     cd6:	fc 01       	movw	r30, r24
     cd8:	e2 0f       	add	r30, r18
     cda:	f3 1f       	adc	r31, r19
     cdc:	80 81       	ld	r24, Z
     cde:	8d 33       	cpi	r24, 0x3D	; 61
     ce0:	09 f0       	breq	.+2      	; 0xce4 <Save_Password+0x156>
     ce2:	69 cf       	rjmp	.-302    	; 0xbb6 <Save_Password+0x28>
		EEPROM_writeByte(address,pass[idx]);
		_delay_ms(1000);
		idx++;
		address++;
	}
	g_password_length=idx;/*get the saved address length*/
     ce4:	89 89       	ldd	r24, Y+17	; 0x11
     ce6:	80 93 a1 00 	sts	0x00A1, r24
}
     cea:	63 96       	adiw	r28, 0x13	; 19
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	de bf       	out	0x3e, r29	; 62
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	cd bf       	out	0x3d, r28	; 61
     cf6:	cf 91       	pop	r28
     cf8:	df 91       	pop	r29
     cfa:	08 95       	ret

00000cfc <Check_Password_Match>:
uint8 Check_Password_Match(uint8* str)
{
     cfc:	df 93       	push	r29
     cfe:	cf 93       	push	r28
     d00:	cd b7       	in	r28, 0x3d	; 61
     d02:	de b7       	in	r29, 0x3e	; 62
     d04:	a9 97       	sbiw	r28, 0x29	; 41
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	f8 94       	cli
     d0a:	de bf       	out	0x3e, r29	; 62
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	cd bf       	out	0x3d, r28	; 61
     d10:	99 a7       	std	Y+41, r25	; 0x29
     d12:	88 a7       	std	Y+40, r24	; 0x28
		 * Synchronous Function
		 * Input : one passwords strings
		 * Output: 0 (not match)  or 1 (match)
		 */

	uint8 match=1; /*assumed firstly the match until diffrence*/
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	8b 8b       	std	Y+19, r24	; 0x13
	uint16 address = 0x0311; /*the assumed address for reding from EEPROM*/
     d18:	81 e1       	ldi	r24, 0x11	; 17
     d1a:	93 e0       	ldi	r25, 0x03	; 3
     d1c:	9a 8b       	std	Y+18, r25	; 0x12
     d1e:	89 8b       	std	Y+17, r24	; 0x11
	uint8 idx1=0;/*index for reading  loop*/
     d20:	18 8a       	std	Y+16, r1	; 0x10
	uint8 idx2=0;/*index for checking loop*/
     d22:	1f 86       	std	Y+15, r1	; 0x0f
     d24:	87 c0       	rjmp	.+270    	; 0xe34 <Check_Password_Match+0x138>
	uint8 real_password[20]; /*to store the read password from EEPROM*/
	/*reading password loop*/
	while(idx1 < g_password_length)
	{
		EEPROM_readByte(address,&(real_password[idx1]));
     d26:	88 89       	ldd	r24, Y+16	; 0x10
     d28:	88 2f       	mov	r24, r24
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	9e 01       	movw	r18, r28
     d2e:	2c 5e       	subi	r18, 0xEC	; 236
     d30:	3f 4f       	sbci	r19, 0xFF	; 255
     d32:	28 0f       	add	r18, r24
     d34:	39 1f       	adc	r19, r25
     d36:	89 89       	ldd	r24, Y+17	; 0x11
     d38:	9a 89       	ldd	r25, Y+18	; 0x12
     d3a:	b9 01       	movw	r22, r18
     d3c:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <EEPROM_readByte>
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	aa e7       	ldi	r26, 0x7A	; 122
     d46:	b4 e4       	ldi	r27, 0x44	; 68
     d48:	8b 87       	std	Y+11, r24	; 0x0b
     d4a:	9c 87       	std	Y+12, r25	; 0x0c
     d4c:	ad 87       	std	Y+13, r26	; 0x0d
     d4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d50:	6b 85       	ldd	r22, Y+11	; 0x0b
     d52:	7c 85       	ldd	r23, Y+12	; 0x0c
     d54:	8d 85       	ldd	r24, Y+13	; 0x0d
     d56:	9e 85       	ldd	r25, Y+14	; 0x0e
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	4a e7       	ldi	r20, 0x7A	; 122
     d5e:	53 e4       	ldi	r21, 0x43	; 67
     d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d64:	dc 01       	movw	r26, r24
     d66:	cb 01       	movw	r24, r22
     d68:	8f 83       	std	Y+7, r24	; 0x07
     d6a:	98 87       	std	Y+8, r25	; 0x08
     d6c:	a9 87       	std	Y+9, r26	; 0x09
     d6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d70:	6f 81       	ldd	r22, Y+7	; 0x07
     d72:	78 85       	ldd	r23, Y+8	; 0x08
     d74:	89 85       	ldd	r24, Y+9	; 0x09
     d76:	9a 85       	ldd	r25, Y+10	; 0x0a
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	40 e8       	ldi	r20, 0x80	; 128
     d7e:	5f e3       	ldi	r21, 0x3F	; 63
     d80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d84:	88 23       	and	r24, r24
     d86:	2c f4       	brge	.+10     	; 0xd92 <Check_Password_Match+0x96>
		__ticks = 1;
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	9e 83       	std	Y+6, r25	; 0x06
     d8e:	8d 83       	std	Y+5, r24	; 0x05
     d90:	3f c0       	rjmp	.+126    	; 0xe10 <Check_Password_Match+0x114>
	else if (__tmp > 65535)
     d92:	6f 81       	ldd	r22, Y+7	; 0x07
     d94:	78 85       	ldd	r23, Y+8	; 0x08
     d96:	89 85       	ldd	r24, Y+9	; 0x09
     d98:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	3f ef       	ldi	r19, 0xFF	; 255
     d9e:	4f e7       	ldi	r20, 0x7F	; 127
     da0:	57 e4       	ldi	r21, 0x47	; 71
     da2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     da6:	18 16       	cp	r1, r24
     da8:	4c f5       	brge	.+82     	; 0xdfc <Check_Password_Match+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     daa:	6b 85       	ldd	r22, Y+11	; 0x0b
     dac:	7c 85       	ldd	r23, Y+12	; 0x0c
     dae:	8d 85       	ldd	r24, Y+13	; 0x0d
     db0:	9e 85       	ldd	r25, Y+14	; 0x0e
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	40 e2       	ldi	r20, 0x20	; 32
     db8:	51 e4       	ldi	r21, 0x41	; 65
     dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	bc 01       	movw	r22, r24
     dc4:	cd 01       	movw	r24, r26
     dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	9e 83       	std	Y+6, r25	; 0x06
     dd0:	8d 83       	std	Y+5, r24	; 0x05
     dd2:	0f c0       	rjmp	.+30     	; 0xdf2 <Check_Password_Match+0xf6>
     dd4:	89 e1       	ldi	r24, 0x19	; 25
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	9c 83       	std	Y+4, r25	; 0x04
     dda:	8b 83       	std	Y+3, r24	; 0x03
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	9c 81       	ldd	r25, Y+4	; 0x04
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	f1 f7       	brne	.-4      	; 0xde0 <Check_Password_Match+0xe4>
     de4:	9c 83       	std	Y+4, r25	; 0x04
     de6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de8:	8d 81       	ldd	r24, Y+5	; 0x05
     dea:	9e 81       	ldd	r25, Y+6	; 0x06
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	9e 83       	std	Y+6, r25	; 0x06
     df0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df2:	8d 81       	ldd	r24, Y+5	; 0x05
     df4:	9e 81       	ldd	r25, Y+6	; 0x06
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	69 f7       	brne	.-38     	; 0xdd4 <Check_Password_Match+0xd8>
     dfa:	14 c0       	rjmp	.+40     	; 0xe24 <Check_Password_Match+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dfc:	6f 81       	ldd	r22, Y+7	; 0x07
     dfe:	78 85       	ldd	r23, Y+8	; 0x08
     e00:	89 85       	ldd	r24, Y+9	; 0x09
     e02:	9a 85       	ldd	r25, Y+10	; 0x0a
     e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	9e 83       	std	Y+6, r25	; 0x06
     e0e:	8d 83       	std	Y+5, r24	; 0x05
     e10:	8d 81       	ldd	r24, Y+5	; 0x05
     e12:	9e 81       	ldd	r25, Y+6	; 0x06
     e14:	9a 83       	std	Y+2, r25	; 0x02
     e16:	89 83       	std	Y+1, r24	; 0x01
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	9a 81       	ldd	r25, Y+2	; 0x02
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	f1 f7       	brne	.-4      	; 0xe1c <Check_Password_Match+0x120>
     e20:	9a 83       	std	Y+2, r25	; 0x02
     e22:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		idx1++;
     e24:	88 89       	ldd	r24, Y+16	; 0x10
     e26:	8f 5f       	subi	r24, 0xFF	; 255
     e28:	88 8b       	std	Y+16, r24	; 0x10
		address++;
     e2a:	89 89       	ldd	r24, Y+17	; 0x11
     e2c:	9a 89       	ldd	r25, Y+18	; 0x12
     e2e:	01 96       	adiw	r24, 0x01	; 1
     e30:	9a 8b       	std	Y+18, r25	; 0x12
     e32:	89 8b       	std	Y+17, r24	; 0x11
	uint16 address = 0x0311; /*the assumed address for reding from EEPROM*/
	uint8 idx1=0;/*index for reading  loop*/
	uint8 idx2=0;/*index for checking loop*/
	uint8 real_password[20]; /*to store the read password from EEPROM*/
	/*reading password loop*/
	while(idx1 < g_password_length)
     e34:	90 91 a1 00 	lds	r25, 0x00A1
     e38:	88 89       	ldd	r24, Y+16	; 0x10
     e3a:	89 17       	cp	r24, r25
     e3c:	08 f4       	brcc	.+2      	; 0xe40 <Check_Password_Match+0x144>
     e3e:	73 cf       	rjmp	.-282    	; 0xd26 <Check_Password_Match+0x2a>
     e40:	18 c0       	rjmp	.+48     	; 0xe72 <Check_Password_Match+0x176>
		address++;
	}
	/*checking password loop*/
	while(idx2 < g_password_length)
	{
		if(str[idx2] != real_password[idx2])
     e42:	8f 85       	ldd	r24, Y+15	; 0x0f
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	88 a5       	ldd	r24, Y+40	; 0x28
     e4a:	99 a5       	ldd	r25, Y+41	; 0x29
     e4c:	fc 01       	movw	r30, r24
     e4e:	e2 0f       	add	r30, r18
     e50:	f3 1f       	adc	r31, r19
     e52:	40 81       	ld	r20, Z
     e54:	8f 85       	ldd	r24, Y+15	; 0x0f
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	ce 01       	movw	r24, r28
     e5c:	44 96       	adiw	r24, 0x14	; 20
     e5e:	fc 01       	movw	r30, r24
     e60:	e2 0f       	add	r30, r18
     e62:	f3 1f       	adc	r31, r19
     e64:	80 81       	ld	r24, Z
     e66:	48 17       	cp	r20, r24
     e68:	09 f0       	breq	.+2      	; 0xe6c <Check_Password_Match+0x170>
		{
			match = 0;
     e6a:	1b 8a       	std	Y+19, r1	; 0x13
		}
		idx2++;
     e6c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e6e:	8f 5f       	subi	r24, 0xFF	; 255
     e70:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		idx1++;
		address++;
	}
	/*checking password loop*/
	while(idx2 < g_password_length)
     e72:	90 91 a1 00 	lds	r25, 0x00A1
     e76:	8f 85       	ldd	r24, Y+15	; 0x0f
     e78:	89 17       	cp	r24, r25
     e7a:	18 f3       	brcs	.-58     	; 0xe42 <Check_Password_Match+0x146>
			match = 0;
		}
		idx2++;
	}

	return match;
     e7c:	8b 89       	ldd	r24, Y+19	; 0x13
}
     e7e:	a9 96       	adiw	r28, 0x29	; 41
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <Stop_Motor_Final>:

void Stop_Motor_Final()
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
		 * Description : CallBack function for timer to stop motor after closing the door
		 * Asynchronous Function
		 * Input : Void
		 * Output: Void
		 */
	g_ticks_rotate_motor++;/*increment ticks for 15 sec calculations*/
     e98:	80 91 a2 00 	lds	r24, 0x00A2
     e9c:	8f 5f       	subi	r24, 0xFF	; 255
     e9e:	80 93 a2 00 	sts	0x00A2, r24
	if(g_ticks_rotate_motor == 2)
     ea2:	80 91 a2 00 	lds	r24, 0x00A2
     ea6:	82 30       	cpi	r24, 0x02	; 2
     ea8:	41 f4       	brne	.+16     	; 0xeba <Stop_Motor_Final+0x2a>
	{
		DcMotor_Rotate(stop);/*stop motor*/
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <DcMotor_Rotate>
		TIMER_Deinit(timer1);/*clear timer for another usage*/
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	0e 94 aa 14 	call	0x2954	; 0x2954 <TIMER_Deinit>
		g_ticks_rotate_motor=0; /*clear timer ticks*/
     eb6:	10 92 a2 00 	sts	0x00A2, r1
	}
}
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <Close_Door>:

void Close_Door()
{
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	2d 97       	sbiw	r28, 0x0d	; 13
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
		 * Description : function for closing the door
		 * Asynchronous Function
		 * Input : Void
		 * Output: Void
		 */
	DcMotor_Init(); /*Motor initialization*/
     ed4:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DcMotor_Init>
	/*timer initialization*/
	TIMER_Configuration config={timer1,CMP_Mode,0,58500,F_cpu_1024,0};
     ed8:	ce 01       	movw	r24, r28
     eda:	01 96       	adiw	r24, 0x01	; 1
     edc:	9a 87       	std	Y+10, r25	; 0x0a
     ede:	89 87       	std	Y+9, r24	; 0x09
     ee0:	e2 e7       	ldi	r30, 0x72	; 114
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	fc 87       	std	Y+12, r31	; 0x0c
     ee6:	eb 87       	std	Y+11, r30	; 0x0b
     ee8:	f8 e0       	ldi	r31, 0x08	; 8
     eea:	fd 87       	std	Y+13, r31	; 0x0d
     eec:	eb 85       	ldd	r30, Y+11	; 0x0b
     eee:	fc 85       	ldd	r31, Y+12	; 0x0c
     ef0:	00 80       	ld	r0, Z
     ef2:	8b 85       	ldd	r24, Y+11	; 0x0b
     ef4:	9c 85       	ldd	r25, Y+12	; 0x0c
     ef6:	01 96       	adiw	r24, 0x01	; 1
     ef8:	9c 87       	std	Y+12, r25	; 0x0c
     efa:	8b 87       	std	Y+11, r24	; 0x0b
     efc:	e9 85       	ldd	r30, Y+9	; 0x09
     efe:	fa 85       	ldd	r31, Y+10	; 0x0a
     f00:	00 82       	st	Z, r0
     f02:	89 85       	ldd	r24, Y+9	; 0x09
     f04:	9a 85       	ldd	r25, Y+10	; 0x0a
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	9a 87       	std	Y+10, r25	; 0x0a
     f0a:	89 87       	std	Y+9, r24	; 0x09
     f0c:	9d 85       	ldd	r25, Y+13	; 0x0d
     f0e:	91 50       	subi	r25, 0x01	; 1
     f10:	9d 87       	std	Y+13, r25	; 0x0d
     f12:	ed 85       	ldd	r30, Y+13	; 0x0d
     f14:	ee 23       	and	r30, r30
     f16:	51 f7       	brne	.-44     	; 0xeec <Close_Door+0x2c>
	TIMER_setCallback(Stop_Motor_Final,CMP_Mode,timer1);
     f18:	88 e4       	ldi	r24, 0x48	; 72
     f1a:	97 e0       	ldi	r25, 0x07	; 7
     f1c:	61 e0       	ldi	r22, 0x01	; 1
     f1e:	41 e0       	ldi	r20, 0x01	; 1
     f20:	0e 94 e6 14 	call	0x29cc	; 0x29cc <TIMER_setCallback>
	DcMotor_Rotate(A_CW);/*Motor rotate Anti-clockwise for closing*/
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <DcMotor_Rotate>
	TIMER_init(&config);
     f2a:	ce 01       	movw	r24, r28
     f2c:	01 96       	adiw	r24, 0x01	; 1
     f2e:	0e 94 ed 12 	call	0x25da	; 0x25da <TIMER_init>
}
     f32:	2d 96       	adiw	r28, 0x0d	; 13
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <Wait_door_callback>:

void Wait_door_callback()
{
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
		 * Asynchronous Function
		 * Input : Void
		 * Output: Void
		 */

	g_ticks_close_door++;/*increment ticks for 15 sec calculations*/
     f4c:	80 91 a3 00 	lds	r24, 0x00A3
     f50:	8f 5f       	subi	r24, 0xFF	; 255
     f52:	80 93 a3 00 	sts	0x00A3, r24
	if(g_ticks_close_door == 1)
     f56:	80 91 a3 00 	lds	r24, 0x00A3
     f5a:	81 30       	cpi	r24, 0x01	; 1
     f5c:	39 f4       	brne	.+14     	; 0xf6c <Wait_door_callback+0x28>
	{
		TIMER_Deinit(timer1);
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	0e 94 aa 14 	call	0x2954	; 0x2954 <TIMER_Deinit>
		Close_Door();/*close the door*/
     f64:	0e 94 60 07 	call	0xec0	; 0xec0 <Close_Door>
		g_ticks_close_door=0;
     f68:	10 92 a3 00 	sts	0x00A3, r1
	}
}
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	08 95       	ret

00000f72 <Wait_door>:
void Wait_door()
{
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	2d 97       	sbiw	r28, 0x0d	; 13
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
		 * Description :  function for waiting to closing the door after 2-3 seconds
		 * Asynchronous Function
		 * Input : Void
		 * Output: Void
		 */
	SREG |= (1<<7);/*enable interrupt for timer*/
     f86:	af e5       	ldi	r26, 0x5F	; 95
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	ef e5       	ldi	r30, 0x5F	; 95
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	80 68       	ori	r24, 0x80	; 128
     f92:	8c 93       	st	X, r24
	/*initialize timer*/
	TIMER_Configuration config={timer1,CMP_Mode,0,23439,F_cpu_1024,0};
     f94:	ce 01       	movw	r24, r28
     f96:	01 96       	adiw	r24, 0x01	; 1
     f98:	9a 87       	std	Y+10, r25	; 0x0a
     f9a:	89 87       	std	Y+9, r24	; 0x09
     f9c:	ea e7       	ldi	r30, 0x7A	; 122
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	fc 87       	std	Y+12, r31	; 0x0c
     fa2:	eb 87       	std	Y+11, r30	; 0x0b
     fa4:	f8 e0       	ldi	r31, 0x08	; 8
     fa6:	fd 87       	std	Y+13, r31	; 0x0d
     fa8:	eb 85       	ldd	r30, Y+11	; 0x0b
     faa:	fc 85       	ldd	r31, Y+12	; 0x0c
     fac:	00 80       	ld	r0, Z
     fae:	8b 85       	ldd	r24, Y+11	; 0x0b
     fb0:	9c 85       	ldd	r25, Y+12	; 0x0c
     fb2:	01 96       	adiw	r24, 0x01	; 1
     fb4:	9c 87       	std	Y+12, r25	; 0x0c
     fb6:	8b 87       	std	Y+11, r24	; 0x0b
     fb8:	e9 85       	ldd	r30, Y+9	; 0x09
     fba:	fa 85       	ldd	r31, Y+10	; 0x0a
     fbc:	00 82       	st	Z, r0
     fbe:	89 85       	ldd	r24, Y+9	; 0x09
     fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	9a 87       	std	Y+10, r25	; 0x0a
     fc6:	89 87       	std	Y+9, r24	; 0x09
     fc8:	9d 85       	ldd	r25, Y+13	; 0x0d
     fca:	91 50       	subi	r25, 0x01	; 1
     fcc:	9d 87       	std	Y+13, r25	; 0x0d
     fce:	ed 85       	ldd	r30, Y+13	; 0x0d
     fd0:	ee 23       	and	r30, r30
     fd2:	51 f7       	brne	.-44     	; 0xfa8 <Wait_door+0x36>
	TIMER_setCallback(Wait_door_callback,CMP_Mode,timer1);
     fd4:	82 ea       	ldi	r24, 0xA2	; 162
     fd6:	97 e0       	ldi	r25, 0x07	; 7
     fd8:	61 e0       	ldi	r22, 0x01	; 1
     fda:	41 e0       	ldi	r20, 0x01	; 1
     fdc:	0e 94 e6 14 	call	0x29cc	; 0x29cc <TIMER_setCallback>
	TIMER_init(&config);
     fe0:	ce 01       	movw	r24, r28
     fe2:	01 96       	adiw	r24, 0x01	; 1
     fe4:	0e 94 ed 12 	call	0x25da	; 0x25da <TIMER_init>
}
     fe8:	2d 96       	adiw	r28, 0x0d	; 13
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <Stop_Motor>:

void Stop_Motor()
{
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
		 * Description : CallBack function for timer to stop motor after closing the door
		 * Asynchronous Function
		 * Input : Void
		 * Output: Void
		 */
	g_ticks_rotate_motor++;/*increment ticks for 15 sec calculations*/
    1002:	80 91 a2 00 	lds	r24, 0x00A2
    1006:	8f 5f       	subi	r24, 0xFF	; 255
    1008:	80 93 a2 00 	sts	0x00A2, r24
	if(g_ticks_rotate_motor == 2)
    100c:	80 91 a2 00 	lds	r24, 0x00A2
    1010:	82 30       	cpi	r24, 0x02	; 2
    1012:	51 f4       	brne	.+20     	; 0x1028 <Stop_Motor+0x2e>
	{
		DcMotor_Rotate(stop); /*stop motor after opening the door*/
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <DcMotor_Rotate>
		TIMER_Deinit(timer1);
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	0e 94 aa 14 	call	0x2954	; 0x2954 <TIMER_Deinit>
		g_ticks_rotate_motor=0;
    1020:	10 92 a2 00 	sts	0x00A2, r1
		Wait_door();
    1024:	0e 94 b9 07 	call	0xf72	; 0xf72 <Wait_door>
	}
}
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <Open_Door>:
void Open_Door()
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	2d 97       	sbiw	r28, 0x0d	; 13
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
		 * Description : k function for  opening the door
		 * Asynchronous Function
		 * Input : Void
		 * Output: Void
		 */
	DcMotor_Init(); /*initialize motor*/
    1042:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DcMotor_Init>
	/*timer1 initialization*/
	TIMER_Configuration config={timer1,CMP_Mode,0,58594,F_cpu_1024,0};
    1046:	ce 01       	movw	r24, r28
    1048:	01 96       	adiw	r24, 0x01	; 1
    104a:	9a 87       	std	Y+10, r25	; 0x0a
    104c:	89 87       	std	Y+9, r24	; 0x09
    104e:	e2 e8       	ldi	r30, 0x82	; 130
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	fc 87       	std	Y+12, r31	; 0x0c
    1054:	eb 87       	std	Y+11, r30	; 0x0b
    1056:	f8 e0       	ldi	r31, 0x08	; 8
    1058:	fd 87       	std	Y+13, r31	; 0x0d
    105a:	eb 85       	ldd	r30, Y+11	; 0x0b
    105c:	fc 85       	ldd	r31, Y+12	; 0x0c
    105e:	00 80       	ld	r0, Z
    1060:	8b 85       	ldd	r24, Y+11	; 0x0b
    1062:	9c 85       	ldd	r25, Y+12	; 0x0c
    1064:	01 96       	adiw	r24, 0x01	; 1
    1066:	9c 87       	std	Y+12, r25	; 0x0c
    1068:	8b 87       	std	Y+11, r24	; 0x0b
    106a:	e9 85       	ldd	r30, Y+9	; 0x09
    106c:	fa 85       	ldd	r31, Y+10	; 0x0a
    106e:	00 82       	st	Z, r0
    1070:	89 85       	ldd	r24, Y+9	; 0x09
    1072:	9a 85       	ldd	r25, Y+10	; 0x0a
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	9a 87       	std	Y+10, r25	; 0x0a
    1078:	89 87       	std	Y+9, r24	; 0x09
    107a:	9d 85       	ldd	r25, Y+13	; 0x0d
    107c:	91 50       	subi	r25, 0x01	; 1
    107e:	9d 87       	std	Y+13, r25	; 0x0d
    1080:	ed 85       	ldd	r30, Y+13	; 0x0d
    1082:	ee 23       	and	r30, r30
    1084:	51 f7       	brne	.-44     	; 0x105a <Open_Door+0x2c>
	TIMER_setCallback(Stop_Motor,CMP_Mode,timer1);
    1086:	8d ef       	ldi	r24, 0xFD	; 253
    1088:	97 e0       	ldi	r25, 0x07	; 7
    108a:	61 e0       	ldi	r22, 0x01	; 1
    108c:	41 e0       	ldi	r20, 0x01	; 1
    108e:	0e 94 e6 14 	call	0x29cc	; 0x29cc <TIMER_setCallback>
	DcMotor_Rotate(CW);
    1092:	82 e0       	ldi	r24, 0x02	; 2
    1094:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <DcMotor_Rotate>
	TIMER_init(&config);
    1098:	ce 01       	movw	r24, r28
    109a:	01 96       	adiw	r24, 0x01	; 1
    109c:	0e 94 ed 12 	call	0x25da	; 0x25da <TIMER_init>
}
    10a0:	2d 96       	adiw	r28, 0x0d	; 13
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <Buzzer_Stop>:

void Buzzer_Stop()
{
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
		 * Description : CallBack function for timer to stop buzzer after 1 min
		 * Asynchronous Function
		 * Input : Void
		 * Output: Void
		 */
	g_buzzerticks++;/*increment ticks counter to calculate 1min*/
    10ba:	80 91 a5 00 	lds	r24, 0x00A5
    10be:	8f 5f       	subi	r24, 0xFF	; 255
    10c0:	80 93 a5 00 	sts	0x00A5, r24
	if(g_buzzerticks == 8)
    10c4:	80 91 a5 00 	lds	r24, 0x00A5
    10c8:	88 30       	cpi	r24, 0x08	; 8
    10ca:	39 f4       	brne	.+14     	; 0x10da <Buzzer_Stop+0x28>
	{
		g_buzzerflag=0;
    10cc:	10 92 a4 00 	sts	0x00A4, r1
		g_buzzerticks=0;
    10d0:	10 92 a5 00 	sts	0x00A5, r1
		TIMER_Deinit(timer1);
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	0e 94 aa 14 	call	0x2954	; 0x2954 <TIMER_Deinit>
	}
}
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <Change_pass>:
void Change_pass()
{
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	c4 56       	subi	r28, 0x64	; 100
    10ea:	d0 40       	sbci	r29, 0x00	; 0
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
		 * Synchronous Function
		 * Input : Void
		 * Output: Void
		 */
	uint8 entered_pass[15];/*to store received entered pass from HMI MC*/
	uint8 match=0;/*to store match check and send it to HMI*/
    10f6:	19 ae       	std	Y+57, r1	; 0x39
	uint8 new_pass[15];/*to store the new changed password*/
	UART_sendByte(g_wrong_password);/*send wrong pass times*/
    10f8:	80 91 a0 00 	lds	r24, 0x00A0
    10fc:	0e 94 6f 16 	call	0x2cde	; 0x2cde <UART_sendByte>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	a8 ec       	ldi	r26, 0xC8	; 200
    1106:	b2 e4       	ldi	r27, 0x42	; 66
    1108:	8d ab       	std	Y+53, r24	; 0x35
    110a:	9e ab       	std	Y+54, r25	; 0x36
    110c:	af ab       	std	Y+55, r26	; 0x37
    110e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1110:	6d a9       	ldd	r22, Y+53	; 0x35
    1112:	7e a9       	ldd	r23, Y+54	; 0x36
    1114:	8f a9       	ldd	r24, Y+55	; 0x37
    1116:	98 ad       	ldd	r25, Y+56	; 0x38
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	4a e7       	ldi	r20, 0x7A	; 122
    111e:	53 e4       	ldi	r21, 0x43	; 67
    1120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	89 ab       	std	Y+49, r24	; 0x31
    112a:	9a ab       	std	Y+50, r25	; 0x32
    112c:	ab ab       	std	Y+51, r26	; 0x33
    112e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1130:	69 a9       	ldd	r22, Y+49	; 0x31
    1132:	7a a9       	ldd	r23, Y+50	; 0x32
    1134:	8b a9       	ldd	r24, Y+51	; 0x33
    1136:	9c a9       	ldd	r25, Y+52	; 0x34
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e8       	ldi	r20, 0x80	; 128
    113e:	5f e3       	ldi	r21, 0x3F	; 63
    1140:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1144:	88 23       	and	r24, r24
    1146:	2c f4       	brge	.+10     	; 0x1152 <Change_pass+0x72>
		__ticks = 1;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	98 ab       	std	Y+48, r25	; 0x30
    114e:	8f a7       	std	Y+47, r24	; 0x2f
    1150:	3f c0       	rjmp	.+126    	; 0x11d0 <Change_pass+0xf0>
	else if (__tmp > 65535)
    1152:	69 a9       	ldd	r22, Y+49	; 0x31
    1154:	7a a9       	ldd	r23, Y+50	; 0x32
    1156:	8b a9       	ldd	r24, Y+51	; 0x33
    1158:	9c a9       	ldd	r25, Y+52	; 0x34
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	3f ef       	ldi	r19, 0xFF	; 255
    115e:	4f e7       	ldi	r20, 0x7F	; 127
    1160:	57 e4       	ldi	r21, 0x47	; 71
    1162:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1166:	18 16       	cp	r1, r24
    1168:	4c f5       	brge	.+82     	; 0x11bc <Change_pass+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    116a:	6d a9       	ldd	r22, Y+53	; 0x35
    116c:	7e a9       	ldd	r23, Y+54	; 0x36
    116e:	8f a9       	ldd	r24, Y+55	; 0x37
    1170:	98 ad       	ldd	r25, Y+56	; 0x38
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 e2       	ldi	r20, 0x20	; 32
    1178:	51 e4       	ldi	r21, 0x41	; 65
    117a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	bc 01       	movw	r22, r24
    1184:	cd 01       	movw	r24, r26
    1186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	98 ab       	std	Y+48, r25	; 0x30
    1190:	8f a7       	std	Y+47, r24	; 0x2f
    1192:	0f c0       	rjmp	.+30     	; 0x11b2 <Change_pass+0xd2>
    1194:	89 e1       	ldi	r24, 0x19	; 25
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	9e a7       	std	Y+46, r25	; 0x2e
    119a:	8d a7       	std	Y+45, r24	; 0x2d
    119c:	8d a5       	ldd	r24, Y+45	; 0x2d
    119e:	9e a5       	ldd	r25, Y+46	; 0x2e
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <Change_pass+0xc0>
    11a4:	9e a7       	std	Y+46, r25	; 0x2e
    11a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    11aa:	98 a9       	ldd	r25, Y+48	; 0x30
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	98 ab       	std	Y+48, r25	; 0x30
    11b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    11b4:	98 a9       	ldd	r25, Y+48	; 0x30
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	69 f7       	brne	.-38     	; 0x1194 <Change_pass+0xb4>
    11ba:	14 c0       	rjmp	.+40     	; 0x11e4 <Change_pass+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11bc:	69 a9       	ldd	r22, Y+49	; 0x31
    11be:	7a a9       	ldd	r23, Y+50	; 0x32
    11c0:	8b a9       	ldd	r24, Y+51	; 0x33
    11c2:	9c a9       	ldd	r25, Y+52	; 0x34
    11c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	98 ab       	std	Y+48, r25	; 0x30
    11ce:	8f a7       	std	Y+47, r24	; 0x2f
    11d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    11d2:	98 a9       	ldd	r25, Y+48	; 0x30
    11d4:	9c a7       	std	Y+44, r25	; 0x2c
    11d6:	8b a7       	std	Y+43, r24	; 0x2b
    11d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    11da:	9c a5       	ldd	r25, Y+44	; 0x2c
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	f1 f7       	brne	.-4      	; 0x11dc <Change_pass+0xfc>
    11e0:	9c a7       	std	Y+44, r25	; 0x2c
    11e2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);/*delay for uart transmission*/
	UART_receiveString(entered_pass);/*receive entered pass for checking*/
    11e4:	ce 01       	movw	r24, r28
    11e6:	ca 96       	adiw	r24, 0x3a	; 58
    11e8:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <UART_receiveString>
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	aa e7       	ldi	r26, 0x7A	; 122
    11f2:	b4 e4       	ldi	r27, 0x44	; 68
    11f4:	8f a3       	std	Y+39, r24	; 0x27
    11f6:	98 a7       	std	Y+40, r25	; 0x28
    11f8:	a9 a7       	std	Y+41, r26	; 0x29
    11fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11fc:	6f a1       	ldd	r22, Y+39	; 0x27
    11fe:	78 a5       	ldd	r23, Y+40	; 0x28
    1200:	89 a5       	ldd	r24, Y+41	; 0x29
    1202:	9a a5       	ldd	r25, Y+42	; 0x2a
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	4a e7       	ldi	r20, 0x7A	; 122
    120a:	53 e4       	ldi	r21, 0x43	; 67
    120c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	8b a3       	std	Y+35, r24	; 0x23
    1216:	9c a3       	std	Y+36, r25	; 0x24
    1218:	ad a3       	std	Y+37, r26	; 0x25
    121a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    121c:	6b a1       	ldd	r22, Y+35	; 0x23
    121e:	7c a1       	ldd	r23, Y+36	; 0x24
    1220:	8d a1       	ldd	r24, Y+37	; 0x25
    1222:	9e a1       	ldd	r25, Y+38	; 0x26
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	40 e8       	ldi	r20, 0x80	; 128
    122a:	5f e3       	ldi	r21, 0x3F	; 63
    122c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1230:	88 23       	and	r24, r24
    1232:	2c f4       	brge	.+10     	; 0x123e <Change_pass+0x15e>
		__ticks = 1;
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	9a a3       	std	Y+34, r25	; 0x22
    123a:	89 a3       	std	Y+33, r24	; 0x21
    123c:	3f c0       	rjmp	.+126    	; 0x12bc <Change_pass+0x1dc>
	else if (__tmp > 65535)
    123e:	6b a1       	ldd	r22, Y+35	; 0x23
    1240:	7c a1       	ldd	r23, Y+36	; 0x24
    1242:	8d a1       	ldd	r24, Y+37	; 0x25
    1244:	9e a1       	ldd	r25, Y+38	; 0x26
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	3f ef       	ldi	r19, 0xFF	; 255
    124a:	4f e7       	ldi	r20, 0x7F	; 127
    124c:	57 e4       	ldi	r21, 0x47	; 71
    124e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1252:	18 16       	cp	r1, r24
    1254:	4c f5       	brge	.+82     	; 0x12a8 <Change_pass+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1256:	6f a1       	ldd	r22, Y+39	; 0x27
    1258:	78 a5       	ldd	r23, Y+40	; 0x28
    125a:	89 a5       	ldd	r24, Y+41	; 0x29
    125c:	9a a5       	ldd	r25, Y+42	; 0x2a
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	40 e2       	ldi	r20, 0x20	; 32
    1264:	51 e4       	ldi	r21, 0x41	; 65
    1266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	bc 01       	movw	r22, r24
    1270:	cd 01       	movw	r24, r26
    1272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	9a a3       	std	Y+34, r25	; 0x22
    127c:	89 a3       	std	Y+33, r24	; 0x21
    127e:	0f c0       	rjmp	.+30     	; 0x129e <Change_pass+0x1be>
    1280:	89 e1       	ldi	r24, 0x19	; 25
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	98 a3       	std	Y+32, r25	; 0x20
    1286:	8f 8f       	std	Y+31, r24	; 0x1f
    1288:	8f 8d       	ldd	r24, Y+31	; 0x1f
    128a:	98 a1       	ldd	r25, Y+32	; 0x20
    128c:	01 97       	sbiw	r24, 0x01	; 1
    128e:	f1 f7       	brne	.-4      	; 0x128c <Change_pass+0x1ac>
    1290:	98 a3       	std	Y+32, r25	; 0x20
    1292:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1294:	89 a1       	ldd	r24, Y+33	; 0x21
    1296:	9a a1       	ldd	r25, Y+34	; 0x22
    1298:	01 97       	sbiw	r24, 0x01	; 1
    129a:	9a a3       	std	Y+34, r25	; 0x22
    129c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    129e:	89 a1       	ldd	r24, Y+33	; 0x21
    12a0:	9a a1       	ldd	r25, Y+34	; 0x22
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	69 f7       	brne	.-38     	; 0x1280 <Change_pass+0x1a0>
    12a6:	14 c0       	rjmp	.+40     	; 0x12d0 <Change_pass+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a8:	6b a1       	ldd	r22, Y+35	; 0x23
    12aa:	7c a1       	ldd	r23, Y+36	; 0x24
    12ac:	8d a1       	ldd	r24, Y+37	; 0x25
    12ae:	9e a1       	ldd	r25, Y+38	; 0x26
    12b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	9a a3       	std	Y+34, r25	; 0x22
    12ba:	89 a3       	std	Y+33, r24	; 0x21
    12bc:	89 a1       	ldd	r24, Y+33	; 0x21
    12be:	9a a1       	ldd	r25, Y+34	; 0x22
    12c0:	9e 8f       	std	Y+30, r25	; 0x1e
    12c2:	8d 8f       	std	Y+29, r24	; 0x1d
    12c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	f1 f7       	brne	.-4      	; 0x12c8 <Change_pass+0x1e8>
    12cc:	9e 8f       	std	Y+30, r25	; 0x1e
    12ce:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);/*delay for uart transmission*/
	match = Check_Password_Match(entered_pass);/*checking pass for changing*/
    12d0:	ce 01       	movw	r24, r28
    12d2:	ca 96       	adiw	r24, 0x3a	; 58
    12d4:	0e 94 7e 06 	call	0xcfc	; 0xcfc <Check_Password_Match>
    12d8:	89 af       	std	Y+57, r24	; 0x39
	UART_sendByte(match);/*send result of checking*/
    12da:	89 ad       	ldd	r24, Y+57	; 0x39
    12dc:	0e 94 6f 16 	call	0x2cde	; 0x2cde <UART_sendByte>
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	aa e7       	ldi	r26, 0x7A	; 122
    12e6:	b4 e4       	ldi	r27, 0x44	; 68
    12e8:	89 8f       	std	Y+25, r24	; 0x19
    12ea:	9a 8f       	std	Y+26, r25	; 0x1a
    12ec:	ab 8f       	std	Y+27, r26	; 0x1b
    12ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12f0:	69 8d       	ldd	r22, Y+25	; 0x19
    12f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	4a e7       	ldi	r20, 0x7A	; 122
    12fe:	53 e4       	ldi	r21, 0x43	; 67
    1300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	8d 8b       	std	Y+21, r24	; 0x15
    130a:	9e 8b       	std	Y+22, r25	; 0x16
    130c:	af 8b       	std	Y+23, r26	; 0x17
    130e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1310:	6d 89       	ldd	r22, Y+21	; 0x15
    1312:	7e 89       	ldd	r23, Y+22	; 0x16
    1314:	8f 89       	ldd	r24, Y+23	; 0x17
    1316:	98 8d       	ldd	r25, Y+24	; 0x18
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	40 e8       	ldi	r20, 0x80	; 128
    131e:	5f e3       	ldi	r21, 0x3F	; 63
    1320:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1324:	88 23       	and	r24, r24
    1326:	2c f4       	brge	.+10     	; 0x1332 <Change_pass+0x252>
		__ticks = 1;
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	9c 8b       	std	Y+20, r25	; 0x14
    132e:	8b 8b       	std	Y+19, r24	; 0x13
    1330:	3f c0       	rjmp	.+126    	; 0x13b0 <Change_pass+0x2d0>
	else if (__tmp > 65535)
    1332:	6d 89       	ldd	r22, Y+21	; 0x15
    1334:	7e 89       	ldd	r23, Y+22	; 0x16
    1336:	8f 89       	ldd	r24, Y+23	; 0x17
    1338:	98 8d       	ldd	r25, Y+24	; 0x18
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	3f ef       	ldi	r19, 0xFF	; 255
    133e:	4f e7       	ldi	r20, 0x7F	; 127
    1340:	57 e4       	ldi	r21, 0x47	; 71
    1342:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1346:	18 16       	cp	r1, r24
    1348:	4c f5       	brge	.+82     	; 0x139c <Change_pass+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    134a:	69 8d       	ldd	r22, Y+25	; 0x19
    134c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    134e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1350:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	40 e2       	ldi	r20, 0x20	; 32
    1358:	51 e4       	ldi	r21, 0x41	; 65
    135a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    135e:	dc 01       	movw	r26, r24
    1360:	cb 01       	movw	r24, r22
    1362:	bc 01       	movw	r22, r24
    1364:	cd 01       	movw	r24, r26
    1366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	9c 8b       	std	Y+20, r25	; 0x14
    1370:	8b 8b       	std	Y+19, r24	; 0x13
    1372:	0f c0       	rjmp	.+30     	; 0x1392 <Change_pass+0x2b2>
    1374:	89 e1       	ldi	r24, 0x19	; 25
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	9a 8b       	std	Y+18, r25	; 0x12
    137a:	89 8b       	std	Y+17, r24	; 0x11
    137c:	89 89       	ldd	r24, Y+17	; 0x11
    137e:	9a 89       	ldd	r25, Y+18	; 0x12
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	f1 f7       	brne	.-4      	; 0x1380 <Change_pass+0x2a0>
    1384:	9a 8b       	std	Y+18, r25	; 0x12
    1386:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1388:	8b 89       	ldd	r24, Y+19	; 0x13
    138a:	9c 89       	ldd	r25, Y+20	; 0x14
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	9c 8b       	std	Y+20, r25	; 0x14
    1390:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1392:	8b 89       	ldd	r24, Y+19	; 0x13
    1394:	9c 89       	ldd	r25, Y+20	; 0x14
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	69 f7       	brne	.-38     	; 0x1374 <Change_pass+0x294>
    139a:	14 c0       	rjmp	.+40     	; 0x13c4 <Change_pass+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    139c:	6d 89       	ldd	r22, Y+21	; 0x15
    139e:	7e 89       	ldd	r23, Y+22	; 0x16
    13a0:	8f 89       	ldd	r24, Y+23	; 0x17
    13a2:	98 8d       	ldd	r25, Y+24	; 0x18
    13a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a8:	dc 01       	movw	r26, r24
    13aa:	cb 01       	movw	r24, r22
    13ac:	9c 8b       	std	Y+20, r25	; 0x14
    13ae:	8b 8b       	std	Y+19, r24	; 0x13
    13b0:	8b 89       	ldd	r24, Y+19	; 0x13
    13b2:	9c 89       	ldd	r25, Y+20	; 0x14
    13b4:	98 8b       	std	Y+16, r25	; 0x10
    13b6:	8f 87       	std	Y+15, r24	; 0x0f
    13b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ba:	98 89       	ldd	r25, Y+16	; 0x10
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	f1 f7       	brne	.-4      	; 0x13bc <Change_pass+0x2dc>
    13c0:	98 8b       	std	Y+16, r25	; 0x10
    13c2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);/*delay for uart transmission*/
	if(match ==1)
    13c4:	89 ad       	ldd	r24, Y+57	; 0x39
    13c6:	81 30       	cpi	r24, 0x01	; 1
    13c8:	09 f0       	breq	.+2      	; 0x13cc <Change_pass+0x2ec>
    13ca:	7f c0       	rjmp	.+254    	; 0x14ca <Change_pass+0x3ea>
	{
		/*
		 * if match -----> change password
		 */
		g_wrong_password=0;
    13cc:	10 92 a0 00 	sts	0x00A0, r1
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	90 e4       	ldi	r25, 0x40	; 64
    13d4:	ac e1       	ldi	r26, 0x1C	; 28
    13d6:	b5 e4       	ldi	r27, 0x45	; 69
    13d8:	8b 87       	std	Y+11, r24	; 0x0b
    13da:	9c 87       	std	Y+12, r25	; 0x0c
    13dc:	ad 87       	std	Y+13, r26	; 0x0d
    13de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	4a e7       	ldi	r20, 0x7A	; 122
    13ee:	53 e4       	ldi	r21, 0x43	; 67
    13f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	8f 83       	std	Y+7, r24	; 0x07
    13fa:	98 87       	std	Y+8, r25	; 0x08
    13fc:	a9 87       	std	Y+9, r26	; 0x09
    13fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1400:	6f 81       	ldd	r22, Y+7	; 0x07
    1402:	78 85       	ldd	r23, Y+8	; 0x08
    1404:	89 85       	ldd	r24, Y+9	; 0x09
    1406:	9a 85       	ldd	r25, Y+10	; 0x0a
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	40 e8       	ldi	r20, 0x80	; 128
    140e:	5f e3       	ldi	r21, 0x3F	; 63
    1410:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1414:	88 23       	and	r24, r24
    1416:	2c f4       	brge	.+10     	; 0x1422 <Change_pass+0x342>
		__ticks = 1;
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	9e 83       	std	Y+6, r25	; 0x06
    141e:	8d 83       	std	Y+5, r24	; 0x05
    1420:	3f c0       	rjmp	.+126    	; 0x14a0 <Change_pass+0x3c0>
	else if (__tmp > 65535)
    1422:	6f 81       	ldd	r22, Y+7	; 0x07
    1424:	78 85       	ldd	r23, Y+8	; 0x08
    1426:	89 85       	ldd	r24, Y+9	; 0x09
    1428:	9a 85       	ldd	r25, Y+10	; 0x0a
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	3f ef       	ldi	r19, 0xFF	; 255
    142e:	4f e7       	ldi	r20, 0x7F	; 127
    1430:	57 e4       	ldi	r21, 0x47	; 71
    1432:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1436:	18 16       	cp	r1, r24
    1438:	4c f5       	brge	.+82     	; 0x148c <Change_pass+0x3ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    143a:	6b 85       	ldd	r22, Y+11	; 0x0b
    143c:	7c 85       	ldd	r23, Y+12	; 0x0c
    143e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1440:	9e 85       	ldd	r25, Y+14	; 0x0e
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	40 e2       	ldi	r20, 0x20	; 32
    1448:	51 e4       	ldi	r21, 0x41	; 65
    144a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	bc 01       	movw	r22, r24
    1454:	cd 01       	movw	r24, r26
    1456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	9e 83       	std	Y+6, r25	; 0x06
    1460:	8d 83       	std	Y+5, r24	; 0x05
    1462:	0f c0       	rjmp	.+30     	; 0x1482 <Change_pass+0x3a2>
    1464:	89 e1       	ldi	r24, 0x19	; 25
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	9c 83       	std	Y+4, r25	; 0x04
    146a:	8b 83       	std	Y+3, r24	; 0x03
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	9c 81       	ldd	r25, Y+4	; 0x04
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	f1 f7       	brne	.-4      	; 0x1470 <Change_pass+0x390>
    1474:	9c 83       	std	Y+4, r25	; 0x04
    1476:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1478:	8d 81       	ldd	r24, Y+5	; 0x05
    147a:	9e 81       	ldd	r25, Y+6	; 0x06
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	9e 83       	std	Y+6, r25	; 0x06
    1480:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1482:	8d 81       	ldd	r24, Y+5	; 0x05
    1484:	9e 81       	ldd	r25, Y+6	; 0x06
    1486:	00 97       	sbiw	r24, 0x00	; 0
    1488:	69 f7       	brne	.-38     	; 0x1464 <Change_pass+0x384>
    148a:	14 c0       	rjmp	.+40     	; 0x14b4 <Change_pass+0x3d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    148c:	6f 81       	ldd	r22, Y+7	; 0x07
    148e:	78 85       	ldd	r23, Y+8	; 0x08
    1490:	89 85       	ldd	r24, Y+9	; 0x09
    1492:	9a 85       	ldd	r25, Y+10	; 0x0a
    1494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1498:	dc 01       	movw	r26, r24
    149a:	cb 01       	movw	r24, r22
    149c:	9e 83       	std	Y+6, r25	; 0x06
    149e:	8d 83       	std	Y+5, r24	; 0x05
    14a0:	8d 81       	ldd	r24, Y+5	; 0x05
    14a2:	9e 81       	ldd	r25, Y+6	; 0x06
    14a4:	9a 83       	std	Y+2, r25	; 0x02
    14a6:	89 83       	std	Y+1, r24	; 0x01
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	9a 81       	ldd	r25, Y+2	; 0x02
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	f1 f7       	brne	.-4      	; 0x14ac <Change_pass+0x3cc>
    14b0:	9a 83       	std	Y+2, r25	; 0x02
    14b2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2500);/*delay for uart transmission*/
		UART_receiveString(new_pass);/*receive new password*/
    14b4:	ce 01       	movw	r24, r28
    14b6:	87 5b       	subi	r24, 0xB7	; 183
    14b8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ba:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <UART_receiveString>
		Save_Password(new_pass);/*store new pass*/
    14be:	ce 01       	movw	r24, r28
    14c0:	87 5b       	subi	r24, 0xB7	; 183
    14c2:	9f 4f       	sbci	r25, 0xFF	; 255
    14c4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <Save_Password>
    14c8:	5c c0       	rjmp	.+184    	; 0x1582 <Change_pass+0x4a2>
	else
	{
		/*
		 * if the wrong times get 3 times ----> turn on buzzer for 1 min
		 */
		g_wrong_password++;/*increment wrong times*/
    14ca:	80 91 a0 00 	lds	r24, 0x00A0
    14ce:	8f 5f       	subi	r24, 0xFF	; 255
    14d0:	80 93 a0 00 	sts	0x00A0, r24
		if(g_wrong_password == 3)
    14d4:	80 91 a0 00 	lds	r24, 0x00A0
    14d8:	83 30       	cpi	r24, 0x03	; 3
    14da:	09 f0       	breq	.+2      	; 0x14de <Change_pass+0x3fe>
    14dc:	52 c0       	rjmp	.+164    	; 0x1582 <Change_pass+0x4a2>
		{
			g_buzzerflag=1;/*to begin buzzer loop*/
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	80 93 a4 00 	sts	0x00A4, r24
			/*initialize timer*/
			TIMER_Configuration t_config={timer1,CMP_Mode,0,58594,F_cpu_1024,0};
    14e4:	ce 01       	movw	r24, r28
    14e6:	88 5a       	subi	r24, 0xA8	; 168
    14e8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ea:	a2 96       	adiw	r28, 0x22	; 34
    14ec:	9f af       	std	Y+63, r25	; 0x3f
    14ee:	8e af       	std	Y+62, r24	; 0x3e
    14f0:	a2 97       	sbiw	r28, 0x22	; 34
    14f2:	8a e8       	ldi	r24, 0x8A	; 138
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	a4 96       	adiw	r28, 0x24	; 36
    14f8:	9f af       	std	Y+63, r25	; 0x3f
    14fa:	8e af       	std	Y+62, r24	; 0x3e
    14fc:	a4 97       	sbiw	r28, 0x24	; 36
    14fe:	98 e0       	ldi	r25, 0x08	; 8
    1500:	a5 96       	adiw	r28, 0x25	; 37
    1502:	9f af       	std	Y+63, r25	; 0x3f
    1504:	a5 97       	sbiw	r28, 0x25	; 37
    1506:	a4 96       	adiw	r28, 0x24	; 36
    1508:	ee ad       	ldd	r30, Y+62	; 0x3e
    150a:	ff ad       	ldd	r31, Y+63	; 0x3f
    150c:	a4 97       	sbiw	r28, 0x24	; 36
    150e:	00 80       	ld	r0, Z
    1510:	a4 96       	adiw	r28, 0x24	; 36
    1512:	8e ad       	ldd	r24, Y+62	; 0x3e
    1514:	9f ad       	ldd	r25, Y+63	; 0x3f
    1516:	a4 97       	sbiw	r28, 0x24	; 36
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	a4 96       	adiw	r28, 0x24	; 36
    151c:	9f af       	std	Y+63, r25	; 0x3f
    151e:	8e af       	std	Y+62, r24	; 0x3e
    1520:	a4 97       	sbiw	r28, 0x24	; 36
    1522:	a2 96       	adiw	r28, 0x22	; 34
    1524:	ee ad       	ldd	r30, Y+62	; 0x3e
    1526:	ff ad       	ldd	r31, Y+63	; 0x3f
    1528:	a2 97       	sbiw	r28, 0x22	; 34
    152a:	00 82       	st	Z, r0
    152c:	a2 96       	adiw	r28, 0x22	; 34
    152e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1530:	9f ad       	ldd	r25, Y+63	; 0x3f
    1532:	a2 97       	sbiw	r28, 0x22	; 34
    1534:	01 96       	adiw	r24, 0x01	; 1
    1536:	a2 96       	adiw	r28, 0x22	; 34
    1538:	9f af       	std	Y+63, r25	; 0x3f
    153a:	8e af       	std	Y+62, r24	; 0x3e
    153c:	a2 97       	sbiw	r28, 0x22	; 34
    153e:	a5 96       	adiw	r28, 0x25	; 37
    1540:	9f ad       	ldd	r25, Y+63	; 0x3f
    1542:	a5 97       	sbiw	r28, 0x25	; 37
    1544:	91 50       	subi	r25, 0x01	; 1
    1546:	a5 96       	adiw	r28, 0x25	; 37
    1548:	9f af       	std	Y+63, r25	; 0x3f
    154a:	a5 97       	sbiw	r28, 0x25	; 37
    154c:	a5 96       	adiw	r28, 0x25	; 37
    154e:	ef ad       	ldd	r30, Y+63	; 0x3f
    1550:	a5 97       	sbiw	r28, 0x25	; 37
    1552:	ee 23       	and	r30, r30
    1554:	c1 f6       	brne	.-80     	; 0x1506 <Change_pass+0x426>
			TIMER_setCallback(Buzzer_Stop,CMP_Mode,timer1);
    1556:	89 e5       	ldi	r24, 0x59	; 89
    1558:	98 e0       	ldi	r25, 0x08	; 8
    155a:	61 e0       	ldi	r22, 0x01	; 1
    155c:	41 e0       	ldi	r20, 0x01	; 1
    155e:	0e 94 e6 14 	call	0x29cc	; 0x29cc <TIMER_setCallback>
			TIMER_init(&t_config);
    1562:	ce 01       	movw	r24, r28
    1564:	88 5a       	subi	r24, 0xA8	; 168
    1566:	9f 4f       	sbci	r25, 0xFF	; 255
    1568:	0e 94 ed 12 	call	0x25da	; 0x25da <TIMER_init>
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <Change_pass+0x492>
			/*if 1 min passed flag =0 and loop will be terminated*/
			while(g_buzzerflag == 1)
			{
				BUZZER_ON();/*turn buzzer on*/
    156e:	0e 94 af 05 	call	0xb5e	; 0xb5e <BUZZER_ON>
			/*initialize timer*/
			TIMER_Configuration t_config={timer1,CMP_Mode,0,58594,F_cpu_1024,0};
			TIMER_setCallback(Buzzer_Stop,CMP_Mode,timer1);
			TIMER_init(&t_config);
			/*if 1 min passed flag =0 and loop will be terminated*/
			while(g_buzzerflag == 1)
    1572:	80 91 a4 00 	lds	r24, 0x00A4
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	d1 f3       	breq	.-12     	; 0x156e <Change_pass+0x48e>
			{
				BUZZER_ON();/*turn buzzer on*/
			}
			g_wrong_password=0;
    157a:	10 92 a0 00 	sts	0x00A0, r1
			BUZZER_OFF();/*turn off buzzer after 1 min*/
    157e:	0e 94 bb 05 	call	0xb76	; 0xb76 <BUZZER_OFF>
		}

	}
}
    1582:	cc 59       	subi	r28, 0x9C	; 156
    1584:	df 4f       	sbci	r29, 0xFF	; 255
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cd bf       	out	0x3d, r28	; 61
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <main>:

int main(void)
{
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	c9 57       	subi	r28, 0x79	; 121
    15a0:	d0 40       	sbci	r29, 0x00	; 0
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	f8 94       	cli
    15a6:	de bf       	out	0x3e, r29	; 62
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	cd bf       	out	0x3d, r28	; 61
	uint8 option=0;/*to store option*/
    15ac:	1a ae       	std	Y+58, r1	; 0x3a
	uint8 password[20];/*to get the password first time as an admin*/
	uint8 entered_pass[20];/*to store the entered password from user each timer*/
	SREG |= (1<<7);/*enable interrupts for timer*/
    15ae:	af e5       	ldi	r26, 0x5F	; 95
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	ef e5       	ldi	r30, 0x5F	; 95
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	80 68       	ori	r24, 0x80	; 128
    15ba:	8c 93       	st	X, r24
	uint8 match =0;/*to store matching result*/
    15bc:	19 ae       	std	Y+57, r1	; 0x39
	/*UART initialization*/
	UART_Configuration  configuration={eight_bits,disable,one_bit,9600};
    15be:	ce 01       	movw	r24, r28
    15c0:	8d 59       	subi	r24, 0x9D	; 157
    15c2:	9f 4f       	sbci	r25, 0xFF	; 255
    15c4:	e2 96       	adiw	r28, 0x32	; 50
    15c6:	9f af       	std	Y+63, r25	; 0x3f
    15c8:	8e af       	std	Y+62, r24	; 0x3e
    15ca:	e2 97       	sbiw	r28, 0x32	; 50
    15cc:	8a e9       	ldi	r24, 0x9A	; 154
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	e4 96       	adiw	r28, 0x34	; 52
    15d2:	9f af       	std	Y+63, r25	; 0x3f
    15d4:	8e af       	std	Y+62, r24	; 0x3e
    15d6:	e4 97       	sbiw	r28, 0x34	; 52
    15d8:	95 e0       	ldi	r25, 0x05	; 5
    15da:	e5 96       	adiw	r28, 0x35	; 53
    15dc:	9f af       	std	Y+63, r25	; 0x3f
    15de:	e5 97       	sbiw	r28, 0x35	; 53
    15e0:	e4 96       	adiw	r28, 0x34	; 52
    15e2:	ee ad       	ldd	r30, Y+62	; 0x3e
    15e4:	ff ad       	ldd	r31, Y+63	; 0x3f
    15e6:	e4 97       	sbiw	r28, 0x34	; 52
    15e8:	00 80       	ld	r0, Z
    15ea:	e4 96       	adiw	r28, 0x34	; 52
    15ec:	8e ad       	ldd	r24, Y+62	; 0x3e
    15ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    15f0:	e4 97       	sbiw	r28, 0x34	; 52
    15f2:	01 96       	adiw	r24, 0x01	; 1
    15f4:	e4 96       	adiw	r28, 0x34	; 52
    15f6:	9f af       	std	Y+63, r25	; 0x3f
    15f8:	8e af       	std	Y+62, r24	; 0x3e
    15fa:	e4 97       	sbiw	r28, 0x34	; 52
    15fc:	e2 96       	adiw	r28, 0x32	; 50
    15fe:	ee ad       	ldd	r30, Y+62	; 0x3e
    1600:	ff ad       	ldd	r31, Y+63	; 0x3f
    1602:	e2 97       	sbiw	r28, 0x32	; 50
    1604:	00 82       	st	Z, r0
    1606:	e2 96       	adiw	r28, 0x32	; 50
    1608:	8e ad       	ldd	r24, Y+62	; 0x3e
    160a:	9f ad       	ldd	r25, Y+63	; 0x3f
    160c:	e2 97       	sbiw	r28, 0x32	; 50
    160e:	01 96       	adiw	r24, 0x01	; 1
    1610:	e2 96       	adiw	r28, 0x32	; 50
    1612:	9f af       	std	Y+63, r25	; 0x3f
    1614:	8e af       	std	Y+62, r24	; 0x3e
    1616:	e2 97       	sbiw	r28, 0x32	; 50
    1618:	e5 96       	adiw	r28, 0x35	; 53
    161a:	9f ad       	ldd	r25, Y+63	; 0x3f
    161c:	e5 97       	sbiw	r28, 0x35	; 53
    161e:	91 50       	subi	r25, 0x01	; 1
    1620:	e5 96       	adiw	r28, 0x35	; 53
    1622:	9f af       	std	Y+63, r25	; 0x3f
    1624:	e5 97       	sbiw	r28, 0x35	; 53
    1626:	e5 96       	adiw	r28, 0x35	; 53
    1628:	ef ad       	ldd	r30, Y+63	; 0x3f
    162a:	e5 97       	sbiw	r28, 0x35	; 53
    162c:	ee 23       	and	r30, r30
    162e:	c1 f6       	brne	.-80     	; 0x15e0 <main+0x4a>
	BUZZER_init();	/*buzzer initialization*/
    1630:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUZZER_init>
	UART_init(&configuration);
    1634:	ce 01       	movw	r24, r28
    1636:	8d 59       	subi	r24, 0x9D	; 157
    1638:	9f 4f       	sbci	r25, 0xFF	; 255
    163a:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <UART_init>
	/*EEPROM initialization*/
	EEPROM_init();
    163e:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <EEPROM_init>
	UART_receiveString(password);/*receive the first password to HMI MC to store it*/
    1642:	ce 01       	movw	r24, r28
    1644:	cb 96       	adiw	r24, 0x3b	; 59
    1646:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <UART_receiveString>
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	aa e7       	ldi	r26, 0x7A	; 122
    1650:	b4 e4       	ldi	r27, 0x44	; 68
    1652:	8d ab       	std	Y+53, r24	; 0x35
    1654:	9e ab       	std	Y+54, r25	; 0x36
    1656:	af ab       	std	Y+55, r26	; 0x37
    1658:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    165a:	6d a9       	ldd	r22, Y+53	; 0x35
    165c:	7e a9       	ldd	r23, Y+54	; 0x36
    165e:	8f a9       	ldd	r24, Y+55	; 0x37
    1660:	98 ad       	ldd	r25, Y+56	; 0x38
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	4a e7       	ldi	r20, 0x7A	; 122
    1668:	53 e4       	ldi	r21, 0x43	; 67
    166a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	89 ab       	std	Y+49, r24	; 0x31
    1674:	9a ab       	std	Y+50, r25	; 0x32
    1676:	ab ab       	std	Y+51, r26	; 0x33
    1678:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    167a:	69 a9       	ldd	r22, Y+49	; 0x31
    167c:	7a a9       	ldd	r23, Y+50	; 0x32
    167e:	8b a9       	ldd	r24, Y+51	; 0x33
    1680:	9c a9       	ldd	r25, Y+52	; 0x34
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	40 e8       	ldi	r20, 0x80	; 128
    1688:	5f e3       	ldi	r21, 0x3F	; 63
    168a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    168e:	88 23       	and	r24, r24
    1690:	2c f4       	brge	.+10     	; 0x169c <main+0x106>
		__ticks = 1;
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	98 ab       	std	Y+48, r25	; 0x30
    1698:	8f a7       	std	Y+47, r24	; 0x2f
    169a:	3f c0       	rjmp	.+126    	; 0x171a <main+0x184>
	else if (__tmp > 65535)
    169c:	69 a9       	ldd	r22, Y+49	; 0x31
    169e:	7a a9       	ldd	r23, Y+50	; 0x32
    16a0:	8b a9       	ldd	r24, Y+51	; 0x33
    16a2:	9c a9       	ldd	r25, Y+52	; 0x34
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	3f ef       	ldi	r19, 0xFF	; 255
    16a8:	4f e7       	ldi	r20, 0x7F	; 127
    16aa:	57 e4       	ldi	r21, 0x47	; 71
    16ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16b0:	18 16       	cp	r1, r24
    16b2:	4c f5       	brge	.+82     	; 0x1706 <main+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b4:	6d a9       	ldd	r22, Y+53	; 0x35
    16b6:	7e a9       	ldd	r23, Y+54	; 0x36
    16b8:	8f a9       	ldd	r24, Y+55	; 0x37
    16ba:	98 ad       	ldd	r25, Y+56	; 0x38
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	40 e2       	ldi	r20, 0x20	; 32
    16c2:	51 e4       	ldi	r21, 0x41	; 65
    16c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	bc 01       	movw	r22, r24
    16ce:	cd 01       	movw	r24, r26
    16d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	98 ab       	std	Y+48, r25	; 0x30
    16da:	8f a7       	std	Y+47, r24	; 0x2f
    16dc:	0f c0       	rjmp	.+30     	; 0x16fc <main+0x166>
    16de:	89 e1       	ldi	r24, 0x19	; 25
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	9e a7       	std	Y+46, r25	; 0x2e
    16e4:	8d a7       	std	Y+45, r24	; 0x2d
    16e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    16e8:	9e a5       	ldd	r25, Y+46	; 0x2e
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	f1 f7       	brne	.-4      	; 0x16ea <main+0x154>
    16ee:	9e a7       	std	Y+46, r25	; 0x2e
    16f0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    16f4:	98 a9       	ldd	r25, Y+48	; 0x30
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	98 ab       	std	Y+48, r25	; 0x30
    16fa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    16fe:	98 a9       	ldd	r25, Y+48	; 0x30
    1700:	00 97       	sbiw	r24, 0x00	; 0
    1702:	69 f7       	brne	.-38     	; 0x16de <main+0x148>
    1704:	14 c0       	rjmp	.+40     	; 0x172e <main+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1706:	69 a9       	ldd	r22, Y+49	; 0x31
    1708:	7a a9       	ldd	r23, Y+50	; 0x32
    170a:	8b a9       	ldd	r24, Y+51	; 0x33
    170c:	9c a9       	ldd	r25, Y+52	; 0x34
    170e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	98 ab       	std	Y+48, r25	; 0x30
    1718:	8f a7       	std	Y+47, r24	; 0x2f
    171a:	8f a5       	ldd	r24, Y+47	; 0x2f
    171c:	98 a9       	ldd	r25, Y+48	; 0x30
    171e:	9c a7       	std	Y+44, r25	; 0x2c
    1720:	8b a7       	std	Y+43, r24	; 0x2b
    1722:	8b a5       	ldd	r24, Y+43	; 0x2b
    1724:	9c a5       	ldd	r25, Y+44	; 0x2c
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <main+0x190>
    172a:	9c a7       	std	Y+44, r25	; 0x2c
    172c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);/*delay for uart transmission*/
	Save_Password(password);/*save first password*/
    172e:	ce 01       	movw	r24, r28
    1730:	cb 96       	adiw	r24, 0x3b	; 59
    1732:	0e 94 c7 05 	call	0xb8e	; 0xb8e <Save_Password>
	while(1)
	{
		/*get the  option from user*/
		option = UART_receiveByte();
    1736:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <UART_receiveByte>
    173a:	8a af       	std	Y+58, r24	; 0x3a
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	aa ef       	ldi	r26, 0xFA	; 250
    1742:	b4 e4       	ldi	r27, 0x44	; 68
    1744:	8f a3       	std	Y+39, r24	; 0x27
    1746:	98 a7       	std	Y+40, r25	; 0x28
    1748:	a9 a7       	std	Y+41, r26	; 0x29
    174a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    174c:	6f a1       	ldd	r22, Y+39	; 0x27
    174e:	78 a5       	ldd	r23, Y+40	; 0x28
    1750:	89 a5       	ldd	r24, Y+41	; 0x29
    1752:	9a a5       	ldd	r25, Y+42	; 0x2a
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	4a e7       	ldi	r20, 0x7A	; 122
    175a:	53 e4       	ldi	r21, 0x43	; 67
    175c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	8b a3       	std	Y+35, r24	; 0x23
    1766:	9c a3       	std	Y+36, r25	; 0x24
    1768:	ad a3       	std	Y+37, r26	; 0x25
    176a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    176c:	6b a1       	ldd	r22, Y+35	; 0x23
    176e:	7c a1       	ldd	r23, Y+36	; 0x24
    1770:	8d a1       	ldd	r24, Y+37	; 0x25
    1772:	9e a1       	ldd	r25, Y+38	; 0x26
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e8       	ldi	r20, 0x80	; 128
    177a:	5f e3       	ldi	r21, 0x3F	; 63
    177c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1780:	88 23       	and	r24, r24
    1782:	2c f4       	brge	.+10     	; 0x178e <main+0x1f8>
		__ticks = 1;
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	9a a3       	std	Y+34, r25	; 0x22
    178a:	89 a3       	std	Y+33, r24	; 0x21
    178c:	3f c0       	rjmp	.+126    	; 0x180c <main+0x276>
	else if (__tmp > 65535)
    178e:	6b a1       	ldd	r22, Y+35	; 0x23
    1790:	7c a1       	ldd	r23, Y+36	; 0x24
    1792:	8d a1       	ldd	r24, Y+37	; 0x25
    1794:	9e a1       	ldd	r25, Y+38	; 0x26
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	3f ef       	ldi	r19, 0xFF	; 255
    179a:	4f e7       	ldi	r20, 0x7F	; 127
    179c:	57 e4       	ldi	r21, 0x47	; 71
    179e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17a2:	18 16       	cp	r1, r24
    17a4:	4c f5       	brge	.+82     	; 0x17f8 <main+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a6:	6f a1       	ldd	r22, Y+39	; 0x27
    17a8:	78 a5       	ldd	r23, Y+40	; 0x28
    17aa:	89 a5       	ldd	r24, Y+41	; 0x29
    17ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e2       	ldi	r20, 0x20	; 32
    17b4:	51 e4       	ldi	r21, 0x41	; 65
    17b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	bc 01       	movw	r22, r24
    17c0:	cd 01       	movw	r24, r26
    17c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	9a a3       	std	Y+34, r25	; 0x22
    17cc:	89 a3       	std	Y+33, r24	; 0x21
    17ce:	0f c0       	rjmp	.+30     	; 0x17ee <main+0x258>
    17d0:	89 e1       	ldi	r24, 0x19	; 25
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	98 a3       	std	Y+32, r25	; 0x20
    17d6:	8f 8f       	std	Y+31, r24	; 0x1f
    17d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17da:	98 a1       	ldd	r25, Y+32	; 0x20
    17dc:	01 97       	sbiw	r24, 0x01	; 1
    17de:	f1 f7       	brne	.-4      	; 0x17dc <main+0x246>
    17e0:	98 a3       	std	Y+32, r25	; 0x20
    17e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e4:	89 a1       	ldd	r24, Y+33	; 0x21
    17e6:	9a a1       	ldd	r25, Y+34	; 0x22
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	9a a3       	std	Y+34, r25	; 0x22
    17ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ee:	89 a1       	ldd	r24, Y+33	; 0x21
    17f0:	9a a1       	ldd	r25, Y+34	; 0x22
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	69 f7       	brne	.-38     	; 0x17d0 <main+0x23a>
    17f6:	14 c0       	rjmp	.+40     	; 0x1820 <main+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f8:	6b a1       	ldd	r22, Y+35	; 0x23
    17fa:	7c a1       	ldd	r23, Y+36	; 0x24
    17fc:	8d a1       	ldd	r24, Y+37	; 0x25
    17fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	9a a3       	std	Y+34, r25	; 0x22
    180a:	89 a3       	std	Y+33, r24	; 0x21
    180c:	89 a1       	ldd	r24, Y+33	; 0x21
    180e:	9a a1       	ldd	r25, Y+34	; 0x22
    1810:	9e 8f       	std	Y+30, r25	; 0x1e
    1812:	8d 8f       	std	Y+29, r24	; 0x1d
    1814:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1816:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	f1 f7       	brne	.-4      	; 0x1818 <main+0x282>
    181c:	9e 8f       	std	Y+30, r25	; 0x1e
    181e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2000);/*delay for uart transmission*/
		if(option == '-')
    1820:	8a ad       	ldd	r24, Y+58	; 0x3a
    1822:	8d 32       	cpi	r24, 0x2D	; 45
    1824:	19 f4       	brne	.+6      	; 0x182c <main+0x296>
		{
			/*
			 * if the option = '-' .....> change the password
			 */
			Change_pass();
    1826:	0e 94 70 08 	call	0x10e0	; 0x10e0 <Change_pass>
    182a:	85 cf       	rjmp	.-246    	; 0x1736 <main+0x1a0>
		}
		else if(option == '+')
    182c:	8a ad       	ldd	r24, Y+58	; 0x3a
    182e:	8b 32       	cpi	r24, 0x2B	; 43
    1830:	09 f0       	breq	.+2      	; 0x1834 <main+0x29e>
    1832:	81 cf       	rjmp	.-254    	; 0x1736 <main+0x1a0>
		{
			/*if '+' ask for password for opening the door*/
			UART_sendByte(g_wrong_password);/*send wrong pass times to HMI for Eroor message displaying*/
    1834:	80 91 a0 00 	lds	r24, 0x00A0
    1838:	0e 94 6f 16 	call	0x2cde	; 0x2cde <UART_sendByte>
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	aa ef       	ldi	r26, 0xFA	; 250
    1842:	b4 e4       	ldi	r27, 0x44	; 68
    1844:	89 8f       	std	Y+25, r24	; 0x19
    1846:	9a 8f       	std	Y+26, r25	; 0x1a
    1848:	ab 8f       	std	Y+27, r26	; 0x1b
    184a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    184c:	69 8d       	ldd	r22, Y+25	; 0x19
    184e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1850:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1852:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	4a e7       	ldi	r20, 0x7A	; 122
    185a:	53 e4       	ldi	r21, 0x43	; 67
    185c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	8d 8b       	std	Y+21, r24	; 0x15
    1866:	9e 8b       	std	Y+22, r25	; 0x16
    1868:	af 8b       	std	Y+23, r26	; 0x17
    186a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    186c:	6d 89       	ldd	r22, Y+21	; 0x15
    186e:	7e 89       	ldd	r23, Y+22	; 0x16
    1870:	8f 89       	ldd	r24, Y+23	; 0x17
    1872:	98 8d       	ldd	r25, Y+24	; 0x18
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e8       	ldi	r20, 0x80	; 128
    187a:	5f e3       	ldi	r21, 0x3F	; 63
    187c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1880:	88 23       	and	r24, r24
    1882:	2c f4       	brge	.+10     	; 0x188e <main+0x2f8>
		__ticks = 1;
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	9c 8b       	std	Y+20, r25	; 0x14
    188a:	8b 8b       	std	Y+19, r24	; 0x13
    188c:	3f c0       	rjmp	.+126    	; 0x190c <main+0x376>
	else if (__tmp > 65535)
    188e:	6d 89       	ldd	r22, Y+21	; 0x15
    1890:	7e 89       	ldd	r23, Y+22	; 0x16
    1892:	8f 89       	ldd	r24, Y+23	; 0x17
    1894:	98 8d       	ldd	r25, Y+24	; 0x18
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	3f ef       	ldi	r19, 0xFF	; 255
    189a:	4f e7       	ldi	r20, 0x7F	; 127
    189c:	57 e4       	ldi	r21, 0x47	; 71
    189e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18a2:	18 16       	cp	r1, r24
    18a4:	4c f5       	brge	.+82     	; 0x18f8 <main+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a6:	69 8d       	ldd	r22, Y+25	; 0x19
    18a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	40 e2       	ldi	r20, 0x20	; 32
    18b4:	51 e4       	ldi	r21, 0x41	; 65
    18b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	bc 01       	movw	r22, r24
    18c0:	cd 01       	movw	r24, r26
    18c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	9c 8b       	std	Y+20, r25	; 0x14
    18cc:	8b 8b       	std	Y+19, r24	; 0x13
    18ce:	0f c0       	rjmp	.+30     	; 0x18ee <main+0x358>
    18d0:	89 e1       	ldi	r24, 0x19	; 25
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	9a 8b       	std	Y+18, r25	; 0x12
    18d6:	89 8b       	std	Y+17, r24	; 0x11
    18d8:	89 89       	ldd	r24, Y+17	; 0x11
    18da:	9a 89       	ldd	r25, Y+18	; 0x12
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	f1 f7       	brne	.-4      	; 0x18dc <main+0x346>
    18e0:	9a 8b       	std	Y+18, r25	; 0x12
    18e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e4:	8b 89       	ldd	r24, Y+19	; 0x13
    18e6:	9c 89       	ldd	r25, Y+20	; 0x14
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	9c 8b       	std	Y+20, r25	; 0x14
    18ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ee:	8b 89       	ldd	r24, Y+19	; 0x13
    18f0:	9c 89       	ldd	r25, Y+20	; 0x14
    18f2:	00 97       	sbiw	r24, 0x00	; 0
    18f4:	69 f7       	brne	.-38     	; 0x18d0 <main+0x33a>
    18f6:	14 c0       	rjmp	.+40     	; 0x1920 <main+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f8:	6d 89       	ldd	r22, Y+21	; 0x15
    18fa:	7e 89       	ldd	r23, Y+22	; 0x16
    18fc:	8f 89       	ldd	r24, Y+23	; 0x17
    18fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	9c 8b       	std	Y+20, r25	; 0x14
    190a:	8b 8b       	std	Y+19, r24	; 0x13
    190c:	8b 89       	ldd	r24, Y+19	; 0x13
    190e:	9c 89       	ldd	r25, Y+20	; 0x14
    1910:	98 8b       	std	Y+16, r25	; 0x10
    1912:	8f 87       	std	Y+15, r24	; 0x0f
    1914:	8f 85       	ldd	r24, Y+15	; 0x0f
    1916:	98 89       	ldd	r25, Y+16	; 0x10
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	f1 f7       	brne	.-4      	; 0x1918 <main+0x382>
    191c:	98 8b       	std	Y+16, r25	; 0x10
    191e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2000);/*delay for uart transmission*/
			UART_receiveString(entered_pass);
    1920:	ce 01       	movw	r24, r28
    1922:	81 5b       	subi	r24, 0xB1	; 177
    1924:	9f 4f       	sbci	r25, 0xFF	; 255
    1926:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <UART_receiveString>
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	aa e7       	ldi	r26, 0x7A	; 122
    1930:	b4 e4       	ldi	r27, 0x44	; 68
    1932:	8b 87       	std	Y+11, r24	; 0x0b
    1934:	9c 87       	std	Y+12, r25	; 0x0c
    1936:	ad 87       	std	Y+13, r26	; 0x0d
    1938:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    193a:	6b 85       	ldd	r22, Y+11	; 0x0b
    193c:	7c 85       	ldd	r23, Y+12	; 0x0c
    193e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1940:	9e 85       	ldd	r25, Y+14	; 0x0e
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	4a e7       	ldi	r20, 0x7A	; 122
    1948:	53 e4       	ldi	r21, 0x43	; 67
    194a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	8f 83       	std	Y+7, r24	; 0x07
    1954:	98 87       	std	Y+8, r25	; 0x08
    1956:	a9 87       	std	Y+9, r26	; 0x09
    1958:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    195a:	6f 81       	ldd	r22, Y+7	; 0x07
    195c:	78 85       	ldd	r23, Y+8	; 0x08
    195e:	89 85       	ldd	r24, Y+9	; 0x09
    1960:	9a 85       	ldd	r25, Y+10	; 0x0a
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e8       	ldi	r20, 0x80	; 128
    1968:	5f e3       	ldi	r21, 0x3F	; 63
    196a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    196e:	88 23       	and	r24, r24
    1970:	2c f4       	brge	.+10     	; 0x197c <main+0x3e6>
		__ticks = 1;
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	9e 83       	std	Y+6, r25	; 0x06
    1978:	8d 83       	std	Y+5, r24	; 0x05
    197a:	3f c0       	rjmp	.+126    	; 0x19fa <main+0x464>
	else if (__tmp > 65535)
    197c:	6f 81       	ldd	r22, Y+7	; 0x07
    197e:	78 85       	ldd	r23, Y+8	; 0x08
    1980:	89 85       	ldd	r24, Y+9	; 0x09
    1982:	9a 85       	ldd	r25, Y+10	; 0x0a
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	3f ef       	ldi	r19, 0xFF	; 255
    1988:	4f e7       	ldi	r20, 0x7F	; 127
    198a:	57 e4       	ldi	r21, 0x47	; 71
    198c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1990:	18 16       	cp	r1, r24
    1992:	4c f5       	brge	.+82     	; 0x19e6 <main+0x450>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1994:	6b 85       	ldd	r22, Y+11	; 0x0b
    1996:	7c 85       	ldd	r23, Y+12	; 0x0c
    1998:	8d 85       	ldd	r24, Y+13	; 0x0d
    199a:	9e 85       	ldd	r25, Y+14	; 0x0e
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	40 e2       	ldi	r20, 0x20	; 32
    19a2:	51 e4       	ldi	r21, 0x41	; 65
    19a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	bc 01       	movw	r22, r24
    19ae:	cd 01       	movw	r24, r26
    19b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	9e 83       	std	Y+6, r25	; 0x06
    19ba:	8d 83       	std	Y+5, r24	; 0x05
    19bc:	0f c0       	rjmp	.+30     	; 0x19dc <main+0x446>
    19be:	89 e1       	ldi	r24, 0x19	; 25
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	9c 83       	std	Y+4, r25	; 0x04
    19c4:	8b 83       	std	Y+3, r24	; 0x03
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ca:	01 97       	sbiw	r24, 0x01	; 1
    19cc:	f1 f7       	brne	.-4      	; 0x19ca <main+0x434>
    19ce:	9c 83       	std	Y+4, r25	; 0x04
    19d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d2:	8d 81       	ldd	r24, Y+5	; 0x05
    19d4:	9e 81       	ldd	r25, Y+6	; 0x06
    19d6:	01 97       	sbiw	r24, 0x01	; 1
    19d8:	9e 83       	std	Y+6, r25	; 0x06
    19da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19dc:	8d 81       	ldd	r24, Y+5	; 0x05
    19de:	9e 81       	ldd	r25, Y+6	; 0x06
    19e0:	00 97       	sbiw	r24, 0x00	; 0
    19e2:	69 f7       	brne	.-38     	; 0x19be <main+0x428>
    19e4:	14 c0       	rjmp	.+40     	; 0x1a0e <main+0x478>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e6:	6f 81       	ldd	r22, Y+7	; 0x07
    19e8:	78 85       	ldd	r23, Y+8	; 0x08
    19ea:	89 85       	ldd	r24, Y+9	; 0x09
    19ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	9e 83       	std	Y+6, r25	; 0x06
    19f8:	8d 83       	std	Y+5, r24	; 0x05
    19fa:	8d 81       	ldd	r24, Y+5	; 0x05
    19fc:	9e 81       	ldd	r25, Y+6	; 0x06
    19fe:	9a 83       	std	Y+2, r25	; 0x02
    1a00:	89 83       	std	Y+1, r24	; 0x01
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	9a 81       	ldd	r25, Y+2	; 0x02
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	f1 f7       	brne	.-4      	; 0x1a06 <main+0x470>
    1a0a:	9a 83       	std	Y+2, r25	; 0x02
    1a0c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);/*delay for uart transmission*/
			/*password match checking for door opening*/
			match = Check_Password_Match(entered_pass);
    1a0e:	ce 01       	movw	r24, r28
    1a10:	81 5b       	subi	r24, 0xB1	; 177
    1a12:	9f 4f       	sbci	r25, 0xFF	; 255
    1a14:	0e 94 7e 06 	call	0xcfc	; 0xcfc <Check_Password_Match>
    1a18:	89 af       	std	Y+57, r24	; 0x39
			if(match)
    1a1a:	89 ad       	ldd	r24, Y+57	; 0x39
    1a1c:	88 23       	and	r24, r24
    1a1e:	29 f0       	breq	.+10     	; 0x1a2a <main+0x494>
			{
				g_wrong_password=0;
    1a20:	10 92 a0 00 	sts	0x00A0, r1
				Open_Door();/*open the door*/
    1a24:	0e 94 17 08 	call	0x102e	; 0x102e <Open_Door>
    1a28:	86 ce       	rjmp	.-756    	; 0x1736 <main+0x1a0>
			}
			else
			{
				/*if wrong time get 3 times (0,1,2) eraise an error message*/
				g_wrong_password++;
    1a2a:	80 91 a0 00 	lds	r24, 0x00A0
    1a2e:	8f 5f       	subi	r24, 0xFF	; 255
    1a30:	80 93 a0 00 	sts	0x00A0, r24
				if(g_wrong_password == 3)
    1a34:	80 91 a0 00 	lds	r24, 0x00A0
    1a38:	83 30       	cpi	r24, 0x03	; 3
    1a3a:	09 f0       	breq	.+2      	; 0x1a3e <main+0x4a8>
    1a3c:	7c ce       	rjmp	.-776    	; 0x1736 <main+0x1a0>
				{
					g_buzzerflag=1;/*to begin buzzer loop*/
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	80 93 a4 00 	sts	0x00A4, r24
					/*
					 * initialize timer1
					 */
					TIMER_Configuration t_config={timer1,CMP_Mode,0,58594,F_cpu_1024,0};
    1a44:	ce 01       	movw	r24, r28
    1a46:	88 59       	subi	r24, 0x98	; 152
    1a48:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4a:	e7 96       	adiw	r28, 0x37	; 55
    1a4c:	9f af       	std	Y+63, r25	; 0x3f
    1a4e:	8e af       	std	Y+62, r24	; 0x3e
    1a50:	e7 97       	sbiw	r28, 0x37	; 55
    1a52:	82 e9       	ldi	r24, 0x92	; 146
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	e9 96       	adiw	r28, 0x39	; 57
    1a58:	9f af       	std	Y+63, r25	; 0x3f
    1a5a:	8e af       	std	Y+62, r24	; 0x3e
    1a5c:	e9 97       	sbiw	r28, 0x39	; 57
    1a5e:	98 e0       	ldi	r25, 0x08	; 8
    1a60:	ea 96       	adiw	r28, 0x3a	; 58
    1a62:	9f af       	std	Y+63, r25	; 0x3f
    1a64:	ea 97       	sbiw	r28, 0x3a	; 58
    1a66:	e9 96       	adiw	r28, 0x39	; 57
    1a68:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a6a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a6c:	e9 97       	sbiw	r28, 0x39	; 57
    1a6e:	00 80       	ld	r0, Z
    1a70:	e9 96       	adiw	r28, 0x39	; 57
    1a72:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a74:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a76:	e9 97       	sbiw	r28, 0x39	; 57
    1a78:	01 96       	adiw	r24, 0x01	; 1
    1a7a:	e9 96       	adiw	r28, 0x39	; 57
    1a7c:	9f af       	std	Y+63, r25	; 0x3f
    1a7e:	8e af       	std	Y+62, r24	; 0x3e
    1a80:	e9 97       	sbiw	r28, 0x39	; 57
    1a82:	e7 96       	adiw	r28, 0x37	; 55
    1a84:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a86:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a88:	e7 97       	sbiw	r28, 0x37	; 55
    1a8a:	00 82       	st	Z, r0
    1a8c:	e7 96       	adiw	r28, 0x37	; 55
    1a8e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a90:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a92:	e7 97       	sbiw	r28, 0x37	; 55
    1a94:	01 96       	adiw	r24, 0x01	; 1
    1a96:	e7 96       	adiw	r28, 0x37	; 55
    1a98:	9f af       	std	Y+63, r25	; 0x3f
    1a9a:	8e af       	std	Y+62, r24	; 0x3e
    1a9c:	e7 97       	sbiw	r28, 0x37	; 55
    1a9e:	ea 96       	adiw	r28, 0x3a	; 58
    1aa0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1aa2:	ea 97       	sbiw	r28, 0x3a	; 58
    1aa4:	91 50       	subi	r25, 0x01	; 1
    1aa6:	ea 96       	adiw	r28, 0x3a	; 58
    1aa8:	9f af       	std	Y+63, r25	; 0x3f
    1aaa:	ea 97       	sbiw	r28, 0x3a	; 58
    1aac:	ea 96       	adiw	r28, 0x3a	; 58
    1aae:	ef ad       	ldd	r30, Y+63	; 0x3f
    1ab0:	ea 97       	sbiw	r28, 0x3a	; 58
    1ab2:	ee 23       	and	r30, r30
    1ab4:	c1 f6       	brne	.-80     	; 0x1a66 <main+0x4d0>
					TIMER_setCallback(Buzzer_Stop,CMP_Mode,timer1);
    1ab6:	89 e5       	ldi	r24, 0x59	; 89
    1ab8:	98 e0       	ldi	r25, 0x08	; 8
    1aba:	61 e0       	ldi	r22, 0x01	; 1
    1abc:	41 e0       	ldi	r20, 0x01	; 1
    1abe:	0e 94 e6 14 	call	0x29cc	; 0x29cc <TIMER_setCallback>
					TIMER_init(&t_config);
    1ac2:	ce 01       	movw	r24, r28
    1ac4:	88 59       	subi	r24, 0x98	; 152
    1ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac8:	0e 94 ed 12 	call	0x25da	; 0x25da <TIMER_init>
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <main+0x53c>
					/*
					 * if 1 min passed ---> flag =0 --> loop terminated
					 */
					while(g_buzzerflag == 1)
					{
						BUZZER_ON();/*turn on the buzzer*/
    1ace:	0e 94 af 05 	call	0xb5e	; 0xb5e <BUZZER_ON>
					TIMER_setCallback(Buzzer_Stop,CMP_Mode,timer1);
					TIMER_init(&t_config);
					/*
					 * if 1 min passed ---> flag =0 --> loop terminated
					 */
					while(g_buzzerflag == 1)
    1ad2:	80 91 a4 00 	lds	r24, 0x00A4
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	d1 f3       	breq	.-12     	; 0x1ace <main+0x538>
					{
						BUZZER_ON();/*turn on the buzzer*/
					}
					g_wrong_password=0;
    1ada:	10 92 a0 00 	sts	0x00A0, r1
					BUZZER_OFF();/*turn on the buzzer*/
    1ade:	0e 94 bb 05 	call	0xb76	; 0xb76 <BUZZER_OFF>
    1ae2:	29 ce       	rjmp	.-942    	; 0x1736 <main+0x1a0>

00001ae4 <EEPROM_init>:
#include "external_eeprom.h"
#include "twi.h"

TWI_ConfigurationStruct TWI_config ={0b0000001,Fast_Mode};
void EEPROM_init()
{
    1ae4:	df 93       	push	r29
    1ae6:	cf 93       	push	r28
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
	TWI_init(&TWI_config);
    1aec:	88 e6       	ldi	r24, 0x68	; 104
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <TWI_init>
}
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	08 95       	ret

00001afa <EEPROM_writeByte>:
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1afa:	df 93       	push	r29
    1afc:	cf 93       	push	r28
    1afe:	00 d0       	rcall	.+0      	; 0x1b00 <EEPROM_writeByte+0x6>
    1b00:	00 d0       	rcall	.+0      	; 0x1b02 <EEPROM_writeByte+0x8>
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62
    1b06:	9a 83       	std	Y+2, r25	; 0x02
    1b08:	89 83       	std	Y+1, r24	; 0x01
    1b0a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1b0c:	0e 94 82 15 	call	0x2b04	; 0x2b04 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1b10:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <TWI_getStatus>
    1b14:	88 30       	cpi	r24, 0x08	; 8
    1b16:	11 f0       	breq	.+4      	; 0x1b1c <EEPROM_writeByte+0x22>
        return ERROR;
    1b18:	1c 82       	std	Y+4, r1	; 0x04
    1b1a:	28 c0       	rjmp	.+80     	; 0x1b6c <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b20:	80 70       	andi	r24, 0x00	; 0
    1b22:	97 70       	andi	r25, 0x07	; 7
    1b24:	88 0f       	add	r24, r24
    1b26:	89 2f       	mov	r24, r25
    1b28:	88 1f       	adc	r24, r24
    1b2a:	99 0b       	sbc	r25, r25
    1b2c:	91 95       	neg	r25
    1b2e:	80 6a       	ori	r24, 0xA0	; 160
    1b30:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1b34:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <TWI_getStatus>
    1b38:	88 31       	cpi	r24, 0x18	; 24
    1b3a:	11 f0       	breq	.+4      	; 0x1b40 <EEPROM_writeByte+0x46>
        return ERROR; 
    1b3c:	1c 82       	std	Y+4, r1	; 0x04
    1b3e:	16 c0       	rjmp	.+44     	; 0x1b6c <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1b46:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <TWI_getStatus>
    1b4a:	88 32       	cpi	r24, 0x28	; 40
    1b4c:	11 f0       	breq	.+4      	; 0x1b52 <EEPROM_writeByte+0x58>
        return ERROR;
    1b4e:	1c 82       	std	Y+4, r1	; 0x04
    1b50:	0d c0       	rjmp	.+26     	; 0x1b6c <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1b52:	8b 81       	ldd	r24, Y+3	; 0x03
    1b54:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1b58:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <TWI_getStatus>
    1b5c:	88 32       	cpi	r24, 0x28	; 40
    1b5e:	11 f0       	breq	.+4      	; 0x1b64 <EEPROM_writeByte+0x6a>
        return ERROR;
    1b60:	1c 82       	std	Y+4, r1	; 0x04
    1b62:	04 c0       	rjmp	.+8      	; 0x1b6c <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1b64:	0e 94 92 15 	call	0x2b24	; 0x2b24 <TWI_stop>
	
    return SUCCESS;
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	8c 83       	std	Y+4, r24	; 0x04
    1b6c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	00 d0       	rcall	.+0      	; 0x1b82 <EEPROM_readByte+0x6>
    1b82:	00 d0       	rcall	.+0      	; 0x1b84 <EEPROM_readByte+0x8>
    1b84:	0f 92       	push	r0
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	9a 83       	std	Y+2, r25	; 0x02
    1b8c:	89 83       	std	Y+1, r24	; 0x01
    1b8e:	7c 83       	std	Y+4, r23	; 0x04
    1b90:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1b92:	0e 94 82 15 	call	0x2b04	; 0x2b04 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1b96:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <TWI_getStatus>
    1b9a:	88 30       	cpi	r24, 0x08	; 8
    1b9c:	11 f0       	breq	.+4      	; 0x1ba2 <EEPROM_readByte+0x26>
        return ERROR;
    1b9e:	1d 82       	std	Y+5, r1	; 0x05
    1ba0:	44 c0       	rjmp	.+136    	; 0x1c2a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba6:	80 70       	andi	r24, 0x00	; 0
    1ba8:	97 70       	andi	r25, 0x07	; 7
    1baa:	88 0f       	add	r24, r24
    1bac:	89 2f       	mov	r24, r25
    1bae:	88 1f       	adc	r24, r24
    1bb0:	99 0b       	sbc	r25, r25
    1bb2:	91 95       	neg	r25
    1bb4:	80 6a       	ori	r24, 0xA0	; 160
    1bb6:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1bba:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <TWI_getStatus>
    1bbe:	88 31       	cpi	r24, 0x18	; 24
    1bc0:	11 f0       	breq	.+4      	; 0x1bc6 <EEPROM_readByte+0x4a>
        return ERROR;
    1bc2:	1d 82       	std	Y+5, r1	; 0x05
    1bc4:	32 c0       	rjmp	.+100    	; 0x1c2a <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1bcc:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <TWI_getStatus>
    1bd0:	88 32       	cpi	r24, 0x28	; 40
    1bd2:	11 f0       	breq	.+4      	; 0x1bd8 <EEPROM_readByte+0x5c>
        return ERROR;
    1bd4:	1d 82       	std	Y+5, r1	; 0x05
    1bd6:	29 c0       	rjmp	.+82     	; 0x1c2a <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1bd8:	0e 94 82 15 	call	0x2b04	; 0x2b04 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1bdc:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <TWI_getStatus>
    1be0:	80 31       	cpi	r24, 0x10	; 16
    1be2:	11 f0       	breq	.+4      	; 0x1be8 <EEPROM_readByte+0x6c>
        return ERROR;
    1be4:	1d 82       	std	Y+5, r1	; 0x05
    1be6:	21 c0       	rjmp	.+66     	; 0x1c2a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	9a 81       	ldd	r25, Y+2	; 0x02
    1bec:	80 70       	andi	r24, 0x00	; 0
    1bee:	97 70       	andi	r25, 0x07	; 7
    1bf0:	88 0f       	add	r24, r24
    1bf2:	89 2f       	mov	r24, r25
    1bf4:	88 1f       	adc	r24, r24
    1bf6:	99 0b       	sbc	r25, r25
    1bf8:	91 95       	neg	r25
    1bfa:	81 6a       	ori	r24, 0xA1	; 161
    1bfc:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1c00:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <TWI_getStatus>
    1c04:	80 34       	cpi	r24, 0x40	; 64
    1c06:	11 f0       	breq	.+4      	; 0x1c0c <EEPROM_readByte+0x90>
        return ERROR;
    1c08:	1d 82       	std	Y+5, r1	; 0x05
    1c0a:	0f c0       	rjmp	.+30     	; 0x1c2a <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1c0c:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <TWI_readByteWithNACK>
    1c10:	eb 81       	ldd	r30, Y+3	; 0x03
    1c12:	fc 81       	ldd	r31, Y+4	; 0x04
    1c14:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1c16:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <TWI_getStatus>
    1c1a:	88 35       	cpi	r24, 0x58	; 88
    1c1c:	11 f0       	breq	.+4      	; 0x1c22 <EEPROM_readByte+0xa6>
        return ERROR;
    1c1e:	1d 82       	std	Y+5, r1	; 0x05
    1c20:	04 c0       	rjmp	.+8      	; 0x1c2a <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1c22:	0e 94 92 15 	call	0x2b24	; 0x2b24 <TWI_stop>

    return SUCCESS;
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	8d 83       	std	Y+5, r24	; 0x05
    1c2a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	cf 91       	pop	r28
    1c38:	df 91       	pop	r29
    1c3a:	08 95       	ret

00001c3c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1c3c:	df 93       	push	r29
    1c3e:	cf 93       	push	r28
    1c40:	00 d0       	rcall	.+0      	; 0x1c42 <GPIO_setupPinDirection+0x6>
    1c42:	00 d0       	rcall	.+0      	; 0x1c44 <GPIO_setupPinDirection+0x8>
    1c44:	0f 92       	push	r0
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	89 83       	std	Y+1, r24	; 0x01
    1c4c:	6a 83       	std	Y+2, r22	; 0x02
    1c4e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	88 30       	cpi	r24, 0x08	; 8
    1c54:	08 f0       	brcs	.+2      	; 0x1c58 <GPIO_setupPinDirection+0x1c>
    1c56:	d5 c0       	rjmp	.+426    	; 0x1e02 <GPIO_setupPinDirection+0x1c6>
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	84 30       	cpi	r24, 0x04	; 4
    1c5c:	08 f0       	brcs	.+2      	; 0x1c60 <GPIO_setupPinDirection+0x24>
    1c5e:	d1 c0       	rjmp	.+418    	; 0x1e02 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	28 2f       	mov	r18, r24
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	3d 83       	std	Y+5, r19	; 0x05
    1c68:	2c 83       	std	Y+4, r18	; 0x04
    1c6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6e:	81 30       	cpi	r24, 0x01	; 1
    1c70:	91 05       	cpc	r25, r1
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <GPIO_setupPinDirection+0x3a>
    1c74:	43 c0       	rjmp	.+134    	; 0x1cfc <GPIO_setupPinDirection+0xc0>
    1c76:	2c 81       	ldd	r18, Y+4	; 0x04
    1c78:	3d 81       	ldd	r19, Y+5	; 0x05
    1c7a:	22 30       	cpi	r18, 0x02	; 2
    1c7c:	31 05       	cpc	r19, r1
    1c7e:	2c f4       	brge	.+10     	; 0x1c8a <GPIO_setupPinDirection+0x4e>
    1c80:	8c 81       	ldd	r24, Y+4	; 0x04
    1c82:	9d 81       	ldd	r25, Y+5	; 0x05
    1c84:	00 97       	sbiw	r24, 0x00	; 0
    1c86:	71 f0       	breq	.+28     	; 0x1ca4 <GPIO_setupPinDirection+0x68>
    1c88:	bc c0       	rjmp	.+376    	; 0x1e02 <GPIO_setupPinDirection+0x1c6>
    1c8a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c8c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c8e:	22 30       	cpi	r18, 0x02	; 2
    1c90:	31 05       	cpc	r19, r1
    1c92:	09 f4       	brne	.+2      	; 0x1c96 <GPIO_setupPinDirection+0x5a>
    1c94:	5f c0       	rjmp	.+190    	; 0x1d54 <GPIO_setupPinDirection+0x118>
    1c96:	8c 81       	ldd	r24, Y+4	; 0x04
    1c98:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9a:	83 30       	cpi	r24, 0x03	; 3
    1c9c:	91 05       	cpc	r25, r1
    1c9e:	09 f4       	brne	.+2      	; 0x1ca2 <GPIO_setupPinDirection+0x66>
    1ca0:	85 c0       	rjmp	.+266    	; 0x1dac <GPIO_setupPinDirection+0x170>
    1ca2:	af c0       	rjmp	.+350    	; 0x1e02 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	81 30       	cpi	r24, 0x01	; 1
    1ca8:	a1 f4       	brne	.+40     	; 0x1cd2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1caa:	aa e3       	ldi	r26, 0x3A	; 58
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	ea e3       	ldi	r30, 0x3A	; 58
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	48 2f       	mov	r20, r24
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	02 2e       	mov	r0, r18
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <GPIO_setupPinDirection+0x8c>
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	0a 94       	dec	r0
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <GPIO_setupPinDirection+0x88>
    1ccc:	84 2b       	or	r24, r20
    1cce:	8c 93       	st	X, r24
    1cd0:	98 c0       	rjmp	.+304    	; 0x1e02 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1cd2:	aa e3       	ldi	r26, 0x3A	; 58
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	ea e3       	ldi	r30, 0x3A	; 58
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	48 2f       	mov	r20, r24
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce0:	28 2f       	mov	r18, r24
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	02 2e       	mov	r0, r18
    1cea:	02 c0       	rjmp	.+4      	; 0x1cf0 <GPIO_setupPinDirection+0xb4>
    1cec:	88 0f       	add	r24, r24
    1cee:	99 1f       	adc	r25, r25
    1cf0:	0a 94       	dec	r0
    1cf2:	e2 f7       	brpl	.-8      	; 0x1cec <GPIO_setupPinDirection+0xb0>
    1cf4:	80 95       	com	r24
    1cf6:	84 23       	and	r24, r20
    1cf8:	8c 93       	st	X, r24
    1cfa:	83 c0       	rjmp	.+262    	; 0x1e02 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	81 30       	cpi	r24, 0x01	; 1
    1d00:	a1 f4       	brne	.+40     	; 0x1d2a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1d02:	a7 e3       	ldi	r26, 0x37	; 55
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	e7 e3       	ldi	r30, 0x37	; 55
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	48 2f       	mov	r20, r24
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	02 2e       	mov	r0, r18
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <GPIO_setupPinDirection+0xe4>
    1d1c:	88 0f       	add	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	0a 94       	dec	r0
    1d22:	e2 f7       	brpl	.-8      	; 0x1d1c <GPIO_setupPinDirection+0xe0>
    1d24:	84 2b       	or	r24, r20
    1d26:	8c 93       	st	X, r24
    1d28:	6c c0       	rjmp	.+216    	; 0x1e02 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1d2a:	a7 e3       	ldi	r26, 0x37	; 55
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	e7 e3       	ldi	r30, 0x37	; 55
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	48 2f       	mov	r20, r24
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	02 2e       	mov	r0, r18
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <GPIO_setupPinDirection+0x10c>
    1d44:	88 0f       	add	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	0a 94       	dec	r0
    1d4a:	e2 f7       	brpl	.-8      	; 0x1d44 <GPIO_setupPinDirection+0x108>
    1d4c:	80 95       	com	r24
    1d4e:	84 23       	and	r24, r20
    1d50:	8c 93       	st	X, r24
    1d52:	57 c0       	rjmp	.+174    	; 0x1e02 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	81 30       	cpi	r24, 0x01	; 1
    1d58:	a1 f4       	brne	.+40     	; 0x1d82 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1d5a:	a4 e3       	ldi	r26, 0x34	; 52
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	e4 e3       	ldi	r30, 0x34	; 52
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	48 2f       	mov	r20, r24
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	02 2e       	mov	r0, r18
    1d72:	02 c0       	rjmp	.+4      	; 0x1d78 <GPIO_setupPinDirection+0x13c>
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	0a 94       	dec	r0
    1d7a:	e2 f7       	brpl	.-8      	; 0x1d74 <GPIO_setupPinDirection+0x138>
    1d7c:	84 2b       	or	r24, r20
    1d7e:	8c 93       	st	X, r24
    1d80:	40 c0       	rjmp	.+128    	; 0x1e02 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1d82:	a4 e3       	ldi	r26, 0x34	; 52
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e4 e3       	ldi	r30, 0x34	; 52
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	48 2f       	mov	r20, r24
    1d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d90:	28 2f       	mov	r18, r24
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	02 2e       	mov	r0, r18
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <GPIO_setupPinDirection+0x164>
    1d9c:	88 0f       	add	r24, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	0a 94       	dec	r0
    1da2:	e2 f7       	brpl	.-8      	; 0x1d9c <GPIO_setupPinDirection+0x160>
    1da4:	80 95       	com	r24
    1da6:	84 23       	and	r24, r20
    1da8:	8c 93       	st	X, r24
    1daa:	2b c0       	rjmp	.+86     	; 0x1e02 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	a1 f4       	brne	.+40     	; 0x1dda <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1db2:	a1 e3       	ldi	r26, 0x31	; 49
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e1 e3       	ldi	r30, 0x31	; 49
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	48 2f       	mov	r20, r24
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	02 2e       	mov	r0, r18
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <GPIO_setupPinDirection+0x194>
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	0a 94       	dec	r0
    1dd2:	e2 f7       	brpl	.-8      	; 0x1dcc <GPIO_setupPinDirection+0x190>
    1dd4:	84 2b       	or	r24, r20
    1dd6:	8c 93       	st	X, r24
    1dd8:	14 c0       	rjmp	.+40     	; 0x1e02 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1dda:	a1 e3       	ldi	r26, 0x31	; 49
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e1 e3       	ldi	r30, 0x31	; 49
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	48 2f       	mov	r20, r24
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	02 2e       	mov	r0, r18
    1df2:	02 c0       	rjmp	.+4      	; 0x1df8 <GPIO_setupPinDirection+0x1bc>
    1df4:	88 0f       	add	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	0a 94       	dec	r0
    1dfa:	e2 f7       	brpl	.-8      	; 0x1df4 <GPIO_setupPinDirection+0x1b8>
    1dfc:	80 95       	com	r24
    1dfe:	84 23       	and	r24, r20
    1e00:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	08 95       	ret

00001e12 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <GPIO_writePin+0x6>
    1e18:	00 d0       	rcall	.+0      	; 0x1e1a <GPIO_writePin+0x8>
    1e1a:	0f 92       	push	r0
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
    1e20:	89 83       	std	Y+1, r24	; 0x01
    1e22:	6a 83       	std	Y+2, r22	; 0x02
    1e24:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	88 30       	cpi	r24, 0x08	; 8
    1e2a:	08 f0       	brcs	.+2      	; 0x1e2e <GPIO_writePin+0x1c>
    1e2c:	d5 c0       	rjmp	.+426    	; 0x1fd8 <GPIO_writePin+0x1c6>
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	84 30       	cpi	r24, 0x04	; 4
    1e32:	08 f0       	brcs	.+2      	; 0x1e36 <GPIO_writePin+0x24>
    1e34:	d1 c0       	rjmp	.+418    	; 0x1fd8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	3d 83       	std	Y+5, r19	; 0x05
    1e3e:	2c 83       	std	Y+4, r18	; 0x04
    1e40:	8c 81       	ldd	r24, Y+4	; 0x04
    1e42:	9d 81       	ldd	r25, Y+5	; 0x05
    1e44:	81 30       	cpi	r24, 0x01	; 1
    1e46:	91 05       	cpc	r25, r1
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <GPIO_writePin+0x3a>
    1e4a:	43 c0       	rjmp	.+134    	; 0x1ed2 <GPIO_writePin+0xc0>
    1e4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e50:	22 30       	cpi	r18, 0x02	; 2
    1e52:	31 05       	cpc	r19, r1
    1e54:	2c f4       	brge	.+10     	; 0x1e60 <GPIO_writePin+0x4e>
    1e56:	8c 81       	ldd	r24, Y+4	; 0x04
    1e58:	9d 81       	ldd	r25, Y+5	; 0x05
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	71 f0       	breq	.+28     	; 0x1e7a <GPIO_writePin+0x68>
    1e5e:	bc c0       	rjmp	.+376    	; 0x1fd8 <GPIO_writePin+0x1c6>
    1e60:	2c 81       	ldd	r18, Y+4	; 0x04
    1e62:	3d 81       	ldd	r19, Y+5	; 0x05
    1e64:	22 30       	cpi	r18, 0x02	; 2
    1e66:	31 05       	cpc	r19, r1
    1e68:	09 f4       	brne	.+2      	; 0x1e6c <GPIO_writePin+0x5a>
    1e6a:	5f c0       	rjmp	.+190    	; 0x1f2a <GPIO_writePin+0x118>
    1e6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e70:	83 30       	cpi	r24, 0x03	; 3
    1e72:	91 05       	cpc	r25, r1
    1e74:	09 f4       	brne	.+2      	; 0x1e78 <GPIO_writePin+0x66>
    1e76:	85 c0       	rjmp	.+266    	; 0x1f82 <GPIO_writePin+0x170>
    1e78:	af c0       	rjmp	.+350    	; 0x1fd8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	81 30       	cpi	r24, 0x01	; 1
    1e7e:	a1 f4       	brne	.+40     	; 0x1ea8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1e80:	ab e3       	ldi	r26, 0x3B	; 59
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	eb e3       	ldi	r30, 0x3B	; 59
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	48 2f       	mov	r20, r24
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	02 2e       	mov	r0, r18
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <GPIO_writePin+0x8c>
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	0a 94       	dec	r0
    1ea0:	e2 f7       	brpl	.-8      	; 0x1e9a <GPIO_writePin+0x88>
    1ea2:	84 2b       	or	r24, r20
    1ea4:	8c 93       	st	X, r24
    1ea6:	98 c0       	rjmp	.+304    	; 0x1fd8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1ea8:	ab e3       	ldi	r26, 0x3B	; 59
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	eb e3       	ldi	r30, 0x3B	; 59
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	48 2f       	mov	r20, r24
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	28 2f       	mov	r18, r24
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	02 2e       	mov	r0, r18
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <GPIO_writePin+0xb4>
    1ec2:	88 0f       	add	r24, r24
    1ec4:	99 1f       	adc	r25, r25
    1ec6:	0a 94       	dec	r0
    1ec8:	e2 f7       	brpl	.-8      	; 0x1ec2 <GPIO_writePin+0xb0>
    1eca:	80 95       	com	r24
    1ecc:	84 23       	and	r24, r20
    1ece:	8c 93       	st	X, r24
    1ed0:	83 c0       	rjmp	.+262    	; 0x1fd8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	81 30       	cpi	r24, 0x01	; 1
    1ed6:	a1 f4       	brne	.+40     	; 0x1f00 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1ed8:	a8 e3       	ldi	r26, 0x38	; 56
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	e8 e3       	ldi	r30, 0x38	; 56
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	48 2f       	mov	r20, r24
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	28 2f       	mov	r18, r24
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	02 2e       	mov	r0, r18
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <GPIO_writePin+0xe4>
    1ef2:	88 0f       	add	r24, r24
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	0a 94       	dec	r0
    1ef8:	e2 f7       	brpl	.-8      	; 0x1ef2 <GPIO_writePin+0xe0>
    1efa:	84 2b       	or	r24, r20
    1efc:	8c 93       	st	X, r24
    1efe:	6c c0       	rjmp	.+216    	; 0x1fd8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1f00:	a8 e3       	ldi	r26, 0x38	; 56
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	e8 e3       	ldi	r30, 0x38	; 56
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	48 2f       	mov	r20, r24
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	02 2e       	mov	r0, r18
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <GPIO_writePin+0x10c>
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	0a 94       	dec	r0
    1f20:	e2 f7       	brpl	.-8      	; 0x1f1a <GPIO_writePin+0x108>
    1f22:	80 95       	com	r24
    1f24:	84 23       	and	r24, r20
    1f26:	8c 93       	st	X, r24
    1f28:	57 c0       	rjmp	.+174    	; 0x1fd8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2c:	81 30       	cpi	r24, 0x01	; 1
    1f2e:	a1 f4       	brne	.+40     	; 0x1f58 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1f30:	a5 e3       	ldi	r26, 0x35	; 53
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e5 e3       	ldi	r30, 0x35	; 53
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	48 2f       	mov	r20, r24
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	28 2f       	mov	r18, r24
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	02 2e       	mov	r0, r18
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <GPIO_writePin+0x13c>
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	0a 94       	dec	r0
    1f50:	e2 f7       	brpl	.-8      	; 0x1f4a <GPIO_writePin+0x138>
    1f52:	84 2b       	or	r24, r20
    1f54:	8c 93       	st	X, r24
    1f56:	40 c0       	rjmp	.+128    	; 0x1fd8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1f58:	a5 e3       	ldi	r26, 0x35	; 53
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	e5 e3       	ldi	r30, 0x35	; 53
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	48 2f       	mov	r20, r24
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	02 2e       	mov	r0, r18
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <GPIO_writePin+0x164>
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	0a 94       	dec	r0
    1f78:	e2 f7       	brpl	.-8      	; 0x1f72 <GPIO_writePin+0x160>
    1f7a:	80 95       	com	r24
    1f7c:	84 23       	and	r24, r20
    1f7e:	8c 93       	st	X, r24
    1f80:	2b c0       	rjmp	.+86     	; 0x1fd8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	81 30       	cpi	r24, 0x01	; 1
    1f86:	a1 f4       	brne	.+40     	; 0x1fb0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1f88:	a2 e3       	ldi	r26, 0x32	; 50
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	e2 e3       	ldi	r30, 0x32	; 50
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	48 2f       	mov	r20, r24
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	28 2f       	mov	r18, r24
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	02 2e       	mov	r0, r18
    1fa0:	02 c0       	rjmp	.+4      	; 0x1fa6 <GPIO_writePin+0x194>
    1fa2:	88 0f       	add	r24, r24
    1fa4:	99 1f       	adc	r25, r25
    1fa6:	0a 94       	dec	r0
    1fa8:	e2 f7       	brpl	.-8      	; 0x1fa2 <GPIO_writePin+0x190>
    1faa:	84 2b       	or	r24, r20
    1fac:	8c 93       	st	X, r24
    1fae:	14 c0       	rjmp	.+40     	; 0x1fd8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1fb0:	a2 e3       	ldi	r26, 0x32	; 50
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e2 e3       	ldi	r30, 0x32	; 50
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	48 2f       	mov	r20, r24
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	02 2e       	mov	r0, r18
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <GPIO_writePin+0x1bc>
    1fca:	88 0f       	add	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	0a 94       	dec	r0
    1fd0:	e2 f7       	brpl	.-8      	; 0x1fca <GPIO_writePin+0x1b8>
    1fd2:	80 95       	com	r24
    1fd4:	84 23       	and	r24, r20
    1fd6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	cf 91       	pop	r28
    1fe4:	df 91       	pop	r29
    1fe6:	08 95       	ret

00001fe8 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1fe8:	df 93       	push	r29
    1fea:	cf 93       	push	r28
    1fec:	00 d0       	rcall	.+0      	; 0x1fee <GPIO_readPin+0x6>
    1fee:	00 d0       	rcall	.+0      	; 0x1ff0 <GPIO_readPin+0x8>
    1ff0:	0f 92       	push	r0
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	8a 83       	std	Y+2, r24	; 0x02
    1ff8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1ffa:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	88 30       	cpi	r24, 0x08	; 8
    2000:	08 f0       	brcs	.+2      	; 0x2004 <GPIO_readPin+0x1c>
    2002:	84 c0       	rjmp	.+264    	; 0x210c <GPIO_readPin+0x124>
    2004:	8a 81       	ldd	r24, Y+2	; 0x02
    2006:	84 30       	cpi	r24, 0x04	; 4
    2008:	08 f0       	brcs	.+2      	; 0x200c <GPIO_readPin+0x24>
    200a:	80 c0       	rjmp	.+256    	; 0x210c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	3d 83       	std	Y+5, r19	; 0x05
    2014:	2c 83       	std	Y+4, r18	; 0x04
    2016:	4c 81       	ldd	r20, Y+4	; 0x04
    2018:	5d 81       	ldd	r21, Y+5	; 0x05
    201a:	41 30       	cpi	r20, 0x01	; 1
    201c:	51 05       	cpc	r21, r1
    201e:	79 f1       	breq	.+94     	; 0x207e <GPIO_readPin+0x96>
    2020:	8c 81       	ldd	r24, Y+4	; 0x04
    2022:	9d 81       	ldd	r25, Y+5	; 0x05
    2024:	82 30       	cpi	r24, 0x02	; 2
    2026:	91 05       	cpc	r25, r1
    2028:	34 f4       	brge	.+12     	; 0x2036 <GPIO_readPin+0x4e>
    202a:	2c 81       	ldd	r18, Y+4	; 0x04
    202c:	3d 81       	ldd	r19, Y+5	; 0x05
    202e:	21 15       	cp	r18, r1
    2030:	31 05       	cpc	r19, r1
    2032:	69 f0       	breq	.+26     	; 0x204e <GPIO_readPin+0x66>
    2034:	6b c0       	rjmp	.+214    	; 0x210c <GPIO_readPin+0x124>
    2036:	4c 81       	ldd	r20, Y+4	; 0x04
    2038:	5d 81       	ldd	r21, Y+5	; 0x05
    203a:	42 30       	cpi	r20, 0x02	; 2
    203c:	51 05       	cpc	r21, r1
    203e:	b9 f1       	breq	.+110    	; 0x20ae <GPIO_readPin+0xc6>
    2040:	8c 81       	ldd	r24, Y+4	; 0x04
    2042:	9d 81       	ldd	r25, Y+5	; 0x05
    2044:	83 30       	cpi	r24, 0x03	; 3
    2046:	91 05       	cpc	r25, r1
    2048:	09 f4       	brne	.+2      	; 0x204c <GPIO_readPin+0x64>
    204a:	49 c0       	rjmp	.+146    	; 0x20de <GPIO_readPin+0xf6>
    204c:	5f c0       	rjmp	.+190    	; 0x210c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    204e:	e9 e3       	ldi	r30, 0x39	; 57
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	28 2f       	mov	r18, r24
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	88 2f       	mov	r24, r24
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	a9 01       	movw	r20, r18
    2060:	02 c0       	rjmp	.+4      	; 0x2066 <GPIO_readPin+0x7e>
    2062:	55 95       	asr	r21
    2064:	47 95       	ror	r20
    2066:	8a 95       	dec	r24
    2068:	e2 f7       	brpl	.-8      	; 0x2062 <GPIO_readPin+0x7a>
    206a:	ca 01       	movw	r24, r20
    206c:	81 70       	andi	r24, 0x01	; 1
    206e:	90 70       	andi	r25, 0x00	; 0
    2070:	88 23       	and	r24, r24
    2072:	19 f0       	breq	.+6      	; 0x207a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	89 83       	std	Y+1, r24	; 0x01
    2078:	49 c0       	rjmp	.+146    	; 0x210c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    207a:	19 82       	std	Y+1, r1	; 0x01
    207c:	47 c0       	rjmp	.+142    	; 0x210c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    207e:	e6 e3       	ldi	r30, 0x36	; 54
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	80 81       	ld	r24, Z
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	88 2f       	mov	r24, r24
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	a9 01       	movw	r20, r18
    2090:	02 c0       	rjmp	.+4      	; 0x2096 <GPIO_readPin+0xae>
    2092:	55 95       	asr	r21
    2094:	47 95       	ror	r20
    2096:	8a 95       	dec	r24
    2098:	e2 f7       	brpl	.-8      	; 0x2092 <GPIO_readPin+0xaa>
    209a:	ca 01       	movw	r24, r20
    209c:	81 70       	andi	r24, 0x01	; 1
    209e:	90 70       	andi	r25, 0x00	; 0
    20a0:	88 23       	and	r24, r24
    20a2:	19 f0       	breq	.+6      	; 0x20aa <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	89 83       	std	Y+1, r24	; 0x01
    20a8:	31 c0       	rjmp	.+98     	; 0x210c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20aa:	19 82       	std	Y+1, r1	; 0x01
    20ac:	2f c0       	rjmp	.+94     	; 0x210c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    20ae:	e3 e3       	ldi	r30, 0x33	; 51
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ba:	88 2f       	mov	r24, r24
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	a9 01       	movw	r20, r18
    20c0:	02 c0       	rjmp	.+4      	; 0x20c6 <GPIO_readPin+0xde>
    20c2:	55 95       	asr	r21
    20c4:	47 95       	ror	r20
    20c6:	8a 95       	dec	r24
    20c8:	e2 f7       	brpl	.-8      	; 0x20c2 <GPIO_readPin+0xda>
    20ca:	ca 01       	movw	r24, r20
    20cc:	81 70       	andi	r24, 0x01	; 1
    20ce:	90 70       	andi	r25, 0x00	; 0
    20d0:	88 23       	and	r24, r24
    20d2:	19 f0       	breq	.+6      	; 0x20da <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	89 83       	std	Y+1, r24	; 0x01
    20d8:	19 c0       	rjmp	.+50     	; 0x210c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20da:	19 82       	std	Y+1, r1	; 0x01
    20dc:	17 c0       	rjmp	.+46     	; 0x210c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    20de:	e0 e3       	ldi	r30, 0x30	; 48
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	28 2f       	mov	r18, r24
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	88 2f       	mov	r24, r24
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	a9 01       	movw	r20, r18
    20f0:	02 c0       	rjmp	.+4      	; 0x20f6 <GPIO_readPin+0x10e>
    20f2:	55 95       	asr	r21
    20f4:	47 95       	ror	r20
    20f6:	8a 95       	dec	r24
    20f8:	e2 f7       	brpl	.-8      	; 0x20f2 <GPIO_readPin+0x10a>
    20fa:	ca 01       	movw	r24, r20
    20fc:	81 70       	andi	r24, 0x01	; 1
    20fe:	90 70       	andi	r25, 0x00	; 0
    2100:	88 23       	and	r24, r24
    2102:	19 f0       	breq	.+6      	; 0x210a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	89 83       	std	Y+1, r24	; 0x01
    2108:	01 c0       	rjmp	.+2      	; 0x210c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    210a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    210c:	89 81       	ldd	r24, Y+1	; 0x01
}
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	cf 91       	pop	r28
    211a:	df 91       	pop	r29
    211c:	08 95       	ret

0000211e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    211e:	df 93       	push	r29
    2120:	cf 93       	push	r28
    2122:	00 d0       	rcall	.+0      	; 0x2124 <GPIO_setupPortDirection+0x6>
    2124:	00 d0       	rcall	.+0      	; 0x2126 <GPIO_setupPortDirection+0x8>
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	89 83       	std	Y+1, r24	; 0x01
    212c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	84 30       	cpi	r24, 0x04	; 4
    2132:	90 f5       	brcc	.+100    	; 0x2198 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2134:	89 81       	ldd	r24, Y+1	; 0x01
    2136:	28 2f       	mov	r18, r24
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	3c 83       	std	Y+4, r19	; 0x04
    213c:	2b 83       	std	Y+3, r18	; 0x03
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	9c 81       	ldd	r25, Y+4	; 0x04
    2142:	81 30       	cpi	r24, 0x01	; 1
    2144:	91 05       	cpc	r25, r1
    2146:	d1 f0       	breq	.+52     	; 0x217c <GPIO_setupPortDirection+0x5e>
    2148:	2b 81       	ldd	r18, Y+3	; 0x03
    214a:	3c 81       	ldd	r19, Y+4	; 0x04
    214c:	22 30       	cpi	r18, 0x02	; 2
    214e:	31 05       	cpc	r19, r1
    2150:	2c f4       	brge	.+10     	; 0x215c <GPIO_setupPortDirection+0x3e>
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	9c 81       	ldd	r25, Y+4	; 0x04
    2156:	00 97       	sbiw	r24, 0x00	; 0
    2158:	61 f0       	breq	.+24     	; 0x2172 <GPIO_setupPortDirection+0x54>
    215a:	1e c0       	rjmp	.+60     	; 0x2198 <GPIO_setupPortDirection+0x7a>
    215c:	2b 81       	ldd	r18, Y+3	; 0x03
    215e:	3c 81       	ldd	r19, Y+4	; 0x04
    2160:	22 30       	cpi	r18, 0x02	; 2
    2162:	31 05       	cpc	r19, r1
    2164:	81 f0       	breq	.+32     	; 0x2186 <GPIO_setupPortDirection+0x68>
    2166:	8b 81       	ldd	r24, Y+3	; 0x03
    2168:	9c 81       	ldd	r25, Y+4	; 0x04
    216a:	83 30       	cpi	r24, 0x03	; 3
    216c:	91 05       	cpc	r25, r1
    216e:	81 f0       	breq	.+32     	; 0x2190 <GPIO_setupPortDirection+0x72>
    2170:	13 c0       	rjmp	.+38     	; 0x2198 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2172:	ea e3       	ldi	r30, 0x3A	; 58
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	80 83       	st	Z, r24
    217a:	0e c0       	rjmp	.+28     	; 0x2198 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    217c:	e7 e3       	ldi	r30, 0x37	; 55
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
    2182:	80 83       	st	Z, r24
    2184:	09 c0       	rjmp	.+18     	; 0x2198 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2186:	e4 e3       	ldi	r30, 0x34	; 52
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	80 83       	st	Z, r24
    218e:	04 c0       	rjmp	.+8      	; 0x2198 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2190:	e1 e3       	ldi	r30, 0x31	; 49
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	8a 81       	ldd	r24, Y+2	; 0x02
    2196:	80 83       	st	Z, r24
			break;
		}
	}
}
    2198:	0f 90       	pop	r0
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	08 95       	ret

000021a6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	00 d0       	rcall	.+0      	; 0x21ac <GPIO_writePort+0x6>
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <GPIO_writePort+0x8>
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	89 83       	std	Y+1, r24	; 0x01
    21b4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	84 30       	cpi	r24, 0x04	; 4
    21ba:	90 f5       	brcc	.+100    	; 0x2220 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	28 2f       	mov	r18, r24
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	3c 83       	std	Y+4, r19	; 0x04
    21c4:	2b 83       	std	Y+3, r18	; 0x03
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ca:	81 30       	cpi	r24, 0x01	; 1
    21cc:	91 05       	cpc	r25, r1
    21ce:	d1 f0       	breq	.+52     	; 0x2204 <GPIO_writePort+0x5e>
    21d0:	2b 81       	ldd	r18, Y+3	; 0x03
    21d2:	3c 81       	ldd	r19, Y+4	; 0x04
    21d4:	22 30       	cpi	r18, 0x02	; 2
    21d6:	31 05       	cpc	r19, r1
    21d8:	2c f4       	brge	.+10     	; 0x21e4 <GPIO_writePort+0x3e>
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	9c 81       	ldd	r25, Y+4	; 0x04
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	61 f0       	breq	.+24     	; 0x21fa <GPIO_writePort+0x54>
    21e2:	1e c0       	rjmp	.+60     	; 0x2220 <GPIO_writePort+0x7a>
    21e4:	2b 81       	ldd	r18, Y+3	; 0x03
    21e6:	3c 81       	ldd	r19, Y+4	; 0x04
    21e8:	22 30       	cpi	r18, 0x02	; 2
    21ea:	31 05       	cpc	r19, r1
    21ec:	81 f0       	breq	.+32     	; 0x220e <GPIO_writePort+0x68>
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	9c 81       	ldd	r25, Y+4	; 0x04
    21f2:	83 30       	cpi	r24, 0x03	; 3
    21f4:	91 05       	cpc	r25, r1
    21f6:	81 f0       	breq	.+32     	; 0x2218 <GPIO_writePort+0x72>
    21f8:	13 c0       	rjmp	.+38     	; 0x2220 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    21fa:	eb e3       	ldi	r30, 0x3B	; 59
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2200:	80 83       	st	Z, r24
    2202:	0e c0       	rjmp	.+28     	; 0x2220 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2204:	e8 e3       	ldi	r30, 0x38	; 56
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	8a 81       	ldd	r24, Y+2	; 0x02
    220a:	80 83       	st	Z, r24
    220c:	09 c0       	rjmp	.+18     	; 0x2220 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    220e:	e5 e3       	ldi	r30, 0x35	; 53
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	8a 81       	ldd	r24, Y+2	; 0x02
    2214:	80 83       	st	Z, r24
    2216:	04 c0       	rjmp	.+8      	; 0x2220 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2218:	e2 e3       	ldi	r30, 0x32	; 50
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	8a 81       	ldd	r24, Y+2	; 0x02
    221e:	80 83       	st	Z, r24
			break;
		}
	}
}
    2220:	0f 90       	pop	r0
    2222:	0f 90       	pop	r0
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	08 95       	ret

0000222e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	00 d0       	rcall	.+0      	; 0x2234 <GPIO_readPort+0x6>
    2234:	00 d0       	rcall	.+0      	; 0x2236 <GPIO_readPort+0x8>
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    223a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    223c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    223e:	8a 81       	ldd	r24, Y+2	; 0x02
    2240:	84 30       	cpi	r24, 0x04	; 4
    2242:	90 f5       	brcc	.+100    	; 0x22a8 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2244:	8a 81       	ldd	r24, Y+2	; 0x02
    2246:	28 2f       	mov	r18, r24
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	3c 83       	std	Y+4, r19	; 0x04
    224c:	2b 83       	std	Y+3, r18	; 0x03
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	9c 81       	ldd	r25, Y+4	; 0x04
    2252:	81 30       	cpi	r24, 0x01	; 1
    2254:	91 05       	cpc	r25, r1
    2256:	d1 f0       	breq	.+52     	; 0x228c <GPIO_readPort+0x5e>
    2258:	2b 81       	ldd	r18, Y+3	; 0x03
    225a:	3c 81       	ldd	r19, Y+4	; 0x04
    225c:	22 30       	cpi	r18, 0x02	; 2
    225e:	31 05       	cpc	r19, r1
    2260:	2c f4       	brge	.+10     	; 0x226c <GPIO_readPort+0x3e>
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	9c 81       	ldd	r25, Y+4	; 0x04
    2266:	00 97       	sbiw	r24, 0x00	; 0
    2268:	61 f0       	breq	.+24     	; 0x2282 <GPIO_readPort+0x54>
    226a:	1e c0       	rjmp	.+60     	; 0x22a8 <GPIO_readPort+0x7a>
    226c:	2b 81       	ldd	r18, Y+3	; 0x03
    226e:	3c 81       	ldd	r19, Y+4	; 0x04
    2270:	22 30       	cpi	r18, 0x02	; 2
    2272:	31 05       	cpc	r19, r1
    2274:	81 f0       	breq	.+32     	; 0x2296 <GPIO_readPort+0x68>
    2276:	8b 81       	ldd	r24, Y+3	; 0x03
    2278:	9c 81       	ldd	r25, Y+4	; 0x04
    227a:	83 30       	cpi	r24, 0x03	; 3
    227c:	91 05       	cpc	r25, r1
    227e:	81 f0       	breq	.+32     	; 0x22a0 <GPIO_readPort+0x72>
    2280:	13 c0       	rjmp	.+38     	; 0x22a8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2282:	e9 e3       	ldi	r30, 0x39	; 57
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	80 81       	ld	r24, Z
    2288:	89 83       	std	Y+1, r24	; 0x01
    228a:	0e c0       	rjmp	.+28     	; 0x22a8 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    228c:	e6 e3       	ldi	r30, 0x36	; 54
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	89 83       	std	Y+1, r24	; 0x01
    2294:	09 c0       	rjmp	.+18     	; 0x22a8 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2296:	e3 e3       	ldi	r30, 0x33	; 51
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	89 83       	std	Y+1, r24	; 0x01
    229e:	04 c0       	rjmp	.+8      	; 0x22a8 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    22a0:	e0 e3       	ldi	r30, 0x30	; 48
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	cf 91       	pop	r28
    22b4:	df 91       	pop	r29
    22b6:	08 95       	ret

000022b8 <DcMotor_Init>:


TIMER_Configuration config={timer0,Fast_PWM_Mode,0,2000,F_cpu_8,255};

void DcMotor_Init()
{
    22b8:	df 93       	push	r29
    22ba:	cf 93       	push	r28
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
	/*
	 * setup the motor pin directions
	 */
	GPIO_setupPinDirection(MOTOR_PORT_ID,MOTOR_FIRST_PIN,PIN_OUTPUT); //set PB0 as output pin --> pin where direction will be controlled.
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	60 e0       	ldi	r22, 0x00	; 0
    22c4:	41 e0       	ldi	r20, 0x01	; 1
    22c6:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_ID,MOTOR_SECOND_PIN,PIN_OUTPUT); //set PB1 as output pin --> pin where direction will be controlled..
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	61 e0       	ldi	r22, 0x01	; 1
    22ce:	41 e0       	ldi	r20, 0x01	; 1
    22d0:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <GPIO_setupPinDirection>
	/*
	 * Stop the motor at the beginning
	 */
	GPIO_writePin(MOTOR_PORT_ID,MOTOR_FIRST_PIN,LOGIC_LOW);
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	60 e0       	ldi	r22, 0x00	; 0
    22d8:	40 e0       	ldi	r20, 0x00	; 0
    22da:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT_ID,MOTOR_SECOND_PIN,LOGIC_LOW);
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	61 e0       	ldi	r22, 0x01	; 1
    22e2:	40 e0       	ldi	r20, 0x00	; 0
    22e4:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <GPIO_writePin>

	TIMER_init(&config);
    22e8:	8a e6       	ldi	r24, 0x6A	; 106
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	0e 94 ed 12 	call	0x25da	; 0x25da <TIMER_init>
}
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	08 95       	ret

000022f6 <DcMotor_Rotate>:
void DcMotor_Rotate(DcMotor_State state)
{
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	00 d0       	rcall	.+0      	; 0x22fc <DcMotor_Rotate+0x6>
    22fc:	0f 92       	push	r0
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
    2302:	89 83       	std	Y+1, r24	; 0x01
	 * this switch case for controlling the motor state
	 *  stop: motor will stop
	 *  A_CW: motor will rotate anti clock wise
	 *  CW  : motor will rotate      clock wise
	 */
	switch (state)
    2304:	89 81       	ldd	r24, Y+1	; 0x01
    2306:	28 2f       	mov	r18, r24
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	3b 83       	std	Y+3, r19	; 0x03
    230c:	2a 83       	std	Y+2, r18	; 0x02
    230e:	8a 81       	ldd	r24, Y+2	; 0x02
    2310:	9b 81       	ldd	r25, Y+3	; 0x03
    2312:	81 30       	cpi	r24, 0x01	; 1
    2314:	91 05       	cpc	r25, r1
    2316:	a1 f0       	breq	.+40     	; 0x2340 <DcMotor_Rotate+0x4a>
    2318:	2a 81       	ldd	r18, Y+2	; 0x02
    231a:	3b 81       	ldd	r19, Y+3	; 0x03
    231c:	22 30       	cpi	r18, 0x02	; 2
    231e:	31 05       	cpc	r19, r1
    2320:	d1 f0       	breq	.+52     	; 0x2356 <DcMotor_Rotate+0x60>
    2322:	8a 81       	ldd	r24, Y+2	; 0x02
    2324:	9b 81       	ldd	r25, Y+3	; 0x03
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	01 f5       	brne	.+64     	; 0x236a <DcMotor_Rotate+0x74>
	{
	case stop:
		GPIO_writePin(MOTOR_PORT_ID,MOTOR_FIRST_PIN,LOGIC_LOW);
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	60 e0       	ldi	r22, 0x00	; 0
    232e:	40 e0       	ldi	r20, 0x00	; 0
    2330:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID,MOTOR_SECOND_PIN,LOGIC_LOW);
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	61 e0       	ldi	r22, 0x01	; 1
    2338:	40 e0       	ldi	r20, 0x00	; 0
    233a:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <GPIO_writePin>
    233e:	15 c0       	rjmp	.+42     	; 0x236a <DcMotor_Rotate+0x74>
		break;
	case A_CW:
		GPIO_writePin(MOTOR_PORT_ID,MOTOR_FIRST_PIN,LOGIC_LOW);
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	60 e0       	ldi	r22, 0x00	; 0
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID,MOTOR_SECOND_PIN,LOGIC_HIGH);
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	61 e0       	ldi	r22, 0x01	; 1
    234e:	41 e0       	ldi	r20, 0x01	; 1
    2350:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <GPIO_writePin>
    2354:	0a c0       	rjmp	.+20     	; 0x236a <DcMotor_Rotate+0x74>
		break;
	case CW:
		GPIO_writePin(MOTOR_PORT_ID,MOTOR_FIRST_PIN,LOGIC_HIGH);
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	60 e0       	ldi	r22, 0x00	; 0
    235a:	41 e0       	ldi	r20, 0x01	; 1
    235c:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID,MOTOR_SECOND_PIN,LOGIC_LOW);
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	61 e0       	ldi	r22, 0x01	; 1
    2364:	40 e0       	ldi	r20, 0x00	; 0
    2366:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <GPIO_writePin>
		break;
	}

}
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	0f 90       	pop	r0
    2370:	cf 91       	pop	r28
    2372:	df 91       	pop	r29
    2374:	08 95       	ret

00002376 <__vector_9>:
static volatile void (*g_callBackPtr_timer2)(void) = NULL_PTR;
/****************************************************************************
 *                             Timers ISRs                                   *
 ****************************************************************************/
ISR((TIMER0_OVF_vect))
{
    2376:	1f 92       	push	r1
    2378:	0f 92       	push	r0
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	0f 92       	push	r0
    237e:	11 24       	eor	r1, r1
    2380:	2f 93       	push	r18
    2382:	3f 93       	push	r19
    2384:	4f 93       	push	r20
    2386:	5f 93       	push	r21
    2388:	6f 93       	push	r22
    238a:	7f 93       	push	r23
    238c:	8f 93       	push	r24
    238e:	9f 93       	push	r25
    2390:	af 93       	push	r26
    2392:	bf 93       	push	r27
    2394:	ef 93       	push	r30
    2396:	ff 93       	push	r31
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0 != NULL_PTR)
    23a0:	80 91 a6 00 	lds	r24, 0x00A6
    23a4:	90 91 a7 00 	lds	r25, 0x00A7
    23a8:	00 97       	sbiw	r24, 0x00	; 0
    23aa:	29 f0       	breq	.+10     	; 0x23b6 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the over flow occur */
		(*g_callBackPtr_timer0)();
    23ac:	e0 91 a6 00 	lds	r30, 0x00A6
    23b0:	f0 91 a7 00 	lds	r31, 0x00A7
    23b4:	09 95       	icall
	}
}
    23b6:	cf 91       	pop	r28
    23b8:	df 91       	pop	r29
    23ba:	ff 91       	pop	r31
    23bc:	ef 91       	pop	r30
    23be:	bf 91       	pop	r27
    23c0:	af 91       	pop	r26
    23c2:	9f 91       	pop	r25
    23c4:	8f 91       	pop	r24
    23c6:	7f 91       	pop	r23
    23c8:	6f 91       	pop	r22
    23ca:	5f 91       	pop	r21
    23cc:	4f 91       	pop	r20
    23ce:	3f 91       	pop	r19
    23d0:	2f 91       	pop	r18
    23d2:	0f 90       	pop	r0
    23d4:	0f be       	out	0x3f, r0	; 63
    23d6:	0f 90       	pop	r0
    23d8:	1f 90       	pop	r1
    23da:	18 95       	reti

000023dc <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    23dc:	1f 92       	push	r1
    23de:	0f 92       	push	r0
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	0f 92       	push	r0
    23e4:	11 24       	eor	r1, r1
    23e6:	2f 93       	push	r18
    23e8:	3f 93       	push	r19
    23ea:	4f 93       	push	r20
    23ec:	5f 93       	push	r21
    23ee:	6f 93       	push	r22
    23f0:	7f 93       	push	r23
    23f2:	8f 93       	push	r24
    23f4:	9f 93       	push	r25
    23f6:	af 93       	push	r26
    23f8:	bf 93       	push	r27
    23fa:	ef 93       	push	r30
    23fc:	ff 93       	push	r31
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0 != NULL_PTR)
    2406:	80 91 a6 00 	lds	r24, 0x00A6
    240a:	90 91 a7 00 	lds	r25, 0x00A7
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	29 f0       	breq	.+10     	; 0x241c <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the compare match occur */
		(*g_callBackPtr_timer0)();
    2412:	e0 91 a6 00 	lds	r30, 0x00A6
    2416:	f0 91 a7 00 	lds	r31, 0x00A7
    241a:	09 95       	icall
	}
}
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	ff 91       	pop	r31
    2422:	ef 91       	pop	r30
    2424:	bf 91       	pop	r27
    2426:	af 91       	pop	r26
    2428:	9f 91       	pop	r25
    242a:	8f 91       	pop	r24
    242c:	7f 91       	pop	r23
    242e:	6f 91       	pop	r22
    2430:	5f 91       	pop	r21
    2432:	4f 91       	pop	r20
    2434:	3f 91       	pop	r19
    2436:	2f 91       	pop	r18
    2438:	0f 90       	pop	r0
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	0f 90       	pop	r0
    243e:	1f 90       	pop	r1
    2440:	18 95       	reti

00002442 <__vector_8>:
ISR(TIMER1_OVF_vect)
{
    2442:	1f 92       	push	r1
    2444:	0f 92       	push	r0
    2446:	0f b6       	in	r0, 0x3f	; 63
    2448:	0f 92       	push	r0
    244a:	11 24       	eor	r1, r1
    244c:	2f 93       	push	r18
    244e:	3f 93       	push	r19
    2450:	4f 93       	push	r20
    2452:	5f 93       	push	r21
    2454:	6f 93       	push	r22
    2456:	7f 93       	push	r23
    2458:	8f 93       	push	r24
    245a:	9f 93       	push	r25
    245c:	af 93       	push	r26
    245e:	bf 93       	push	r27
    2460:	ef 93       	push	r30
    2462:	ff 93       	push	r31
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1 != NULL_PTR)
    246c:	80 91 a8 00 	lds	r24, 0x00A8
    2470:	90 91 a9 00 	lds	r25, 0x00A9
    2474:	00 97       	sbiw	r24, 0x00	; 0
    2476:	29 f0       	breq	.+10     	; 0x2482 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the over flow occur */
		(*g_callBackPtr_timer1)();
    2478:	e0 91 a8 00 	lds	r30, 0x00A8
    247c:	f0 91 a9 00 	lds	r31, 0x00A9
    2480:	09 95       	icall
	}
}
    2482:	cf 91       	pop	r28
    2484:	df 91       	pop	r29
    2486:	ff 91       	pop	r31
    2488:	ef 91       	pop	r30
    248a:	bf 91       	pop	r27
    248c:	af 91       	pop	r26
    248e:	9f 91       	pop	r25
    2490:	8f 91       	pop	r24
    2492:	7f 91       	pop	r23
    2494:	6f 91       	pop	r22
    2496:	5f 91       	pop	r21
    2498:	4f 91       	pop	r20
    249a:	3f 91       	pop	r19
    249c:	2f 91       	pop	r18
    249e:	0f 90       	pop	r0
    24a0:	0f be       	out	0x3f, r0	; 63
    24a2:	0f 90       	pop	r0
    24a4:	1f 90       	pop	r1
    24a6:	18 95       	reti

000024a8 <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    24a8:	1f 92       	push	r1
    24aa:	0f 92       	push	r0
    24ac:	0f b6       	in	r0, 0x3f	; 63
    24ae:	0f 92       	push	r0
    24b0:	11 24       	eor	r1, r1
    24b2:	2f 93       	push	r18
    24b4:	3f 93       	push	r19
    24b6:	4f 93       	push	r20
    24b8:	5f 93       	push	r21
    24ba:	6f 93       	push	r22
    24bc:	7f 93       	push	r23
    24be:	8f 93       	push	r24
    24c0:	9f 93       	push	r25
    24c2:	af 93       	push	r26
    24c4:	bf 93       	push	r27
    24c6:	ef 93       	push	r30
    24c8:	ff 93       	push	r31
    24ca:	df 93       	push	r29
    24cc:	cf 93       	push	r28
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1 != NULL_PTR)
    24d2:	80 91 a8 00 	lds	r24, 0x00A8
    24d6:	90 91 a9 00 	lds	r25, 0x00A9
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	29 f0       	breq	.+10     	; 0x24e8 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the compare match occur */
		(*g_callBackPtr_timer1)();
    24de:	e0 91 a8 00 	lds	r30, 0x00A8
    24e2:	f0 91 a9 00 	lds	r31, 0x00A9
    24e6:	09 95       	icall
	}
}
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	ff 91       	pop	r31
    24ee:	ef 91       	pop	r30
    24f0:	bf 91       	pop	r27
    24f2:	af 91       	pop	r26
    24f4:	9f 91       	pop	r25
    24f6:	8f 91       	pop	r24
    24f8:	7f 91       	pop	r23
    24fa:	6f 91       	pop	r22
    24fc:	5f 91       	pop	r21
    24fe:	4f 91       	pop	r20
    2500:	3f 91       	pop	r19
    2502:	2f 91       	pop	r18
    2504:	0f 90       	pop	r0
    2506:	0f be       	out	0x3f, r0	; 63
    2508:	0f 90       	pop	r0
    250a:	1f 90       	pop	r1
    250c:	18 95       	reti

0000250e <__vector_4>:
ISR((TIMER2_OVF_vect))
{
    250e:	1f 92       	push	r1
    2510:	0f 92       	push	r0
    2512:	0f b6       	in	r0, 0x3f	; 63
    2514:	0f 92       	push	r0
    2516:	11 24       	eor	r1, r1
    2518:	2f 93       	push	r18
    251a:	3f 93       	push	r19
    251c:	4f 93       	push	r20
    251e:	5f 93       	push	r21
    2520:	6f 93       	push	r22
    2522:	7f 93       	push	r23
    2524:	8f 93       	push	r24
    2526:	9f 93       	push	r25
    2528:	af 93       	push	r26
    252a:	bf 93       	push	r27
    252c:	ef 93       	push	r30
    252e:	ff 93       	push	r31
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2 != NULL_PTR)
    2538:	80 91 aa 00 	lds	r24, 0x00AA
    253c:	90 91 ab 00 	lds	r25, 0x00AB
    2540:	00 97       	sbiw	r24, 0x00	; 0
    2542:	29 f0       	breq	.+10     	; 0x254e <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the over flow occur */
		(*g_callBackPtr_timer2)();
    2544:	e0 91 aa 00 	lds	r30, 0x00AA
    2548:	f0 91 ab 00 	lds	r31, 0x00AB
    254c:	09 95       	icall
	}
}
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	ff 91       	pop	r31
    2554:	ef 91       	pop	r30
    2556:	bf 91       	pop	r27
    2558:	af 91       	pop	r26
    255a:	9f 91       	pop	r25
    255c:	8f 91       	pop	r24
    255e:	7f 91       	pop	r23
    2560:	6f 91       	pop	r22
    2562:	5f 91       	pop	r21
    2564:	4f 91       	pop	r20
    2566:	3f 91       	pop	r19
    2568:	2f 91       	pop	r18
    256a:	0f 90       	pop	r0
    256c:	0f be       	out	0x3f, r0	; 63
    256e:	0f 90       	pop	r0
    2570:	1f 90       	pop	r1
    2572:	18 95       	reti

00002574 <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    2574:	1f 92       	push	r1
    2576:	0f 92       	push	r0
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	0f 92       	push	r0
    257c:	11 24       	eor	r1, r1
    257e:	2f 93       	push	r18
    2580:	3f 93       	push	r19
    2582:	4f 93       	push	r20
    2584:	5f 93       	push	r21
    2586:	6f 93       	push	r22
    2588:	7f 93       	push	r23
    258a:	8f 93       	push	r24
    258c:	9f 93       	push	r25
    258e:	af 93       	push	r26
    2590:	bf 93       	push	r27
    2592:	ef 93       	push	r30
    2594:	ff 93       	push	r31
    2596:	df 93       	push	r29
    2598:	cf 93       	push	r28
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2 != NULL_PTR)
    259e:	80 91 aa 00 	lds	r24, 0x00AA
    25a2:	90 91 ab 00 	lds	r25, 0x00AB
    25a6:	00 97       	sbiw	r24, 0x00	; 0
    25a8:	29 f0       	breq	.+10     	; 0x25b4 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the compare match occur */
		(*g_callBackPtr_timer2)();
    25aa:	e0 91 aa 00 	lds	r30, 0x00AA
    25ae:	f0 91 ab 00 	lds	r31, 0x00AB
    25b2:	09 95       	icall
	}
}
    25b4:	cf 91       	pop	r28
    25b6:	df 91       	pop	r29
    25b8:	ff 91       	pop	r31
    25ba:	ef 91       	pop	r30
    25bc:	bf 91       	pop	r27
    25be:	af 91       	pop	r26
    25c0:	9f 91       	pop	r25
    25c2:	8f 91       	pop	r24
    25c4:	7f 91       	pop	r23
    25c6:	6f 91       	pop	r22
    25c8:	5f 91       	pop	r21
    25ca:	4f 91       	pop	r20
    25cc:	3f 91       	pop	r19
    25ce:	2f 91       	pop	r18
    25d0:	0f 90       	pop	r0
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	0f 90       	pop	r0
    25d6:	1f 90       	pop	r1
    25d8:	18 95       	reti

000025da <TIMER_init>:

/****************************************************************************
 *                             Timers Functions                                   *
 ****************************************************************************/
void  TIMER_init(TIMER_Configuration * Configuration)
{
    25da:	df 93       	push	r29
    25dc:	cf 93       	push	r28
    25de:	00 d0       	rcall	.+0      	; 0x25e0 <TIMER_init+0x6>
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
    25e4:	9a 83       	std	Y+2, r25	; 0x02
    25e6:	89 83       	std	Y+1, r24	; 0x01
	/*Check which timer of the three timers in AVR MC*/

	/*Timer0*/
	if(Configuration->id == 0)
    25e8:	e9 81       	ldd	r30, Y+1	; 0x01
    25ea:	fa 81       	ldd	r31, Y+2	; 0x02
    25ec:	80 81       	ld	r24, Z
    25ee:	88 23       	and	r24, r24
    25f0:	09 f0       	breq	.+2      	; 0x25f4 <TIMER_init+0x1a>
    25f2:	82 c0       	rjmp	.+260    	; 0x26f8 <TIMER_init+0x11e>
	{
		/*Check which mode of the three modes in timer*/
		if((Configuration->mode) == Normal_Mode)
    25f4:	e9 81       	ldd	r30, Y+1	; 0x01
    25f6:	fa 81       	ldd	r31, Y+2	; 0x02
    25f8:	81 81       	ldd	r24, Z+1	; 0x01
    25fa:	88 23       	and	r24, r24
    25fc:	11 f5       	brne	.+68     	; 0x2642 <TIMER_init+0x68>
		{
			/*initialize timer*/
			TCNT0=Configuration->initial_value;
    25fe:	a2 e5       	ldi	r26, 0x52	; 82
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	e9 81       	ldd	r30, Y+1	; 0x01
    2604:	fa 81       	ldd	r31, Y+2	; 0x02
    2606:	82 81       	ldd	r24, Z+2	; 0x02
    2608:	8c 93       	st	X, r24
			/*enable interrupt*/
			TIMSK |= (1<<TOIE0);
    260a:	a9 e5       	ldi	r26, 0x59	; 89
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	e9 e5       	ldi	r30, 0x59	; 89
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	81 60       	ori	r24, 0x01	; 1
    2616:	8c 93       	st	X, r24
			/*Non-PWM*/
			TCCR0 |= (1<<FOC0);
    2618:	a3 e5       	ldi	r26, 0x53	; 83
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	e3 e5       	ldi	r30, 0x53	; 83
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	80 81       	ld	r24, Z
    2622:	80 68       	ori	r24, 0x80	; 128
    2624:	8c 93       	st	X, r24
			/*inserting prescaler value in 3 LSB (CS02,CS01,CS00) */
			TCCR0 = (TCCR0 & 0xF8) | (Configuration->Freq_prescaler & 0x07);
    2626:	a3 e5       	ldi	r26, 0x53	; 83
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	e3 e5       	ldi	r30, 0x53	; 83
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	98 2f       	mov	r25, r24
    2632:	98 7f       	andi	r25, 0xF8	; 248
    2634:	e9 81       	ldd	r30, Y+1	; 0x01
    2636:	fa 81       	ldd	r31, Y+2	; 0x02
    2638:	85 81       	ldd	r24, Z+5	; 0x05
    263a:	87 70       	andi	r24, 0x07	; 7
    263c:	89 2b       	or	r24, r25
    263e:	8c 93       	st	X, r24
    2640:	84 c1       	rjmp	.+776    	; 0x294a <TIMER_init+0x370>
		}
		else if((Configuration->mode) == CMP_Mode)
    2642:	e9 81       	ldd	r30, Y+1	; 0x01
    2644:	fa 81       	ldd	r31, Y+2	; 0x02
    2646:	81 81       	ldd	r24, Z+1	; 0x01
    2648:	81 30       	cpi	r24, 0x01	; 1
    264a:	49 f5       	brne	.+82     	; 0x269e <TIMER_init+0xc4>
		{
			/*initialize timer*/
			TCNT0=Configuration->initial_value;
    264c:	a2 e5       	ldi	r26, 0x52	; 82
    264e:	b0 e0       	ldi	r27, 0x00	; 0
    2650:	e9 81       	ldd	r30, Y+1	; 0x01
    2652:	fa 81       	ldd	r31, Y+2	; 0x02
    2654:	82 81       	ldd	r24, Z+2	; 0x02
    2656:	8c 93       	st	X, r24
			/*set compare value for compare mode*/
			OCR0=Configuration->cmp_value;
    2658:	ac e5       	ldi	r26, 0x5C	; 92
    265a:	b0 e0       	ldi	r27, 0x00	; 0
    265c:	e9 81       	ldd	r30, Y+1	; 0x01
    265e:	fa 81       	ldd	r31, Y+2	; 0x02
    2660:	83 81       	ldd	r24, Z+3	; 0x03
    2662:	94 81       	ldd	r25, Z+4	; 0x04
    2664:	8c 93       	st	X, r24
			/*activate Non-PWM,CTC mode*/
			TCCR0 |= (1<<FOC0) | (1<<WGM01);
    2666:	a3 e5       	ldi	r26, 0x53	; 83
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	e3 e5       	ldi	r30, 0x53	; 83
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	80 81       	ld	r24, Z
    2670:	88 68       	ori	r24, 0x88	; 136
    2672:	8c 93       	st	X, r24
			/*inserting prescaler value in 3 LSB (CS02,CS01,CS00) */
			TCCR0 = (TCCR0 & 0xF8) | (Configuration->Freq_prescaler & 0x07);
    2674:	a3 e5       	ldi	r26, 0x53	; 83
    2676:	b0 e0       	ldi	r27, 0x00	; 0
    2678:	e3 e5       	ldi	r30, 0x53	; 83
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	80 81       	ld	r24, Z
    267e:	98 2f       	mov	r25, r24
    2680:	98 7f       	andi	r25, 0xF8	; 248
    2682:	e9 81       	ldd	r30, Y+1	; 0x01
    2684:	fa 81       	ldd	r31, Y+2	; 0x02
    2686:	85 81       	ldd	r24, Z+5	; 0x05
    2688:	87 70       	andi	r24, 0x07	; 7
    268a:	89 2b       	or	r24, r25
    268c:	8c 93       	st	X, r24
			/*enable interrupt*/
			TIMSK |= (1<<OCIE0);
    268e:	a9 e5       	ldi	r26, 0x59	; 89
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	e9 e5       	ldi	r30, 0x59	; 89
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	82 60       	ori	r24, 0x02	; 2
    269a:	8c 93       	st	X, r24
    269c:	56 c1       	rjmp	.+684    	; 0x294a <TIMER_init+0x370>
		}
		else if((Configuration->mode) == Fast_PWM_Mode)
    269e:	e9 81       	ldd	r30, Y+1	; 0x01
    26a0:	fa 81       	ldd	r31, Y+2	; 0x02
    26a2:	81 81       	ldd	r24, Z+1	; 0x01
    26a4:	82 30       	cpi	r24, 0x02	; 2
    26a6:	09 f0       	breq	.+2      	; 0x26aa <TIMER_init+0xd0>
    26a8:	50 c1       	rjmp	.+672    	; 0x294a <TIMER_init+0x370>
		{
			/*initialize timer*/
			TCNT0=Configuration->initial_value;
    26aa:	a2 e5       	ldi	r26, 0x52	; 82
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	e9 81       	ldd	r30, Y+1	; 0x01
    26b0:	fa 81       	ldd	r31, Y+2	; 0x02
    26b2:	82 81       	ldd	r24, Z+2	; 0x02
    26b4:	8c 93       	st	X, r24
			/*set PB3 output pin to get the output pulses*/
			GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	63 e0       	ldi	r22, 0x03	; 3
    26ba:	41 e0       	ldi	r20, 0x01	; 1
    26bc:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <GPIO_setupPinDirection>
			/*set compare value in PWM mode*/
			OCR0= Configuration->set_duty;
    26c0:	ac e5       	ldi	r26, 0x5C	; 92
    26c2:	b0 e0       	ldi	r27, 0x00	; 0
    26c4:	e9 81       	ldd	r30, Y+1	; 0x01
    26c6:	fa 81       	ldd	r31, Y+2	; 0x02
    26c8:	86 81       	ldd	r24, Z+6	; 0x06
    26ca:	97 81       	ldd	r25, Z+7	; 0x07
    26cc:	8c 93       	st	X, r24
			/*activate Fast_PWM mode and clear OC0 on compare match*/
			TCCR0 |= (1<<WGM01) | (1<<WGM00) | (1<<COM01);
    26ce:	a3 e5       	ldi	r26, 0x53	; 83
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	e3 e5       	ldi	r30, 0x53	; 83
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	88 66       	ori	r24, 0x68	; 104
    26da:	8c 93       	st	X, r24
			/*inserting prescaler value in 3 LSB (CS02,CS01,CS00) */
			TCCR0 = (TCCR0 & 0xF8) | (Configuration->Freq_prescaler & 0x07);
    26dc:	a3 e5       	ldi	r26, 0x53	; 83
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	e3 e5       	ldi	r30, 0x53	; 83
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	98 2f       	mov	r25, r24
    26e8:	98 7f       	andi	r25, 0xF8	; 248
    26ea:	e9 81       	ldd	r30, Y+1	; 0x01
    26ec:	fa 81       	ldd	r31, Y+2	; 0x02
    26ee:	85 81       	ldd	r24, Z+5	; 0x05
    26f0:	87 70       	andi	r24, 0x07	; 7
    26f2:	89 2b       	or	r24, r25
    26f4:	8c 93       	st	X, r24
    26f6:	29 c1       	rjmp	.+594    	; 0x294a <TIMER_init+0x370>
		}
	}

	/*Timer1*/
	else if(Configuration->id == 1)
    26f8:	e9 81       	ldd	r30, Y+1	; 0x01
    26fa:	fa 81       	ldd	r31, Y+2	; 0x02
    26fc:	80 81       	ld	r24, Z
    26fe:	81 30       	cpi	r24, 0x01	; 1
    2700:	09 f0       	breq	.+2      	; 0x2704 <TIMER_init+0x12a>
    2702:	9d c0       	rjmp	.+314    	; 0x283e <TIMER_init+0x264>
	{
		/*Check which mode of the three modes in timer*/
		if((Configuration->mode) == Normal_Mode)
    2704:	e9 81       	ldd	r30, Y+1	; 0x01
    2706:	fa 81       	ldd	r31, Y+2	; 0x02
    2708:	81 81       	ldd	r24, Z+1	; 0x01
    270a:	88 23       	and	r24, r24
    270c:	31 f5       	brne	.+76     	; 0x275a <TIMER_init+0x180>
		{
			/*initialize timer*/
			TCNT1=Configuration->initial_value;
    270e:	ac e4       	ldi	r26, 0x4C	; 76
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	e9 81       	ldd	r30, Y+1	; 0x01
    2714:	fa 81       	ldd	r31, Y+2	; 0x02
    2716:	82 81       	ldd	r24, Z+2	; 0x02
    2718:	88 2f       	mov	r24, r24
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	11 96       	adiw	r26, 0x01	; 1
    271e:	9c 93       	st	X, r25
    2720:	8e 93       	st	-X, r24
			/*enable interrupt*/
			TIMSK |= (1<<TOIE1);
    2722:	a9 e5       	ldi	r26, 0x59	; 89
    2724:	b0 e0       	ldi	r27, 0x00	; 0
    2726:	e9 e5       	ldi	r30, 0x59	; 89
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	80 81       	ld	r24, Z
    272c:	84 60       	ori	r24, 0x04	; 4
    272e:	8c 93       	st	X, r24
			/*Non-PWM for channel A and channel B*/
			TCCR1A |= (1<<FOC1A);
    2730:	af e4       	ldi	r26, 0x4F	; 79
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	ef e4       	ldi	r30, 0x4F	; 79
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	88 60       	ori	r24, 0x08	; 8
    273c:	8c 93       	st	X, r24
			/*activate normal mode by default values 0*/
			/*inserting prescaler value in 3 LSB (CS02,CS01,CS00) */
			TCCR1B = (TCCR1B & 0xF8) | (Configuration->Freq_prescaler & 0x07);
    273e:	ae e4       	ldi	r26, 0x4E	; 78
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	ee e4       	ldi	r30, 0x4E	; 78
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	98 2f       	mov	r25, r24
    274a:	98 7f       	andi	r25, 0xF8	; 248
    274c:	e9 81       	ldd	r30, Y+1	; 0x01
    274e:	fa 81       	ldd	r31, Y+2	; 0x02
    2750:	85 81       	ldd	r24, Z+5	; 0x05
    2752:	87 70       	andi	r24, 0x07	; 7
    2754:	89 2b       	or	r24, r25
    2756:	8c 93       	st	X, r24
    2758:	f8 c0       	rjmp	.+496    	; 0x294a <TIMER_init+0x370>
		}
		else if((Configuration->mode) == CMP_Mode)
    275a:	e9 81       	ldd	r30, Y+1	; 0x01
    275c:	fa 81       	ldd	r31, Y+2	; 0x02
    275e:	81 81       	ldd	r24, Z+1	; 0x01
    2760:	81 30       	cpi	r24, 0x01	; 1
    2762:	99 f5       	brne	.+102    	; 0x27ca <TIMER_init+0x1f0>
		{
			/*initialize timer*/
			TCNT1=Configuration->initial_value;
    2764:	ac e4       	ldi	r26, 0x4C	; 76
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	e9 81       	ldd	r30, Y+1	; 0x01
    276a:	fa 81       	ldd	r31, Y+2	; 0x02
    276c:	82 81       	ldd	r24, Z+2	; 0x02
    276e:	88 2f       	mov	r24, r24
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	11 96       	adiw	r26, 0x01	; 1
    2774:	9c 93       	st	X, r25
    2776:	8e 93       	st	-X, r24
			/*set compare value in compare mode*/
			OCR1A= Configuration->cmp_value;
    2778:	aa e4       	ldi	r26, 0x4A	; 74
    277a:	b0 e0       	ldi	r27, 0x00	; 0
    277c:	e9 81       	ldd	r30, Y+1	; 0x01
    277e:	fa 81       	ldd	r31, Y+2	; 0x02
    2780:	83 81       	ldd	r24, Z+3	; 0x03
    2782:	94 81       	ldd	r25, Z+4	; 0x04
    2784:	11 96       	adiw	r26, 0x01	; 1
    2786:	9c 93       	st	X, r25
    2788:	8e 93       	st	-X, r24
			/*Non-PWM for channel A and channel B*/
			TCCR1A |= (1<<FOC1A);
    278a:	af e4       	ldi	r26, 0x4F	; 79
    278c:	b0 e0       	ldi	r27, 0x00	; 0
    278e:	ef e4       	ldi	r30, 0x4F	; 79
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	88 60       	ori	r24, 0x08	; 8
    2796:	8c 93       	st	X, r24
			/*activate CTC mode*/
			TCCR1B = (1<<WGM12);
    2798:	ee e4       	ldi	r30, 0x4E	; 78
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	88 e0       	ldi	r24, 0x08	; 8
    279e:	80 83       	st	Z, r24
			/*inserting prescaler value in 3 LSB (CS02,CS01,CS00) */
			TCCR1B = (TCCR1B & 0xF8) | (Configuration->Freq_prescaler & 0x07);
    27a0:	ae e4       	ldi	r26, 0x4E	; 78
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	ee e4       	ldi	r30, 0x4E	; 78
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	98 2f       	mov	r25, r24
    27ac:	98 7f       	andi	r25, 0xF8	; 248
    27ae:	e9 81       	ldd	r30, Y+1	; 0x01
    27b0:	fa 81       	ldd	r31, Y+2	; 0x02
    27b2:	85 81       	ldd	r24, Z+5	; 0x05
    27b4:	87 70       	andi	r24, 0x07	; 7
    27b6:	89 2b       	or	r24, r25
    27b8:	8c 93       	st	X, r24
			/*enable interrupt*/
			TIMSK |= (1<<OCIE1A);
    27ba:	a9 e5       	ldi	r26, 0x59	; 89
    27bc:	b0 e0       	ldi	r27, 0x00	; 0
    27be:	e9 e5       	ldi	r30, 0x59	; 89
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	80 81       	ld	r24, Z
    27c4:	80 61       	ori	r24, 0x10	; 16
    27c6:	8c 93       	st	X, r24
    27c8:	c0 c0       	rjmp	.+384    	; 0x294a <TIMER_init+0x370>
		}
		else if((Configuration->mode) == Fast_PWM_Mode)
    27ca:	e9 81       	ldd	r30, Y+1	; 0x01
    27cc:	fa 81       	ldd	r31, Y+2	; 0x02
    27ce:	81 81       	ldd	r24, Z+1	; 0x01
    27d0:	82 30       	cpi	r24, 0x02	; 2
    27d2:	09 f0       	breq	.+2      	; 0x27d6 <TIMER_init+0x1fc>
    27d4:	ba c0       	rjmp	.+372    	; 0x294a <TIMER_init+0x370>
		{
			/*initialize timer*/
			TCNT1=Configuration->initial_value;
    27d6:	ac e4       	ldi	r26, 0x4C	; 76
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	e9 81       	ldd	r30, Y+1	; 0x01
    27dc:	fa 81       	ldd	r31, Y+2	; 0x02
    27de:	82 81       	ldd	r24, Z+2	; 0x02
    27e0:	88 2f       	mov	r24, r24
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	11 96       	adiw	r26, 0x01	; 1
    27e6:	9c 93       	st	X, r25
    27e8:	8e 93       	st	-X, r24
			/*set PD5 output pin to get the output pulses*/
			GPIO_setupPinDirection(PORTD_ID,PIN5_ID,PIN_OUTPUT);
    27ea:	83 e0       	ldi	r24, 0x03	; 3
    27ec:	65 e0       	ldi	r22, 0x05	; 5
    27ee:	41 e0       	ldi	r20, 0x01	; 1
    27f0:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <GPIO_setupPinDirection>
			/*set compare value in PWM mode*/
			OCR1A= Configuration->set_duty;
    27f4:	aa e4       	ldi	r26, 0x4A	; 74
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	e9 81       	ldd	r30, Y+1	; 0x01
    27fa:	fa 81       	ldd	r31, Y+2	; 0x02
    27fc:	86 81       	ldd	r24, Z+6	; 0x06
    27fe:	97 81       	ldd	r25, Z+7	; 0x07
    2800:	11 96       	adiw	r26, 0x01	; 1
    2802:	9c 93       	st	X, r25
    2804:	8e 93       	st	-X, r24
			/*activate Fast PWM mode with OC1A output pulses*/
			TCCR1A |= (1 <<  WGM11) | (1 <<  WGM10) ; /*Register TCCR1A*/
    2806:	af e4       	ldi	r26, 0x4F	; 79
    2808:	b0 e0       	ldi	r27, 0x00	; 0
    280a:	ef e4       	ldi	r30, 0x4F	; 79
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	80 81       	ld	r24, Z
    2810:	83 60       	ori	r24, 0x03	; 3
    2812:	8c 93       	st	X, r24
			TCCR1B |= (1 <<  WGM13) | (1 <<  WGM12) ; /*Register TCCR1B*/
    2814:	ae e4       	ldi	r26, 0x4E	; 78
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	ee e4       	ldi	r30, 0x4E	; 78
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	80 81       	ld	r24, Z
    281e:	88 61       	ori	r24, 0x18	; 24
    2820:	8c 93       	st	X, r24
			/*inserting prescaler value in 3 LSB (CS02,CS01,CS00) */
			TCCR1B = (TCCR1B & 0xF8) | (Configuration->Freq_prescaler & 0x07);
    2822:	ae e4       	ldi	r26, 0x4E	; 78
    2824:	b0 e0       	ldi	r27, 0x00	; 0
    2826:	ee e4       	ldi	r30, 0x4E	; 78
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	98 2f       	mov	r25, r24
    282e:	98 7f       	andi	r25, 0xF8	; 248
    2830:	e9 81       	ldd	r30, Y+1	; 0x01
    2832:	fa 81       	ldd	r31, Y+2	; 0x02
    2834:	85 81       	ldd	r24, Z+5	; 0x05
    2836:	87 70       	andi	r24, 0x07	; 7
    2838:	89 2b       	or	r24, r25
    283a:	8c 93       	st	X, r24
    283c:	86 c0       	rjmp	.+268    	; 0x294a <TIMER_init+0x370>
		}
	}

	/*Timer2*/
	else if(Configuration->id == 2)
    283e:	e9 81       	ldd	r30, Y+1	; 0x01
    2840:	fa 81       	ldd	r31, Y+2	; 0x02
    2842:	80 81       	ld	r24, Z
    2844:	82 30       	cpi	r24, 0x02	; 2
    2846:	09 f0       	breq	.+2      	; 0x284a <TIMER_init+0x270>
    2848:	80 c0       	rjmp	.+256    	; 0x294a <TIMER_init+0x370>
	{
		/*Check which mode of the three modes in timer*/
		if((Configuration->mode) == Normal_Mode)
    284a:	e9 81       	ldd	r30, Y+1	; 0x01
    284c:	fa 81       	ldd	r31, Y+2	; 0x02
    284e:	81 81       	ldd	r24, Z+1	; 0x01
    2850:	88 23       	and	r24, r24
    2852:	11 f5       	brne	.+68     	; 0x2898 <TIMER_init+0x2be>
		{
			/*initialize timer*/
			TCNT2=Configuration->initial_value;
    2854:	a4 e4       	ldi	r26, 0x44	; 68
    2856:	b0 e0       	ldi	r27, 0x00	; 0
    2858:	e9 81       	ldd	r30, Y+1	; 0x01
    285a:	fa 81       	ldd	r31, Y+2	; 0x02
    285c:	82 81       	ldd	r24, Z+2	; 0x02
    285e:	8c 93       	st	X, r24
			/*Non-PWM*/
			TCCR2 |= (1<<FOC2);
    2860:	a5 e4       	ldi	r26, 0x45	; 69
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	e5 e4       	ldi	r30, 0x45	; 69
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	80 68       	ori	r24, 0x80	; 128
    286c:	8c 93       	st	X, r24
			/*inserting prescaler value in 3 LSB (CS22,CS21,CS20) */
			TCCR2 = (TCCR2 & 0xF8) | (Configuration->Freq_prescaler & 0x07);
    286e:	a5 e4       	ldi	r26, 0x45	; 69
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	e5 e4       	ldi	r30, 0x45	; 69
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	98 2f       	mov	r25, r24
    287a:	98 7f       	andi	r25, 0xF8	; 248
    287c:	e9 81       	ldd	r30, Y+1	; 0x01
    287e:	fa 81       	ldd	r31, Y+2	; 0x02
    2880:	85 81       	ldd	r24, Z+5	; 0x05
    2882:	87 70       	andi	r24, 0x07	; 7
    2884:	89 2b       	or	r24, r25
    2886:	8c 93       	st	X, r24
			/*enable interrupt*/
			TIMSK |= (1<<TOIE2);
    2888:	a9 e5       	ldi	r26, 0x59	; 89
    288a:	b0 e0       	ldi	r27, 0x00	; 0
    288c:	e9 e5       	ldi	r30, 0x59	; 89
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	80 81       	ld	r24, Z
    2892:	80 64       	ori	r24, 0x40	; 64
    2894:	8c 93       	st	X, r24
    2896:	59 c0       	rjmp	.+178    	; 0x294a <TIMER_init+0x370>
		}
		else if((Configuration->mode) == CMP_Mode)
    2898:	e9 81       	ldd	r30, Y+1	; 0x01
    289a:	fa 81       	ldd	r31, Y+2	; 0x02
    289c:	81 81       	ldd	r24, Z+1	; 0x01
    289e:	81 30       	cpi	r24, 0x01	; 1
    28a0:	49 f5       	brne	.+82     	; 0x28f4 <TIMER_init+0x31a>
		{
			/*initialize timer*/
			TCNT2=Configuration->initial_value;
    28a2:	a4 e4       	ldi	r26, 0x44	; 68
    28a4:	b0 e0       	ldi	r27, 0x00	; 0
    28a6:	e9 81       	ldd	r30, Y+1	; 0x01
    28a8:	fa 81       	ldd	r31, Y+2	; 0x02
    28aa:	82 81       	ldd	r24, Z+2	; 0x02
    28ac:	8c 93       	st	X, r24
			/*set compare value for compare mode*/
			OCR2=Configuration->cmp_value;
    28ae:	a3 e4       	ldi	r26, 0x43	; 67
    28b0:	b0 e0       	ldi	r27, 0x00	; 0
    28b2:	e9 81       	ldd	r30, Y+1	; 0x01
    28b4:	fa 81       	ldd	r31, Y+2	; 0x02
    28b6:	83 81       	ldd	r24, Z+3	; 0x03
    28b8:	94 81       	ldd	r25, Z+4	; 0x04
    28ba:	8c 93       	st	X, r24
			/*activate Non-PWM,CTC mode*/
			TCCR2 |= (1<<FOC2) | (1<<WGM21);
    28bc:	a5 e4       	ldi	r26, 0x45	; 69
    28be:	b0 e0       	ldi	r27, 0x00	; 0
    28c0:	e5 e4       	ldi	r30, 0x45	; 69
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	80 81       	ld	r24, Z
    28c6:	88 68       	ori	r24, 0x88	; 136
    28c8:	8c 93       	st	X, r24
			/*inserting prescaler value in 3 LSB (CS22,CS21,CS20) */
			TCCR2 = (TCCR2 & 0xF8) | (Configuration->Freq_prescaler & 0x07);
    28ca:	a5 e4       	ldi	r26, 0x45	; 69
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	e5 e4       	ldi	r30, 0x45	; 69
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	98 2f       	mov	r25, r24
    28d6:	98 7f       	andi	r25, 0xF8	; 248
    28d8:	e9 81       	ldd	r30, Y+1	; 0x01
    28da:	fa 81       	ldd	r31, Y+2	; 0x02
    28dc:	85 81       	ldd	r24, Z+5	; 0x05
    28de:	87 70       	andi	r24, 0x07	; 7
    28e0:	89 2b       	or	r24, r25
    28e2:	8c 93       	st	X, r24
			/*enable interrupt*/
			TIMSK |= (1<<OCIE2);
    28e4:	a9 e5       	ldi	r26, 0x59	; 89
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	e9 e5       	ldi	r30, 0x59	; 89
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	80 81       	ld	r24, Z
    28ee:	80 68       	ori	r24, 0x80	; 128
    28f0:	8c 93       	st	X, r24
    28f2:	2b c0       	rjmp	.+86     	; 0x294a <TIMER_init+0x370>
		}
		else if((Configuration->mode) == Fast_PWM_Mode)
    28f4:	e9 81       	ldd	r30, Y+1	; 0x01
    28f6:	fa 81       	ldd	r31, Y+2	; 0x02
    28f8:	81 81       	ldd	r24, Z+1	; 0x01
    28fa:	82 30       	cpi	r24, 0x02	; 2
    28fc:	31 f5       	brne	.+76     	; 0x294a <TIMER_init+0x370>
		{
			/*initialize timer*/
			TCNT2=Configuration->initial_value;
    28fe:	a4 e4       	ldi	r26, 0x44	; 68
    2900:	b0 e0       	ldi	r27, 0x00	; 0
    2902:	e9 81       	ldd	r30, Y+1	; 0x01
    2904:	fa 81       	ldd	r31, Y+2	; 0x02
    2906:	82 81       	ldd	r24, Z+2	; 0x02
    2908:	8c 93       	st	X, r24
			/*set PD7 output pin to get the output pulses*/
			GPIO_setupPinDirection(PORTD_ID,PIN7_ID,PIN_OUTPUT);
    290a:	83 e0       	ldi	r24, 0x03	; 3
    290c:	67 e0       	ldi	r22, 0x07	; 7
    290e:	41 e0       	ldi	r20, 0x01	; 1
    2910:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <GPIO_setupPinDirection>
			/*set compare value in PWM mode*/
			OCR2= Configuration->set_duty;
    2914:	a3 e4       	ldi	r26, 0x43	; 67
    2916:	b0 e0       	ldi	r27, 0x00	; 0
    2918:	e9 81       	ldd	r30, Y+1	; 0x01
    291a:	fa 81       	ldd	r31, Y+2	; 0x02
    291c:	86 81       	ldd	r24, Z+6	; 0x06
    291e:	97 81       	ldd	r25, Z+7	; 0x07
    2920:	8c 93       	st	X, r24
			/*activate Fast_PWM mode and clear OC0 on compare match*/
			TCCR2 |= (1<<WGM21) | (1<<WGM20) | (1<<COM21);
    2922:	a5 e4       	ldi	r26, 0x45	; 69
    2924:	b0 e0       	ldi	r27, 0x00	; 0
    2926:	e5 e4       	ldi	r30, 0x45	; 69
    2928:	f0 e0       	ldi	r31, 0x00	; 0
    292a:	80 81       	ld	r24, Z
    292c:	88 66       	ori	r24, 0x68	; 104
    292e:	8c 93       	st	X, r24
			/*inserting prescaler value in 3 LSB (CS22,CS21,CS20) */
			TCCR2 = (TCCR2 & 0xF8) | (Configuration->Freq_prescaler & 0x07);
    2930:	a5 e4       	ldi	r26, 0x45	; 69
    2932:	b0 e0       	ldi	r27, 0x00	; 0
    2934:	e5 e4       	ldi	r30, 0x45	; 69
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	80 81       	ld	r24, Z
    293a:	98 2f       	mov	r25, r24
    293c:	98 7f       	andi	r25, 0xF8	; 248
    293e:	e9 81       	ldd	r30, Y+1	; 0x01
    2940:	fa 81       	ldd	r31, Y+2	; 0x02
    2942:	85 81       	ldd	r24, Z+5	; 0x05
    2944:	87 70       	andi	r24, 0x07	; 7
    2946:	89 2b       	or	r24, r25
    2948:	8c 93       	st	X, r24
		}

	}
}
    294a:	0f 90       	pop	r0
    294c:	0f 90       	pop	r0
    294e:	cf 91       	pop	r28
    2950:	df 91       	pop	r29
    2952:	08 95       	ret

00002954 <TIMER_Deinit>:
void TIMER_Deinit (Timer_ID id)
{
    2954:	df 93       	push	r29
    2956:	cf 93       	push	r28
    2958:	0f 92       	push	r0
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
    295e:	89 83       	std	Y+1, r24	; 0x01
	/*Check which timer of the three timers in AVR MC*/

	/*Timer0*/
	if(id == 0)
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	88 23       	and	r24, r24
    2964:	51 f4       	brne	.+20     	; 0x297a <TIMER_Deinit+0x26>
	{
		/*Clear TCCR0 register*/
		TCCR0 = 0x00;
    2966:	e3 e5       	ldi	r30, 0x53	; 83
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	10 82       	st	Z, r1
		/*Clear TCNT0 register*/
		TCNT0= 0;
    296c:	e2 e5       	ldi	r30, 0x52	; 82
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	10 82       	st	Z, r1
		/*Clear OCR0 register*/
		OCR0=0;
    2972:	ec e5       	ldi	r30, 0x5C	; 92
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	10 82       	st	Z, r1
    2978:	22 c0       	rjmp	.+68     	; 0x29be <TIMER_Deinit+0x6a>
	}

	/*Timer1*/
	else if(id == 1 )
    297a:	89 81       	ldd	r24, Y+1	; 0x01
    297c:	81 30       	cpi	r24, 0x01	; 1
    297e:	99 f4       	brne	.+38     	; 0x29a6 <TIMER_Deinit+0x52>
	{
		/*Clear TCCR1A register*/
		TCCR1A = 0x00;
    2980:	ef e4       	ldi	r30, 0x4F	; 79
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	10 82       	st	Z, r1
		/*Clear TCCR1B register*/
		TCCR1B = 0x00;
    2986:	ee e4       	ldi	r30, 0x4E	; 78
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	10 82       	st	Z, r1
		/*Clear TCNT1 register*/
		TCNT1= 0;
    298c:	ec e4       	ldi	r30, 0x4C	; 76
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	11 82       	std	Z+1, r1	; 0x01
    2992:	10 82       	st	Z, r1
		/*Clear OCR1A register*/
		OCR1A=0;
    2994:	ea e4       	ldi	r30, 0x4A	; 74
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	11 82       	std	Z+1, r1	; 0x01
    299a:	10 82       	st	Z, r1
		/*Clear OCR1B register*/
		OCR1B=0;
    299c:	e8 e4       	ldi	r30, 0x48	; 72
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	11 82       	std	Z+1, r1	; 0x01
    29a2:	10 82       	st	Z, r1
    29a4:	0c c0       	rjmp	.+24     	; 0x29be <TIMER_Deinit+0x6a>
	}

	/*Timer2*/
	else if(id == 2)
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	82 30       	cpi	r24, 0x02	; 2
    29aa:	49 f4       	brne	.+18     	; 0x29be <TIMER_Deinit+0x6a>
	{
		/*Clear TCCR2 register*/
		TCCR2 = 0x00;
    29ac:	e5 e4       	ldi	r30, 0x45	; 69
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	10 82       	st	Z, r1
		/*Clear TCNT2 register*/
		TCNT2= 0;
    29b2:	e4 e4       	ldi	r30, 0x44	; 68
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	10 82       	st	Z, r1
		/*Clear OCR2 register*/
		OCR2=0;
    29b8:	e3 e4       	ldi	r30, 0x43	; 67
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	10 82       	st	Z, r1
	}
	/*Clear TIMSK register for all timers interrupt*/
	TIMSK=0x00;
    29be:	e9 e5       	ldi	r30, 0x59	; 89
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	10 82       	st	Z, r1
}
    29c4:	0f 90       	pop	r0
    29c6:	cf 91       	pop	r28
    29c8:	df 91       	pop	r29
    29ca:	08 95       	ret

000029cc <TIMER_setCallback>:
void TIMER_setCallback(void(*a_ptr)(),TIMER_Mode mode,Timer_ID id)
{
    29cc:	df 93       	push	r29
    29ce:	cf 93       	push	r28
    29d0:	00 d0       	rcall	.+0      	; 0x29d2 <TIMER_setCallback+0x6>
    29d2:	00 d0       	rcall	.+0      	; 0x29d4 <TIMER_setCallback+0x8>
    29d4:	cd b7       	in	r28, 0x3d	; 61
    29d6:	de b7       	in	r29, 0x3e	; 62
    29d8:	9a 83       	std	Y+2, r25	; 0x02
    29da:	89 83       	std	Y+1, r24	; 0x01
    29dc:	6b 83       	std	Y+3, r22	; 0x03
    29de:	4c 83       	std	Y+4, r20	; 0x04
	/*Check which timer of the three timers in AVR MC*/

	/*Timer0*/
	if(id == 0)
    29e0:	8c 81       	ldd	r24, Y+4	; 0x04
    29e2:	88 23       	and	r24, r24
    29e4:	39 f4       	brne	.+14     	; 0x29f4 <TIMER_setCallback+0x28>
	{
		g_callBackPtr_timer0  = a_ptr;
    29e6:	89 81       	ldd	r24, Y+1	; 0x01
    29e8:	9a 81       	ldd	r25, Y+2	; 0x02
    29ea:	90 93 a7 00 	sts	0x00A7, r25
    29ee:	80 93 a6 00 	sts	0x00A6, r24
    29f2:	13 c0       	rjmp	.+38     	; 0x2a1a <TIMER_setCallback+0x4e>
	}

	/*Timer1*/
	else if(id == 1)
    29f4:	8c 81       	ldd	r24, Y+4	; 0x04
    29f6:	81 30       	cpi	r24, 0x01	; 1
    29f8:	39 f4       	brne	.+14     	; 0x2a08 <TIMER_setCallback+0x3c>
	{
		g_callBackPtr_timer1  = a_ptr;
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	9a 81       	ldd	r25, Y+2	; 0x02
    29fe:	90 93 a9 00 	sts	0x00A9, r25
    2a02:	80 93 a8 00 	sts	0x00A8, r24
    2a06:	09 c0       	rjmp	.+18     	; 0x2a1a <TIMER_setCallback+0x4e>
	}

	/*Timer2*/
	else if(id == 2)
    2a08:	8c 81       	ldd	r24, Y+4	; 0x04
    2a0a:	82 30       	cpi	r24, 0x02	; 2
    2a0c:	31 f4       	brne	.+12     	; 0x2a1a <TIMER_setCallback+0x4e>
	{
		g_callBackPtr_timer2  = a_ptr;
    2a0e:	89 81       	ldd	r24, Y+1	; 0x01
    2a10:	9a 81       	ldd	r25, Y+2	; 0x02
    2a12:	90 93 ab 00 	sts	0x00AB, r25
    2a16:	80 93 aa 00 	sts	0x00AA, r24
	}
}
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	0f 90       	pop	r0
    2a20:	0f 90       	pop	r0
    2a22:	cf 91       	pop	r28
    2a24:	df 91       	pop	r29
    2a26:	08 95       	ret

00002a28 <TWI_bitRate>:

/***************************************************************
 *                    Function for this file                   *
 ***************************************************************/
 uint8 TWI_bitRate(BitRate rate)
{
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	00 d0       	rcall	.+0      	; 0x2a2e <TWI_bitRate+0x6>
    2a2e:	00 d0       	rcall	.+0      	; 0x2a30 <TWI_bitRate+0x8>
    2a30:	cd b7       	in	r28, 0x3d	; 61
    2a32:	de b7       	in	r29, 0x3e	; 62
    2a34:	8a 83       	std	Y+2, r24	; 0x02
	 /*
	  * Function to hanlde rate calculations
	  */
	uint8 r=0;
    2a36:	19 82       	std	Y+1, r1	; 0x01
	switch(rate)
    2a38:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3a:	28 2f       	mov	r18, r24
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	3c 83       	std	Y+4, r19	; 0x04
    2a40:	2b 83       	std	Y+3, r18	; 0x03
    2a42:	8b 81       	ldd	r24, Y+3	; 0x03
    2a44:	9c 81       	ldd	r25, Y+4	; 0x04
    2a46:	81 30       	cpi	r24, 0x01	; 1
    2a48:	91 05       	cpc	r25, r1
    2a4a:	c1 f0       	breq	.+48     	; 0x2a7c <TWI_bitRate+0x54>
    2a4c:	2b 81       	ldd	r18, Y+3	; 0x03
    2a4e:	3c 81       	ldd	r19, Y+4	; 0x04
    2a50:	22 30       	cpi	r18, 0x02	; 2
    2a52:	31 05       	cpc	r19, r1
    2a54:	2c f4       	brge	.+10     	; 0x2a60 <TWI_bitRate+0x38>
    2a56:	8b 81       	ldd	r24, Y+3	; 0x03
    2a58:	9c 81       	ldd	r25, Y+4	; 0x04
    2a5a:	00 97       	sbiw	r24, 0x00	; 0
    2a5c:	61 f0       	breq	.+24     	; 0x2a76 <TWI_bitRate+0x4e>
    2a5e:	16 c0       	rjmp	.+44     	; 0x2a8c <TWI_bitRate+0x64>
    2a60:	2b 81       	ldd	r18, Y+3	; 0x03
    2a62:	3c 81       	ldd	r19, Y+4	; 0x04
    2a64:	22 30       	cpi	r18, 0x02	; 2
    2a66:	31 05       	cpc	r19, r1
    2a68:	61 f0       	breq	.+24     	; 0x2a82 <TWI_bitRate+0x5a>
    2a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6e:	83 30       	cpi	r24, 0x03	; 3
    2a70:	91 05       	cpc	r25, r1
    2a72:	51 f0       	breq	.+20     	; 0x2a88 <TWI_bitRate+0x60>
    2a74:	0b c0       	rjmp	.+22     	; 0x2a8c <TWI_bitRate+0x64>
	{
	case 0:
		r = 32;
    2a76:	80 e2       	ldi	r24, 0x20	; 32
    2a78:	89 83       	std	Y+1, r24	; 0x01
    2a7a:	08 c0       	rjmp	.+16     	; 0x2a8c <TWI_bitRate+0x64>
		break;
	case 1:
		r =  2;
    2a7c:	82 e0       	ldi	r24, 0x02	; 2
    2a7e:	89 83       	std	Y+1, r24	; 0x01
    2a80:	05 c0       	rjmp	.+10     	; 0x2a8c <TWI_bitRate+0x64>
		break;
	case 2:
		r = -1;
    2a82:	8f ef       	ldi	r24, 0xFF	; 255
    2a84:	89 83       	std	Y+1, r24	; 0x01
    2a86:	02 c0       	rjmp	.+4      	; 0x2a8c <TWI_bitRate+0x64>
		break;
	case 3:
		r = -1;
    2a88:	8f ef       	ldi	r24, 0xFF	; 255
    2a8a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return r;
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a8e:	0f 90       	pop	r0
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	cf 91       	pop	r28
    2a98:	df 91       	pop	r29
    2a9a:	08 95       	ret

00002a9c <TWI_init>:
void TWI_init(TWI_ConfigurationStruct* Config)
{
    2a9c:	0f 93       	push	r16
    2a9e:	1f 93       	push	r17
    2aa0:	df 93       	push	r29
    2aa2:	cf 93       	push	r28
    2aa4:	00 d0       	rcall	.+0      	; 0x2aa6 <TWI_init+0xa>
    2aa6:	cd b7       	in	r28, 0x3d	; 61
    2aa8:	de b7       	in	r29, 0x3e	; 62
    2aaa:	9a 83       	std	Y+2, r25	; 0x02
    2aac:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
   if(TWI_bitRate(Config->rate) > 0)
    2aae:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab2:	81 81       	ldd	r24, Z+1	; 0x01
    2ab4:	0e 94 14 15 	call	0x2a28	; 0x2a28 <TWI_bitRate>
    2ab8:	88 23       	and	r24, r24
    2aba:	51 f0       	breq	.+20     	; 0x2ad0 <TWI_init+0x34>
   {
	TWBR = TWI_bitRate(Config->rate);
    2abc:	00 e2       	ldi	r16, 0x20	; 32
    2abe:	10 e0       	ldi	r17, 0x00	; 0
    2ac0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ac2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ac4:	81 81       	ldd	r24, Z+1	; 0x01
    2ac6:	0e 94 14 15 	call	0x2a28	; 0x2a28 <TWI_bitRate>
    2aca:	f8 01       	movw	r30, r16
    2acc:	80 83       	st	Z, r24
    2ace:	04 c0       	rjmp	.+8      	; 0x2ad8 <TWI_init+0x3c>
   }
   else
   {
	   TWBR=2;
    2ad0:	e0 e2       	ldi	r30, 0x20	; 32
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	82 e0       	ldi	r24, 0x02	; 2
    2ad6:	80 83       	st	Z, r24
   }
	TWSR = 0x00;
    2ad8:	e1 e2       	ldi	r30, 0x21	; 33
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	10 82       	st	Z, r1

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = ((Config->slave_adress)>>1 )&(~(0x01)); // my address = 0x01 :)
    2ade:	a2 e2       	ldi	r26, 0x22	; 34
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0
    2ae2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ae4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ae6:	80 81       	ld	r24, Z
    2ae8:	86 95       	lsr	r24
    2aea:	8e 7f       	andi	r24, 0xFE	; 254
    2aec:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
    2aee:	e6 e5       	ldi	r30, 0x56	; 86
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	84 e0       	ldi	r24, 0x04	; 4
    2af4:	80 83       	st	Z, r24
}
    2af6:	0f 90       	pop	r0
    2af8:	0f 90       	pop	r0
    2afa:	cf 91       	pop	r28
    2afc:	df 91       	pop	r29
    2afe:	1f 91       	pop	r17
    2b00:	0f 91       	pop	r16
    2b02:	08 95       	ret

00002b04 <TWI_start>:

void TWI_start(void)
{
    2b04:	df 93       	push	r29
    2b06:	cf 93       	push	r28
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2b0c:	e6 e5       	ldi	r30, 0x56	; 86
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	84 ea       	ldi	r24, 0xA4	; 164
    2b12:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2b14:	e6 e5       	ldi	r30, 0x56	; 86
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	80 81       	ld	r24, Z
    2b1a:	88 23       	and	r24, r24
    2b1c:	dc f7       	brge	.-10     	; 0x2b14 <TWI_start+0x10>
}
    2b1e:	cf 91       	pop	r28
    2b20:	df 91       	pop	r29
    2b22:	08 95       	ret

00002b24 <TWI_stop>:

void TWI_stop(void)
{
    2b24:	df 93       	push	r29
    2b26:	cf 93       	push	r28
    2b28:	cd b7       	in	r28, 0x3d	; 61
    2b2a:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2b2c:	e6 e5       	ldi	r30, 0x56	; 86
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	84 e9       	ldi	r24, 0x94	; 148
    2b32:	80 83       	st	Z, r24
}
    2b34:	cf 91       	pop	r28
    2b36:	df 91       	pop	r29
    2b38:	08 95       	ret

00002b3a <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2b3a:	df 93       	push	r29
    2b3c:	cf 93       	push	r28
    2b3e:	0f 92       	push	r0
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
    2b44:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2b46:	e3 e2       	ldi	r30, 0x23	; 35
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2b4e:	e6 e5       	ldi	r30, 0x56	; 86
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	84 e8       	ldi	r24, 0x84	; 132
    2b54:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2b56:	e6 e5       	ldi	r30, 0x56	; 86
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	80 81       	ld	r24, Z
    2b5c:	88 23       	and	r24, r24
    2b5e:	dc f7       	brge	.-10     	; 0x2b56 <TWI_writeByte+0x1c>
}
    2b60:	0f 90       	pop	r0
    2b62:	cf 91       	pop	r28
    2b64:	df 91       	pop	r29
    2b66:	08 95       	ret

00002b68 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2b68:	df 93       	push	r29
    2b6a:	cf 93       	push	r28
    2b6c:	cd b7       	in	r28, 0x3d	; 61
    2b6e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2b70:	e6 e5       	ldi	r30, 0x56	; 86
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	84 ec       	ldi	r24, 0xC4	; 196
    2b76:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2b78:	e6 e5       	ldi	r30, 0x56	; 86
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	80 81       	ld	r24, Z
    2b7e:	88 23       	and	r24, r24
    2b80:	dc f7       	brge	.-10     	; 0x2b78 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2b82:	e3 e2       	ldi	r30, 0x23	; 35
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	80 81       	ld	r24, Z
}
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	08 95       	ret

00002b8e <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2b8e:	df 93       	push	r29
    2b90:	cf 93       	push	r28
    2b92:	cd b7       	in	r28, 0x3d	; 61
    2b94:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2b96:	e6 e5       	ldi	r30, 0x56	; 86
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	84 e8       	ldi	r24, 0x84	; 132
    2b9c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2b9e:	e6 e5       	ldi	r30, 0x56	; 86
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	80 81       	ld	r24, Z
    2ba4:	88 23       	and	r24, r24
    2ba6:	dc f7       	brge	.-10     	; 0x2b9e <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2ba8:	e3 e2       	ldi	r30, 0x23	; 35
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	80 81       	ld	r24, Z
}
    2bae:	cf 91       	pop	r28
    2bb0:	df 91       	pop	r29
    2bb2:	08 95       	ret

00002bb4 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2bb4:	df 93       	push	r29
    2bb6:	cf 93       	push	r28
    2bb8:	0f 92       	push	r0
    2bba:	cd b7       	in	r28, 0x3d	; 61
    2bbc:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2bbe:	e1 e2       	ldi	r30, 0x21	; 33
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	88 7f       	andi	r24, 0xF8	; 248
    2bc6:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bca:	0f 90       	pop	r0
    2bcc:	cf 91       	pop	r28
    2bce:	df 91       	pop	r29
    2bd0:	08 95       	ret

00002bd2 <UART_init>:
#include "uart.h"
#include "common_macros.h"
#include <AVR/io.h>

void UART_init(UART_Configuration * config)
{
    2bd2:	df 93       	push	r29
    2bd4:	cf 93       	push	r28
    2bd6:	00 d0       	rcall	.+0      	; 0x2bd8 <UART_init+0x6>
    2bd8:	00 d0       	rcall	.+0      	; 0x2bda <UART_init+0x8>
    2bda:	cd b7       	in	r28, 0x3d	; 61
    2bdc:	de b7       	in	r29, 0x3e	; 62
    2bde:	9c 83       	std	Y+4, r25	; 0x04
    2be0:	8b 83       	std	Y+3, r24	; 0x03
	/*
	 *  Declare uint16 UBRR_value to calculate UBRR value and store it
	 */
	uint16 UBRR_value = 0;
    2be2:	1a 82       	std	Y+2, r1	; 0x02
    2be4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * We will use double transmission speed by seting U2X by 1
	 */

	UCSRA |= (1<<U2X);
    2be6:	ab e2       	ldi	r26, 0x2B	; 43
    2be8:	b0 e0       	ldi	r27, 0x00	; 0
    2bea:	eb e2       	ldi	r30, 0x2B	; 43
    2bec:	f0 e0       	ldi	r31, 0x00	; 0
    2bee:	80 81       	ld	r24, Z
    2bf0:	82 60       	ori	r24, 0x02	; 2
    2bf2:	8c 93       	st	X, r24
	/*
	 *  Enabling Rx & Tx of the UART peripheral
	 */
	UCSRB |= (1 << RXEN) | (1 << TXEN);
    2bf4:	aa e2       	ldi	r26, 0x2A	; 42
    2bf6:	b0 e0       	ldi	r27, 0x00	; 0
    2bf8:	ea e2       	ldi	r30, 0x2A	; 42
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	80 81       	ld	r24, Z
    2bfe:	88 61       	ori	r24, 0x18	; 24
    2c00:	8c 93       	st	X, r24
	UCSRC |= 1<<URSEL;
    2c02:	a0 e4       	ldi	r26, 0x40	; 64
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	e0 e4       	ldi	r30, 0x40	; 64
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	80 68       	ori	r24, 0x80	; 128
    2c0e:	8c 93       	st	X, r24
	/*
	 * Choosing 8-bits data
	 */
	UCSRC = (UCSRC & 0xCF) | (config->parity << 4);
    2c10:	a0 e4       	ldi	r26, 0x40	; 64
    2c12:	b0 e0       	ldi	r27, 0x00	; 0
    2c14:	e0 e4       	ldi	r30, 0x40	; 64
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	80 81       	ld	r24, Z
    2c1a:	28 2f       	mov	r18, r24
    2c1c:	2f 7c       	andi	r18, 0xCF	; 207
    2c1e:	eb 81       	ldd	r30, Y+3	; 0x03
    2c20:	fc 81       	ldd	r31, Y+4	; 0x04
    2c22:	81 81       	ldd	r24, Z+1	; 0x01
    2c24:	88 2f       	mov	r24, r24
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	82 95       	swap	r24
    2c2a:	92 95       	swap	r25
    2c2c:	90 7f       	andi	r25, 0xF0	; 240
    2c2e:	98 27       	eor	r25, r24
    2c30:	80 7f       	andi	r24, 0xF0	; 240
    2c32:	98 27       	eor	r25, r24
    2c34:	82 2b       	or	r24, r18
    2c36:	8c 93       	st	X, r24
	/*
	 * choose Parity bit and choose 1-bit as stop bit not 2-bits
	 */
	UCSRC = (UCSRC & 0xF9) | (config->data_bits << 1);
    2c38:	a0 e4       	ldi	r26, 0x40	; 64
    2c3a:	b0 e0       	ldi	r27, 0x00	; 0
    2c3c:	e0 e4       	ldi	r30, 0x40	; 64
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	80 81       	ld	r24, Z
    2c42:	28 2f       	mov	r18, r24
    2c44:	29 7f       	andi	r18, 0xF9	; 249
    2c46:	eb 81       	ldd	r30, Y+3	; 0x03
    2c48:	fc 81       	ldd	r31, Y+4	; 0x04
    2c4a:	80 81       	ld	r24, Z
    2c4c:	88 2f       	mov	r24, r24
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	88 0f       	add	r24, r24
    2c52:	99 1f       	adc	r25, r25
    2c54:	82 2b       	or	r24, r18
    2c56:	8c 93       	st	X, r24
	/*
	 * Writing the baud rate in UBRR
	 */
	UBRR_value= ((uint16) ( (  ( F_CPU ) / ( 8UL * config->baud_rate ) ) - 1 ) );
    2c58:	eb 81       	ldd	r30, Y+3	; 0x03
    2c5a:	fc 81       	ldd	r31, Y+4	; 0x04
    2c5c:	83 81       	ldd	r24, Z+3	; 0x03
    2c5e:	94 81       	ldd	r25, Z+4	; 0x04
    2c60:	cc 01       	movw	r24, r24
    2c62:	a0 e0       	ldi	r26, 0x00	; 0
    2c64:	b0 e0       	ldi	r27, 0x00	; 0
    2c66:	88 0f       	add	r24, r24
    2c68:	99 1f       	adc	r25, r25
    2c6a:	aa 1f       	adc	r26, r26
    2c6c:	bb 1f       	adc	r27, r27
    2c6e:	88 0f       	add	r24, r24
    2c70:	99 1f       	adc	r25, r25
    2c72:	aa 1f       	adc	r26, r26
    2c74:	bb 1f       	adc	r27, r27
    2c76:	88 0f       	add	r24, r24
    2c78:	99 1f       	adc	r25, r25
    2c7a:	aa 1f       	adc	r26, r26
    2c7c:	bb 1f       	adc	r27, r27
    2c7e:	9c 01       	movw	r18, r24
    2c80:	ad 01       	movw	r20, r26
    2c82:	80 e4       	ldi	r24, 0x40	; 64
    2c84:	92 e4       	ldi	r25, 0x42	; 66
    2c86:	af e0       	ldi	r26, 0x0F	; 15
    2c88:	b0 e0       	ldi	r27, 0x00	; 0
    2c8a:	bc 01       	movw	r22, r24
    2c8c:	cd 01       	movw	r24, r26
    2c8e:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__udivmodsi4>
    2c92:	da 01       	movw	r26, r20
    2c94:	c9 01       	movw	r24, r18
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	9a 83       	std	Y+2, r25	; 0x02
    2c9a:	89 83       	std	Y+1, r24	; 0x01

	UBRRH = (UBRR_value>>8);
    2c9c:	e0 e4       	ldi	r30, 0x40	; 64
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	89 81       	ldd	r24, Y+1	; 0x01
    2ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca4:	89 2f       	mov	r24, r25
    2ca6:	99 27       	eor	r25, r25
    2ca8:	80 83       	st	Z, r24
	UBRRL =  UBRR_value;
    2caa:	e9 e2       	ldi	r30, 0x29	; 41
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
    2cb0:	80 83       	st	Z, r24
}
    2cb2:	0f 90       	pop	r0
    2cb4:	0f 90       	pop	r0
    2cb6:	0f 90       	pop	r0
    2cb8:	0f 90       	pop	r0
    2cba:	cf 91       	pop	r28
    2cbc:	df 91       	pop	r29
    2cbe:	08 95       	ret

00002cc0 <UART_receiveByte>:

uint8 UART_receiveByte()
{
    2cc0:	df 93       	push	r29
    2cc2:	cf 93       	push	r28
    2cc4:	cd b7       	in	r28, 0x3d	; 61
    2cc6:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Waiting for data utill it be received by UART
	 */
	while(BIT_IS_CLEAR(UCSRA,RXC));
    2cc8:	eb e2       	ldi	r30, 0x2B	; 43
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	80 81       	ld	r24, Z
    2cce:	88 23       	and	r24, r24
    2cd0:	dc f7       	brge	.-10     	; 0x2cc8 <UART_receiveByte+0x8>
	/*
	 * return the receive data
	 */
	return UDR;
    2cd2:	ec e2       	ldi	r30, 0x2C	; 44
    2cd4:	f0 e0       	ldi	r31, 0x00	; 0
    2cd6:	80 81       	ld	r24, Z
}
    2cd8:	cf 91       	pop	r28
    2cda:	df 91       	pop	r29
    2cdc:	08 95       	ret

00002cde <UART_sendByte>:
void UART_sendByte(uint8 data)
{
    2cde:	df 93       	push	r29
    2ce0:	cf 93       	push	r28
    2ce2:	0f 92       	push	r0
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
    2ce8:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
    2cea:	ec e2       	ldi	r30, 0x2C	; 44
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	89 81       	ldd	r24, Y+1	; 0x01
    2cf0:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(UCSRA,TXC)); // Wait until the transmission is complete TXC = 1
    2cf2:	eb e2       	ldi	r30, 0x2B	; 43
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	88 2f       	mov	r24, r24
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	80 74       	andi	r24, 0x40	; 64
    2cfe:	90 70       	andi	r25, 0x00	; 0
    2d00:	00 97       	sbiw	r24, 0x00	; 0
    2d02:	b9 f3       	breq	.-18     	; 0x2cf2 <UART_sendByte+0x14>
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
    2d04:	ab e2       	ldi	r26, 0x2B	; 43
    2d06:	b0 e0       	ldi	r27, 0x00	; 0
    2d08:	eb e2       	ldi	r30, 0x2B	; 43
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	80 81       	ld	r24, Z
    2d0e:	80 64       	ori	r24, 0x40	; 64
    2d10:	8c 93       	st	X, r24
}
    2d12:	0f 90       	pop	r0
    2d14:	cf 91       	pop	r28
    2d16:	df 91       	pop	r29
    2d18:	08 95       	ret

00002d1a <UART_receiveString>:
void UART_receiveString(uint8* str)
{
    2d1a:	0f 93       	push	r16
    2d1c:	1f 93       	push	r17
    2d1e:	df 93       	push	r29
    2d20:	cf 93       	push	r28
    2d22:	00 d0       	rcall	.+0      	; 0x2d24 <UART_receiveString+0xa>
    2d24:	0f 92       	push	r0
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
    2d2a:	9b 83       	std	Y+3, r25	; 0x03
    2d2c:	8a 83       	std	Y+2, r24	; 0x02
	/*Declare index initialized by */
	uint8 idx=0;
    2d2e:	19 82       	std	Y+1, r1	; 0x01
	/*receive first character*/
	str[idx]=UART_receiveByte();
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	28 2f       	mov	r18, r24
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	8a 81       	ldd	r24, Y+2	; 0x02
    2d38:	9b 81       	ldd	r25, Y+3	; 0x03
    2d3a:	8c 01       	movw	r16, r24
    2d3c:	02 0f       	add	r16, r18
    2d3e:	13 1f       	adc	r17, r19
    2d40:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <UART_receiveByte>
    2d44:	f8 01       	movw	r30, r16
    2d46:	80 83       	st	Z, r24
    2d48:	0f c0       	rjmp	.+30     	; 0x2d68 <UART_receiveString+0x4e>
/*receive data until special sign(#) between the two UART*/
	while(str[idx]!='#')
	{
		idx++; /*increment index*/
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
    2d4c:	8f 5f       	subi	r24, 0xFF	; 255
    2d4e:	89 83       	std	Y+1, r24	; 0x01
		str[idx]=UART_receiveByte();/*receive a character*/
    2d50:	89 81       	ldd	r24, Y+1	; 0x01
    2d52:	28 2f       	mov	r18, r24
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	8a 81       	ldd	r24, Y+2	; 0x02
    2d58:	9b 81       	ldd	r25, Y+3	; 0x03
    2d5a:	8c 01       	movw	r16, r24
    2d5c:	02 0f       	add	r16, r18
    2d5e:	13 1f       	adc	r17, r19
    2d60:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <UART_receiveByte>
    2d64:	f8 01       	movw	r30, r16
    2d66:	80 83       	st	Z, r24
	/*Declare index initialized by */
	uint8 idx=0;
	/*receive first character*/
	str[idx]=UART_receiveByte();
/*receive data until special sign(#) between the two UART*/
	while(str[idx]!='#')
    2d68:	89 81       	ldd	r24, Y+1	; 0x01
    2d6a:	28 2f       	mov	r18, r24
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d70:	9b 81       	ldd	r25, Y+3	; 0x03
    2d72:	fc 01       	movw	r30, r24
    2d74:	e2 0f       	add	r30, r18
    2d76:	f3 1f       	adc	r31, r19
    2d78:	80 81       	ld	r24, Z
    2d7a:	83 32       	cpi	r24, 0x23	; 35
    2d7c:	31 f7       	brne	.-52     	; 0x2d4a <UART_receiveString+0x30>
	{
		idx++; /*increment index*/
		str[idx]=UART_receiveByte();/*receive a character*/
	}
	str[idx]='\0';
    2d7e:	89 81       	ldd	r24, Y+1	; 0x01
    2d80:	28 2f       	mov	r18, r24
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	8a 81       	ldd	r24, Y+2	; 0x02
    2d86:	9b 81       	ldd	r25, Y+3	; 0x03
    2d88:	fc 01       	movw	r30, r24
    2d8a:	e2 0f       	add	r30, r18
    2d8c:	f3 1f       	adc	r31, r19
    2d8e:	10 82       	st	Z, r1
}
    2d90:	0f 90       	pop	r0
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	cf 91       	pop	r28
    2d98:	df 91       	pop	r29
    2d9a:	1f 91       	pop	r17
    2d9c:	0f 91       	pop	r16
    2d9e:	08 95       	ret

00002da0 <UART_sendString>:
void UART_sendString(uint8* str)
{
    2da0:	df 93       	push	r29
    2da2:	cf 93       	push	r28
    2da4:	00 d0       	rcall	.+0      	; 0x2da6 <UART_sendString+0x6>
    2da6:	0f 92       	push	r0
    2da8:	cd b7       	in	r28, 0x3d	; 61
    2daa:	de b7       	in	r29, 0x3e	; 62
    2dac:	9b 83       	std	Y+3, r25	; 0x03
    2dae:	8a 83       	std	Y+2, r24	; 0x02
	/*declare an index  and initialized by 0*/
	uint8 idx=0;
    2db0:	19 82       	std	Y+1, r1	; 0x01
    2db2:	0e c0       	rjmp	.+28     	; 0x2dd0 <UART_sendString+0x30>
	/*sending the string*/
	while(str[idx] != '\0')
	{
		UART_sendByte(str[idx]);
    2db4:	89 81       	ldd	r24, Y+1	; 0x01
    2db6:	28 2f       	mov	r18, r24
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	8a 81       	ldd	r24, Y+2	; 0x02
    2dbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	e2 0f       	add	r30, r18
    2dc2:	f3 1f       	adc	r31, r19
    2dc4:	80 81       	ld	r24, Z
    2dc6:	0e 94 6f 16 	call	0x2cde	; 0x2cde <UART_sendByte>
		idx++;
    2dca:	89 81       	ldd	r24, Y+1	; 0x01
    2dcc:	8f 5f       	subi	r24, 0xFF	; 255
    2dce:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(uint8* str)
{
	/*declare an index  and initialized by 0*/
	uint8 idx=0;
	/*sending the string*/
	while(str[idx] != '\0')
    2dd0:	89 81       	ldd	r24, Y+1	; 0x01
    2dd2:	28 2f       	mov	r18, r24
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2dda:	fc 01       	movw	r30, r24
    2ddc:	e2 0f       	add	r30, r18
    2dde:	f3 1f       	adc	r31, r19
    2de0:	80 81       	ld	r24, Z
    2de2:	88 23       	and	r24, r24
    2de4:	39 f7       	brne	.-50     	; 0x2db4 <UART_sendString+0x14>
	{
		UART_sendByte(str[idx]);
		idx++;
	}
}
    2de6:	0f 90       	pop	r0
    2de8:	0f 90       	pop	r0
    2dea:	0f 90       	pop	r0
    2dec:	cf 91       	pop	r28
    2dee:	df 91       	pop	r29
    2df0:	08 95       	ret

00002df2 <__udivmodsi4>:
    2df2:	a1 e2       	ldi	r26, 0x21	; 33
    2df4:	1a 2e       	mov	r1, r26
    2df6:	aa 1b       	sub	r26, r26
    2df8:	bb 1b       	sub	r27, r27
    2dfa:	fd 01       	movw	r30, r26
    2dfc:	0d c0       	rjmp	.+26     	; 0x2e18 <__udivmodsi4_ep>

00002dfe <__udivmodsi4_loop>:
    2dfe:	aa 1f       	adc	r26, r26
    2e00:	bb 1f       	adc	r27, r27
    2e02:	ee 1f       	adc	r30, r30
    2e04:	ff 1f       	adc	r31, r31
    2e06:	a2 17       	cp	r26, r18
    2e08:	b3 07       	cpc	r27, r19
    2e0a:	e4 07       	cpc	r30, r20
    2e0c:	f5 07       	cpc	r31, r21
    2e0e:	20 f0       	brcs	.+8      	; 0x2e18 <__udivmodsi4_ep>
    2e10:	a2 1b       	sub	r26, r18
    2e12:	b3 0b       	sbc	r27, r19
    2e14:	e4 0b       	sbc	r30, r20
    2e16:	f5 0b       	sbc	r31, r21

00002e18 <__udivmodsi4_ep>:
    2e18:	66 1f       	adc	r22, r22
    2e1a:	77 1f       	adc	r23, r23
    2e1c:	88 1f       	adc	r24, r24
    2e1e:	99 1f       	adc	r25, r25
    2e20:	1a 94       	dec	r1
    2e22:	69 f7       	brne	.-38     	; 0x2dfe <__udivmodsi4_loop>
    2e24:	60 95       	com	r22
    2e26:	70 95       	com	r23
    2e28:	80 95       	com	r24
    2e2a:	90 95       	com	r25
    2e2c:	9b 01       	movw	r18, r22
    2e2e:	ac 01       	movw	r20, r24
    2e30:	bd 01       	movw	r22, r26
    2e32:	cf 01       	movw	r24, r30
    2e34:	08 95       	ret

00002e36 <__prologue_saves__>:
    2e36:	2f 92       	push	r2
    2e38:	3f 92       	push	r3
    2e3a:	4f 92       	push	r4
    2e3c:	5f 92       	push	r5
    2e3e:	6f 92       	push	r6
    2e40:	7f 92       	push	r7
    2e42:	8f 92       	push	r8
    2e44:	9f 92       	push	r9
    2e46:	af 92       	push	r10
    2e48:	bf 92       	push	r11
    2e4a:	cf 92       	push	r12
    2e4c:	df 92       	push	r13
    2e4e:	ef 92       	push	r14
    2e50:	ff 92       	push	r15
    2e52:	0f 93       	push	r16
    2e54:	1f 93       	push	r17
    2e56:	cf 93       	push	r28
    2e58:	df 93       	push	r29
    2e5a:	cd b7       	in	r28, 0x3d	; 61
    2e5c:	de b7       	in	r29, 0x3e	; 62
    2e5e:	ca 1b       	sub	r28, r26
    2e60:	db 0b       	sbc	r29, r27
    2e62:	0f b6       	in	r0, 0x3f	; 63
    2e64:	f8 94       	cli
    2e66:	de bf       	out	0x3e, r29	; 62
    2e68:	0f be       	out	0x3f, r0	; 63
    2e6a:	cd bf       	out	0x3d, r28	; 61
    2e6c:	09 94       	ijmp

00002e6e <__epilogue_restores__>:
    2e6e:	2a 88       	ldd	r2, Y+18	; 0x12
    2e70:	39 88       	ldd	r3, Y+17	; 0x11
    2e72:	48 88       	ldd	r4, Y+16	; 0x10
    2e74:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e76:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e78:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e7a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e7c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e7e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e80:	b9 84       	ldd	r11, Y+9	; 0x09
    2e82:	c8 84       	ldd	r12, Y+8	; 0x08
    2e84:	df 80       	ldd	r13, Y+7	; 0x07
    2e86:	ee 80       	ldd	r14, Y+6	; 0x06
    2e88:	fd 80       	ldd	r15, Y+5	; 0x05
    2e8a:	0c 81       	ldd	r16, Y+4	; 0x04
    2e8c:	1b 81       	ldd	r17, Y+3	; 0x03
    2e8e:	aa 81       	ldd	r26, Y+2	; 0x02
    2e90:	b9 81       	ldd	r27, Y+1	; 0x01
    2e92:	ce 0f       	add	r28, r30
    2e94:	d1 1d       	adc	r29, r1
    2e96:	0f b6       	in	r0, 0x3f	; 63
    2e98:	f8 94       	cli
    2e9a:	de bf       	out	0x3e, r29	; 62
    2e9c:	0f be       	out	0x3f, r0	; 63
    2e9e:	cd bf       	out	0x3d, r28	; 61
    2ea0:	ed 01       	movw	r28, r26
    2ea2:	08 95       	ret

00002ea4 <_exit>:
    2ea4:	f8 94       	cli

00002ea6 <__stop_program>:
    2ea6:	ff cf       	rjmp	.-2      	; 0x2ea6 <__stop_program>
