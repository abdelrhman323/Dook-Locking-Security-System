
Final_Project_HMI_MC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000076  00800060  00003d08  00003d9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000d6  008000d6  00003e12  2**0
                  ALLOC
  3 .stab         000035dc  00000000  00000000  00003e14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014ab  00000000  00000000  000073f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000889b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000089db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a794  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b67f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c42c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c58c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c819  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cfe7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 73 1a 	jmp	0x34e6	; 0x34e6 <__vector_3>
      10:	0c 94 40 1a 	jmp	0x3480	; 0x3480 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 0d 1a 	jmp	0x341a	; 0x341a <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 da 19 	jmp	0x33b4	; 0x33b4 <__vector_8>
      24:	0c 94 74 19 	jmp	0x32e8	; 0x32e8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 a7 19 	jmp	0x334e	; 0x334e <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3d       	cpi	r26, 0xD6	; 214
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ed       	ldi	r26, 0xD6	; 214
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3d       	cpi	r26, 0xDE	; 222
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <main>
      8a:	0c 94 82 1e 	jmp	0x3d04	; 0x3d04 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 eb       	ldi	r26, 0xB8	; 184
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1b 1e 	jmp	0x3c36	; 0x3c36 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0b 1e 	jmp	0x3c16	; 0x3c16 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 27 1e 	jmp	0x3c4e	; 0x3c4e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0b 1e 	jmp	0x3c16	; 0x3c16 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 27 1e 	jmp	0x3c4e	; 0x3c4e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	88 eb       	ldi	r24, 0xB8	; 184
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1b 1e 	jmp	0x3c36	; 0x3c36 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0b 1e 	jmp	0x3c16	; 0x3c16 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 27 1e 	jmp	0x3c4e	; 0x3c4e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0b 1e 	jmp	0x3c16	; 0x3c16 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 27 1e 	jmp	0x3c4e	; 0x3c4e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0b 1e 	jmp	0x3c16	; 0x3c16 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 27 1e 	jmp	0x3c4e	; 0x3c4e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0f 1e 	jmp	0x3c1e	; 0x3c1e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <KEYPAD_getPressedKey>:
static uint8 KEYPAD_adjustkey_4x4(uint8);

#endif

uint8 KEYPAD_getPressedKey()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <KEYPAD_getPressedKey+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <KEYPAD_getPressedKey+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
	uint8 row,col;
	uint8 keypad_pressed_value=0;
     b52:	1a 82       	std	Y+2, r1	; 0x02
	while(1)
	{
		uint8 fl=0;
     b54:	19 82       	std	Y+1, r1	; 0x01
		for(col=0; col < KEYPAD_NUM_OF_COLs; col++)
     b56:	1b 82       	std	Y+3, r1	; 0x03
     b58:	49 c0       	rjmp	.+146    	; 0xbec <KEYPAD_getPressedKey+0xa6>
		{
			GPIO_setupPortDirection(KEYPAD_PORT,PORT_INPUT);
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	0e 94 14 09 	call	0x1228	; 0x1228 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT,KEYPAD_FIRST_PIN_COLs+col,PIN_OUTPUT);
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	98 2f       	mov	r25, r24
     b66:	9c 5f       	subi	r25, 0xFC	; 252
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	69 2f       	mov	r22, r25
     b6c:	41 e0       	ldi	r20, 0x01	; 1
     b6e:	0e 94 a3 06 	call	0xd46	; 0xd46 <GPIO_setupPinDirection>
#if(KEYPAD_KEY_PRESSED == LOGIC_LOW)
			keypad_pressed_value = ~(1<<(KEYPAD_FIRST_PIN_COLs+col));
     b72:	8b 81       	ldd	r24, Y+3	; 0x03
     b74:	88 2f       	mov	r24, r24
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	9c 01       	movw	r18, r24
     b7a:	2c 5f       	subi	r18, 0xFC	; 252
     b7c:	3f 4f       	sbci	r19, 0xFF	; 255
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	02 c0       	rjmp	.+4      	; 0xb88 <KEYPAD_getPressedKey+0x42>
     b84:	88 0f       	add	r24, r24
     b86:	99 1f       	adc	r25, r25
     b88:	2a 95       	dec	r18
     b8a:	e2 f7       	brpl	.-8      	; 0xb84 <KEYPAD_getPressedKey+0x3e>
     b8c:	80 95       	com	r24
     b8e:	8a 83       	std	Y+2, r24	; 0x02
#else
			keypad_pressed_value =  (1<<(KEYPAD_FIRST_PIN_COLs+col));
#endif
			GPIO_writePort(KEYPAD_PORT,keypad_pressed_value);
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	6a 81       	ldd	r22, Y+2	; 0x02
     b94:	0e 94 58 09 	call	0x12b0	; 0x12b0 <GPIO_writePort>
			for(row=0; row < KEYPAD_NUM_OF_ROWs; row++)
     b98:	1c 82       	std	Y+4, r1	; 0x04
     b9a:	22 c0       	rjmp	.+68     	; 0xbe0 <KEYPAD_getPressedKey+0x9a>
			{
				if(GPIO_readPin(PORTA_ID,row)==KEYPAD_KEY_PRESSED && fl==0)
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	6c 81       	ldd	r22, Y+4	; 0x04
     ba0:	0e 94 79 08 	call	0x10f2	; 0x10f2 <GPIO_readPin>
     ba4:	88 23       	and	r24, r24
     ba6:	c9 f4       	brne	.+50     	; 0xbda <KEYPAD_getPressedKey+0x94>
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	88 23       	and	r24, r24
     bac:	b1 f4       	brne	.+44     	; 0xbda <KEYPAD_getPressedKey+0x94>
				{
					fl=1;
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_OF_COLs == 3)
					return KEYPAD_adjustkey_4x3((row*KEYPAD_NUM_OF_COLs)+col+1);
#elif(KEYPAD_NUM_OF_COLs == 4)
					return KEYPAD_adjustkey_4x4((row*KEYPAD_NUM_OF_COLs)+col+1);
     bb2:	8c 81       	ldd	r24, Y+4	; 0x04
     bb4:	88 2f       	mov	r24, r24
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	88 0f       	add	r24, r24
     bba:	99 1f       	adc	r25, r25
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	98 2f       	mov	r25, r24
     bc2:	8b 81       	ldd	r24, Y+3	; 0x03
     bc4:	89 0f       	add	r24, r25
     bc6:	8f 5f       	subi	r24, 0xFF	; 255
     bc8:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <KEYPAD_adjustkey_4x4>
#endif
				}
			}
		}
	}
}
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret
			keypad_pressed_value = ~(1<<(KEYPAD_FIRST_PIN_COLs+col));
#else
			keypad_pressed_value =  (1<<(KEYPAD_FIRST_PIN_COLs+col));
#endif
			GPIO_writePort(KEYPAD_PORT,keypad_pressed_value);
			for(row=0; row < KEYPAD_NUM_OF_ROWs; row++)
     bda:	8c 81       	ldd	r24, Y+4	; 0x04
     bdc:	8f 5f       	subi	r24, 0xFF	; 255
     bde:	8c 83       	std	Y+4, r24	; 0x04
     be0:	8c 81       	ldd	r24, Y+4	; 0x04
     be2:	84 30       	cpi	r24, 0x04	; 4
     be4:	d8 f2       	brcs	.-74     	; 0xb9c <KEYPAD_getPressedKey+0x56>
	uint8 row,col;
	uint8 keypad_pressed_value=0;
	while(1)
	{
		uint8 fl=0;
		for(col=0; col < KEYPAD_NUM_OF_COLs; col++)
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	8f 5f       	subi	r24, 0xFF	; 255
     bea:	8b 83       	std	Y+3, r24	; 0x03
     bec:	8b 81       	ldd	r24, Y+3	; 0x03
     bee:	84 30       	cpi	r24, 0x04	; 4
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <KEYPAD_getPressedKey+0xae>
     bf2:	b3 cf       	rjmp	.-154    	; 0xb5a <KEYPAD_getPressedKey+0x14>
     bf4:	af cf       	rjmp	.-162    	; 0xb54 <KEYPAD_getPressedKey+0xe>

00000bf6 <KEYPAD_adjustkey_4x4>:
	return button_value;
}
#elif(KEYPAD_NUM_OF_COLs == 4)

static uint8 KEYPAD_adjustkey_4x4(uint8 button_pressed)
{
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <KEYPAD_adjustkey_4x4+0x6>
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <KEYPAD_adjustkey_4x4+0x8>
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	8a 83       	std	Y+2, r24	; 0x02
	uint8 button_value=0;
     c04:	19 82       	std	Y+1, r1	; 0x01
	switch(button_pressed)
     c06:	8a 81       	ldd	r24, Y+2	; 0x02
     c08:	28 2f       	mov	r18, r24
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	3c 83       	std	Y+4, r19	; 0x04
     c0e:	2b 83       	std	Y+3, r18	; 0x03
     c10:	8b 81       	ldd	r24, Y+3	; 0x03
     c12:	9c 81       	ldd	r25, Y+4	; 0x04
     c14:	88 30       	cpi	r24, 0x08	; 8
     c16:	91 05       	cpc	r25, r1
     c18:	09 f4       	brne	.+2      	; 0xc1c <KEYPAD_adjustkey_4x4+0x26>
     c1a:	70 c0       	rjmp	.+224    	; 0xcfc <KEYPAD_adjustkey_4x4+0x106>
     c1c:	2b 81       	ldd	r18, Y+3	; 0x03
     c1e:	3c 81       	ldd	r19, Y+4	; 0x04
     c20:	29 30       	cpi	r18, 0x09	; 9
     c22:	31 05       	cpc	r19, r1
     c24:	5c f5       	brge	.+86     	; 0xc7c <KEYPAD_adjustkey_4x4+0x86>
     c26:	8b 81       	ldd	r24, Y+3	; 0x03
     c28:	9c 81       	ldd	r25, Y+4	; 0x04
     c2a:	84 30       	cpi	r24, 0x04	; 4
     c2c:	91 05       	cpc	r25, r1
     c2e:	09 f4       	brne	.+2      	; 0xc32 <KEYPAD_adjustkey_4x4+0x3c>
     c30:	59 c0       	rjmp	.+178    	; 0xce4 <KEYPAD_adjustkey_4x4+0xee>
     c32:	2b 81       	ldd	r18, Y+3	; 0x03
     c34:	3c 81       	ldd	r19, Y+4	; 0x04
     c36:	25 30       	cpi	r18, 0x05	; 5
     c38:	31 05       	cpc	r19, r1
     c3a:	9c f4       	brge	.+38     	; 0xc62 <KEYPAD_adjustkey_4x4+0x6c>
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	9c 81       	ldd	r25, Y+4	; 0x04
     c40:	82 30       	cpi	r24, 0x02	; 2
     c42:	91 05       	cpc	r25, r1
     c44:	09 f4       	brne	.+2      	; 0xc48 <KEYPAD_adjustkey_4x4+0x52>
     c46:	48 c0       	rjmp	.+144    	; 0xcd8 <KEYPAD_adjustkey_4x4+0xe2>
     c48:	2b 81       	ldd	r18, Y+3	; 0x03
     c4a:	3c 81       	ldd	r19, Y+4	; 0x04
     c4c:	23 30       	cpi	r18, 0x03	; 3
     c4e:	31 05       	cpc	r19, r1
     c50:	0c f0       	brlt	.+2      	; 0xc54 <KEYPAD_adjustkey_4x4+0x5e>
     c52:	45 c0       	rjmp	.+138    	; 0xcde <KEYPAD_adjustkey_4x4+0xe8>
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	9c 81       	ldd	r25, Y+4	; 0x04
     c58:	81 30       	cpi	r24, 0x01	; 1
     c5a:	91 05       	cpc	r25, r1
     c5c:	09 f4       	brne	.+2      	; 0xc60 <KEYPAD_adjustkey_4x4+0x6a>
     c5e:	39 c0       	rjmp	.+114    	; 0xcd2 <KEYPAD_adjustkey_4x4+0xdc>
     c60:	68 c0       	rjmp	.+208    	; 0xd32 <KEYPAD_adjustkey_4x4+0x13c>
     c62:	2b 81       	ldd	r18, Y+3	; 0x03
     c64:	3c 81       	ldd	r19, Y+4	; 0x04
     c66:	26 30       	cpi	r18, 0x06	; 6
     c68:	31 05       	cpc	r19, r1
     c6a:	09 f4       	brne	.+2      	; 0xc6e <KEYPAD_adjustkey_4x4+0x78>
     c6c:	41 c0       	rjmp	.+130    	; 0xcf0 <KEYPAD_adjustkey_4x4+0xfa>
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	9c 81       	ldd	r25, Y+4	; 0x04
     c72:	87 30       	cpi	r24, 0x07	; 7
     c74:	91 05       	cpc	r25, r1
     c76:	0c f0       	brlt	.+2      	; 0xc7a <KEYPAD_adjustkey_4x4+0x84>
     c78:	3e c0       	rjmp	.+124    	; 0xcf6 <KEYPAD_adjustkey_4x4+0x100>
     c7a:	37 c0       	rjmp	.+110    	; 0xcea <KEYPAD_adjustkey_4x4+0xf4>
     c7c:	2b 81       	ldd	r18, Y+3	; 0x03
     c7e:	3c 81       	ldd	r19, Y+4	; 0x04
     c80:	2c 30       	cpi	r18, 0x0C	; 12
     c82:	31 05       	cpc	r19, r1
     c84:	09 f4       	brne	.+2      	; 0xc88 <KEYPAD_adjustkey_4x4+0x92>
     c86:	46 c0       	rjmp	.+140    	; 0xd14 <KEYPAD_adjustkey_4x4+0x11e>
     c88:	8b 81       	ldd	r24, Y+3	; 0x03
     c8a:	9c 81       	ldd	r25, Y+4	; 0x04
     c8c:	8d 30       	cpi	r24, 0x0D	; 13
     c8e:	91 05       	cpc	r25, r1
     c90:	5c f4       	brge	.+22     	; 0xca8 <KEYPAD_adjustkey_4x4+0xb2>
     c92:	2b 81       	ldd	r18, Y+3	; 0x03
     c94:	3c 81       	ldd	r19, Y+4	; 0x04
     c96:	2a 30       	cpi	r18, 0x0A	; 10
     c98:	31 05       	cpc	r19, r1
     c9a:	b1 f1       	breq	.+108    	; 0xd08 <KEYPAD_adjustkey_4x4+0x112>
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ca0:	8b 30       	cpi	r24, 0x0B	; 11
     ca2:	91 05       	cpc	r25, r1
     ca4:	a4 f5       	brge	.+104    	; 0xd0e <KEYPAD_adjustkey_4x4+0x118>
     ca6:	2d c0       	rjmp	.+90     	; 0xd02 <KEYPAD_adjustkey_4x4+0x10c>
     ca8:	2b 81       	ldd	r18, Y+3	; 0x03
     caa:	3c 81       	ldd	r19, Y+4	; 0x04
     cac:	2e 30       	cpi	r18, 0x0E	; 14
     cae:	31 05       	cpc	r19, r1
     cb0:	b9 f1       	breq	.+110    	; 0xd20 <KEYPAD_adjustkey_4x4+0x12a>
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	9c 81       	ldd	r25, Y+4	; 0x04
     cb6:	8e 30       	cpi	r24, 0x0E	; 14
     cb8:	91 05       	cpc	r25, r1
     cba:	7c f1       	brlt	.+94     	; 0xd1a <KEYPAD_adjustkey_4x4+0x124>
     cbc:	2b 81       	ldd	r18, Y+3	; 0x03
     cbe:	3c 81       	ldd	r19, Y+4	; 0x04
     cc0:	2f 30       	cpi	r18, 0x0F	; 15
     cc2:	31 05       	cpc	r19, r1
     cc4:	81 f1       	breq	.+96     	; 0xd26 <KEYPAD_adjustkey_4x4+0x130>
     cc6:	8b 81       	ldd	r24, Y+3	; 0x03
     cc8:	9c 81       	ldd	r25, Y+4	; 0x04
     cca:	80 31       	cpi	r24, 0x10	; 16
     ccc:	91 05       	cpc	r25, r1
     cce:	71 f1       	breq	.+92     	; 0xd2c <KEYPAD_adjustkey_4x4+0x136>
     cd0:	30 c0       	rjmp	.+96     	; 0xd32 <KEYPAD_adjustkey_4x4+0x13c>
	{
	case 1:
		button_value='7';
     cd2:	87 e3       	ldi	r24, 0x37	; 55
     cd4:	89 83       	std	Y+1, r24	; 0x01
     cd6:	2f c0       	rjmp	.+94     	; 0xd36 <KEYPAD_adjustkey_4x4+0x140>
		break;
	case 2:
		button_value='8';
     cd8:	88 e3       	ldi	r24, 0x38	; 56
     cda:	89 83       	std	Y+1, r24	; 0x01
     cdc:	2c c0       	rjmp	.+88     	; 0xd36 <KEYPAD_adjustkey_4x4+0x140>
		break;
	case 3:
		button_value='9';
     cde:	89 e3       	ldi	r24, 0x39	; 57
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	29 c0       	rjmp	.+82     	; 0xd36 <KEYPAD_adjustkey_4x4+0x140>
		break;
	case 4:
		button_value='/';
     ce4:	8f e2       	ldi	r24, 0x2F	; 47
     ce6:	89 83       	std	Y+1, r24	; 0x01
     ce8:	26 c0       	rjmp	.+76     	; 0xd36 <KEYPAD_adjustkey_4x4+0x140>
		break;
	case 5:
		button_value='4';
     cea:	84 e3       	ldi	r24, 0x34	; 52
     cec:	89 83       	std	Y+1, r24	; 0x01
     cee:	23 c0       	rjmp	.+70     	; 0xd36 <KEYPAD_adjustkey_4x4+0x140>
		break;
	case 6:
		button_value='5';
     cf0:	85 e3       	ldi	r24, 0x35	; 53
     cf2:	89 83       	std	Y+1, r24	; 0x01
     cf4:	20 c0       	rjmp	.+64     	; 0xd36 <KEYPAD_adjustkey_4x4+0x140>
		break;
	case 7:
		button_value='6';
     cf6:	86 e3       	ldi	r24, 0x36	; 54
     cf8:	89 83       	std	Y+1, r24	; 0x01
     cfa:	1d c0       	rjmp	.+58     	; 0xd36 <KEYPAD_adjustkey_4x4+0x140>
		break;
	case 8:
		button_value='*';
     cfc:	8a e2       	ldi	r24, 0x2A	; 42
     cfe:	89 83       	std	Y+1, r24	; 0x01
     d00:	1a c0       	rjmp	.+52     	; 0xd36 <KEYPAD_adjustkey_4x4+0x140>
		break;
	case 9:
		button_value='1';
     d02:	81 e3       	ldi	r24, 0x31	; 49
     d04:	89 83       	std	Y+1, r24	; 0x01
     d06:	17 c0       	rjmp	.+46     	; 0xd36 <KEYPAD_adjustkey_4x4+0x140>
		break;
	case 10:
		button_value='2';
     d08:	82 e3       	ldi	r24, 0x32	; 50
     d0a:	89 83       	std	Y+1, r24	; 0x01
     d0c:	14 c0       	rjmp	.+40     	; 0xd36 <KEYPAD_adjustkey_4x4+0x140>
		break;
	case 11:
		button_value='3';
     d0e:	83 e3       	ldi	r24, 0x33	; 51
     d10:	89 83       	std	Y+1, r24	; 0x01
     d12:	11 c0       	rjmp	.+34     	; 0xd36 <KEYPAD_adjustkey_4x4+0x140>
		break;
	case 12:
		button_value='-';
     d14:	8d e2       	ldi	r24, 0x2D	; 45
     d16:	89 83       	std	Y+1, r24	; 0x01
     d18:	0e c0       	rjmp	.+28     	; 0xd36 <KEYPAD_adjustkey_4x4+0x140>
		break;
	case 13:
		button_value=13;
     d1a:	8d e0       	ldi	r24, 0x0D	; 13
     d1c:	89 83       	std	Y+1, r24	; 0x01
     d1e:	0b c0       	rjmp	.+22     	; 0xd36 <KEYPAD_adjustkey_4x4+0x140>
		break;
	case 14:
		button_value='0';
     d20:	80 e3       	ldi	r24, 0x30	; 48
     d22:	89 83       	std	Y+1, r24	; 0x01
     d24:	08 c0       	rjmp	.+16     	; 0xd36 <KEYPAD_adjustkey_4x4+0x140>
		break;
	case 15:
		button_value='=';
     d26:	8d e3       	ldi	r24, 0x3D	; 61
     d28:	89 83       	std	Y+1, r24	; 0x01
     d2a:	05 c0       	rjmp	.+10     	; 0xd36 <KEYPAD_adjustkey_4x4+0x140>
		break;
	case 16:
		button_value='+';
     d2c:	8b e2       	ldi	r24, 0x2B	; 43
     d2e:	89 83       	std	Y+1, r24	; 0x01
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <KEYPAD_adjustkey_4x4+0x140>
		break;
	default:
		button_value=button_pressed;
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return button_value;
     d36:	89 81       	ldd	r24, Y+1	; 0x01
}
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <GPIO_setupPinDirection+0x6>
     d4c:	00 d0       	rcall	.+0      	; 0xd4e <GPIO_setupPinDirection+0x8>
     d4e:	0f 92       	push	r0
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	89 83       	std	Y+1, r24	; 0x01
     d56:	6a 83       	std	Y+2, r22	; 0x02
     d58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	88 30       	cpi	r24, 0x08	; 8
     d5e:	08 f0       	brcs	.+2      	; 0xd62 <GPIO_setupPinDirection+0x1c>
     d60:	d5 c0       	rjmp	.+426    	; 0xf0c <GPIO_setupPinDirection+0x1c6>
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	08 f0       	brcs	.+2      	; 0xd6a <GPIO_setupPinDirection+0x24>
     d68:	d1 c0       	rjmp	.+418    	; 0xf0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	3d 83       	std	Y+5, r19	; 0x05
     d72:	2c 83       	std	Y+4, r18	; 0x04
     d74:	8c 81       	ldd	r24, Y+4	; 0x04
     d76:	9d 81       	ldd	r25, Y+5	; 0x05
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	91 05       	cpc	r25, r1
     d7c:	09 f4       	brne	.+2      	; 0xd80 <GPIO_setupPinDirection+0x3a>
     d7e:	43 c0       	rjmp	.+134    	; 0xe06 <GPIO_setupPinDirection+0xc0>
     d80:	2c 81       	ldd	r18, Y+4	; 0x04
     d82:	3d 81       	ldd	r19, Y+5	; 0x05
     d84:	22 30       	cpi	r18, 0x02	; 2
     d86:	31 05       	cpc	r19, r1
     d88:	2c f4       	brge	.+10     	; 0xd94 <GPIO_setupPinDirection+0x4e>
     d8a:	8c 81       	ldd	r24, Y+4	; 0x04
     d8c:	9d 81       	ldd	r25, Y+5	; 0x05
     d8e:	00 97       	sbiw	r24, 0x00	; 0
     d90:	71 f0       	breq	.+28     	; 0xdae <GPIO_setupPinDirection+0x68>
     d92:	bc c0       	rjmp	.+376    	; 0xf0c <GPIO_setupPinDirection+0x1c6>
     d94:	2c 81       	ldd	r18, Y+4	; 0x04
     d96:	3d 81       	ldd	r19, Y+5	; 0x05
     d98:	22 30       	cpi	r18, 0x02	; 2
     d9a:	31 05       	cpc	r19, r1
     d9c:	09 f4       	brne	.+2      	; 0xda0 <GPIO_setupPinDirection+0x5a>
     d9e:	5f c0       	rjmp	.+190    	; 0xe5e <GPIO_setupPinDirection+0x118>
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	9d 81       	ldd	r25, Y+5	; 0x05
     da4:	83 30       	cpi	r24, 0x03	; 3
     da6:	91 05       	cpc	r25, r1
     da8:	09 f4       	brne	.+2      	; 0xdac <GPIO_setupPinDirection+0x66>
     daa:	85 c0       	rjmp	.+266    	; 0xeb6 <GPIO_setupPinDirection+0x170>
     dac:	af c0       	rjmp	.+350    	; 0xf0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	81 30       	cpi	r24, 0x01	; 1
     db2:	a1 f4       	brne	.+40     	; 0xddc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     db4:	aa e3       	ldi	r26, 0x3A	; 58
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	ea e3       	ldi	r30, 0x3A	; 58
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	48 2f       	mov	r20, r24
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	02 2e       	mov	r0, r18
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <GPIO_setupPinDirection+0x8c>
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	0a 94       	dec	r0
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <GPIO_setupPinDirection+0x88>
     dd6:	84 2b       	or	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	98 c0       	rjmp	.+304    	; 0xf0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     ddc:	aa e3       	ldi	r26, 0x3A	; 58
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	ea e3       	ldi	r30, 0x3A	; 58
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	48 2f       	mov	r20, r24
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	02 2e       	mov	r0, r18
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <GPIO_setupPinDirection+0xb4>
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	0a 94       	dec	r0
     dfc:	e2 f7       	brpl	.-8      	; 0xdf6 <GPIO_setupPinDirection+0xb0>
     dfe:	80 95       	com	r24
     e00:	84 23       	and	r24, r20
     e02:	8c 93       	st	X, r24
     e04:	83 c0       	rjmp	.+262    	; 0xf0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
     e08:	81 30       	cpi	r24, 0x01	; 1
     e0a:	a1 f4       	brne	.+40     	; 0xe34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     e0c:	a7 e3       	ldi	r26, 0x37	; 55
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e7 e3       	ldi	r30, 0x37	; 55
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	48 2f       	mov	r20, r24
     e18:	8a 81       	ldd	r24, Y+2	; 0x02
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	02 2e       	mov	r0, r18
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <GPIO_setupPinDirection+0xe4>
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	0a 94       	dec	r0
     e2c:	e2 f7       	brpl	.-8      	; 0xe26 <GPIO_setupPinDirection+0xe0>
     e2e:	84 2b       	or	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	6c c0       	rjmp	.+216    	; 0xf0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     e34:	a7 e3       	ldi	r26, 0x37	; 55
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e7 e3       	ldi	r30, 0x37	; 55
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	48 2f       	mov	r20, r24
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 2e       	mov	r0, r18
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <GPIO_setupPinDirection+0x10c>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	0a 94       	dec	r0
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <GPIO_setupPinDirection+0x108>
     e56:	80 95       	com	r24
     e58:	84 23       	and	r24, r20
     e5a:	8c 93       	st	X, r24
     e5c:	57 c0       	rjmp	.+174    	; 0xf0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	81 30       	cpi	r24, 0x01	; 1
     e62:	a1 f4       	brne	.+40     	; 0xe8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     e64:	a4 e3       	ldi	r26, 0x34	; 52
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e4 e3       	ldi	r30, 0x34	; 52
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <GPIO_setupPinDirection+0x13c>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <GPIO_setupPinDirection+0x138>
     e86:	84 2b       	or	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	40 c0       	rjmp	.+128    	; 0xf0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     e8c:	a4 e3       	ldi	r26, 0x34	; 52
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e4 e3       	ldi	r30, 0x34	; 52
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <GPIO_setupPinDirection+0x164>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <GPIO_setupPinDirection+0x160>
     eae:	80 95       	com	r24
     eb0:	84 23       	and	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	2b c0       	rjmp	.+86     	; 0xf0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	a1 f4       	brne	.+40     	; 0xee4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     ebc:	a1 e3       	ldi	r26, 0x31	; 49
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e1 e3       	ldi	r30, 0x31	; 49
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	48 2f       	mov	r20, r24
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 2e       	mov	r0, r18
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <GPIO_setupPinDirection+0x194>
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	0a 94       	dec	r0
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <GPIO_setupPinDirection+0x190>
     ede:	84 2b       	or	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	14 c0       	rjmp	.+40     	; 0xf0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ee4:	a1 e3       	ldi	r26, 0x31	; 49
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e1 e3       	ldi	r30, 0x31	; 49
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <GPIO_setupPinDirection+0x1bc>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <GPIO_setupPinDirection+0x1b8>
     f06:	80 95       	com	r24
     f08:	84 23       	and	r24, r20
     f0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	00 d0       	rcall	.+0      	; 0xf22 <GPIO_writePin+0x6>
     f22:	00 d0       	rcall	.+0      	; 0xf24 <GPIO_writePin+0x8>
     f24:	0f 92       	push	r0
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
     f2a:	89 83       	std	Y+1, r24	; 0x01
     f2c:	6a 83       	std	Y+2, r22	; 0x02
     f2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	88 30       	cpi	r24, 0x08	; 8
     f34:	08 f0       	brcs	.+2      	; 0xf38 <GPIO_writePin+0x1c>
     f36:	d5 c0       	rjmp	.+426    	; 0x10e2 <GPIO_writePin+0x1c6>
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	84 30       	cpi	r24, 0x04	; 4
     f3c:	08 f0       	brcs	.+2      	; 0xf40 <GPIO_writePin+0x24>
     f3e:	d1 c0       	rjmp	.+418    	; 0x10e2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	3d 83       	std	Y+5, r19	; 0x05
     f48:	2c 83       	std	Y+4, r18	; 0x04
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_writePin+0x3a>
     f54:	43 c0       	rjmp	.+134    	; 0xfdc <GPIO_writePin+0xc0>
     f56:	2c 81       	ldd	r18, Y+4	; 0x04
     f58:	3d 81       	ldd	r19, Y+5	; 0x05
     f5a:	22 30       	cpi	r18, 0x02	; 2
     f5c:	31 05       	cpc	r19, r1
     f5e:	2c f4       	brge	.+10     	; 0xf6a <GPIO_writePin+0x4e>
     f60:	8c 81       	ldd	r24, Y+4	; 0x04
     f62:	9d 81       	ldd	r25, Y+5	; 0x05
     f64:	00 97       	sbiw	r24, 0x00	; 0
     f66:	71 f0       	breq	.+28     	; 0xf84 <GPIO_writePin+0x68>
     f68:	bc c0       	rjmp	.+376    	; 0x10e2 <GPIO_writePin+0x1c6>
     f6a:	2c 81       	ldd	r18, Y+4	; 0x04
     f6c:	3d 81       	ldd	r19, Y+5	; 0x05
     f6e:	22 30       	cpi	r18, 0x02	; 2
     f70:	31 05       	cpc	r19, r1
     f72:	09 f4       	brne	.+2      	; 0xf76 <GPIO_writePin+0x5a>
     f74:	5f c0       	rjmp	.+190    	; 0x1034 <GPIO_writePin+0x118>
     f76:	8c 81       	ldd	r24, Y+4	; 0x04
     f78:	9d 81       	ldd	r25, Y+5	; 0x05
     f7a:	83 30       	cpi	r24, 0x03	; 3
     f7c:	91 05       	cpc	r25, r1
     f7e:	09 f4       	brne	.+2      	; 0xf82 <GPIO_writePin+0x66>
     f80:	85 c0       	rjmp	.+266    	; 0x108c <GPIO_writePin+0x170>
     f82:	af c0       	rjmp	.+350    	; 0x10e2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	a1 f4       	brne	.+40     	; 0xfb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     f8a:	ab e3       	ldi	r26, 0x3B	; 59
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	eb e3       	ldi	r30, 0x3B	; 59
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 2e       	mov	r0, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <GPIO_writePin+0x8c>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <GPIO_writePin+0x88>
     fac:	84 2b       	or	r24, r20
     fae:	8c 93       	st	X, r24
     fb0:	98 c0       	rjmp	.+304    	; 0x10e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     fb2:	ab e3       	ldi	r26, 0x3B	; 59
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	eb e3       	ldi	r30, 0x3B	; 59
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 2e       	mov	r0, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_writePin+0xb4>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_writePin+0xb0>
     fd4:	80 95       	com	r24
     fd6:	84 23       	and	r24, r20
     fd8:	8c 93       	st	X, r24
     fda:	83 c0       	rjmp	.+262    	; 0x10e2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	a1 f4       	brne	.+40     	; 0x100a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     fe2:	a8 e3       	ldi	r26, 0x38	; 56
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e8 e3       	ldi	r30, 0x38	; 56
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 2e       	mov	r0, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_writePin+0xe4>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_writePin+0xe0>
    1004:	84 2b       	or	r24, r20
    1006:	8c 93       	st	X, r24
    1008:	6c c0       	rjmp	.+216    	; 0x10e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    100a:	a8 e3       	ldi	r26, 0x38	; 56
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e8 e3       	ldi	r30, 0x38	; 56
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 2e       	mov	r0, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <GPIO_writePin+0x10c>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <GPIO_writePin+0x108>
    102c:	80 95       	com	r24
    102e:	84 23       	and	r24, r20
    1030:	8c 93       	st	X, r24
    1032:	57 c0       	rjmp	.+174    	; 0x10e2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	81 30       	cpi	r24, 0x01	; 1
    1038:	a1 f4       	brne	.+40     	; 0x1062 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    103a:	a5 e3       	ldi	r26, 0x35	; 53
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e5 e3       	ldi	r30, 0x35	; 53
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	48 2f       	mov	r20, r24
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 2e       	mov	r0, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <GPIO_writePin+0x13c>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <GPIO_writePin+0x138>
    105c:	84 2b       	or	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	40 c0       	rjmp	.+128    	; 0x10e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1062:	a5 e3       	ldi	r26, 0x35	; 53
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e5 e3       	ldi	r30, 0x35	; 53
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <GPIO_writePin+0x164>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <GPIO_writePin+0x160>
    1084:	80 95       	com	r24
    1086:	84 23       	and	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	2b c0       	rjmp	.+86     	; 0x10e2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	81 30       	cpi	r24, 0x01	; 1
    1090:	a1 f4       	brne	.+40     	; 0x10ba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1092:	a2 e3       	ldi	r26, 0x32	; 50
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e2 e3       	ldi	r30, 0x32	; 50
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 2e       	mov	r0, r18
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <GPIO_writePin+0x194>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <GPIO_writePin+0x190>
    10b4:	84 2b       	or	r24, r20
    10b6:	8c 93       	st	X, r24
    10b8:	14 c0       	rjmp	.+40     	; 0x10e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    10ba:	a2 e3       	ldi	r26, 0x32	; 50
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e2 e3       	ldi	r30, 0x32	; 50
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 2e       	mov	r0, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <GPIO_writePin+0x1bc>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	0a 94       	dec	r0
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <GPIO_writePin+0x1b8>
    10dc:	80 95       	com	r24
    10de:	84 23       	and	r24, r20
    10e0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	00 d0       	rcall	.+0      	; 0x10f8 <GPIO_readPin+0x6>
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <GPIO_readPin+0x8>
    10fa:	0f 92       	push	r0
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	8a 83       	std	Y+2, r24	; 0x02
    1102:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1104:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	88 30       	cpi	r24, 0x08	; 8
    110a:	08 f0       	brcs	.+2      	; 0x110e <GPIO_readPin+0x1c>
    110c:	84 c0       	rjmp	.+264    	; 0x1216 <GPIO_readPin+0x124>
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	84 30       	cpi	r24, 0x04	; 4
    1112:	08 f0       	brcs	.+2      	; 0x1116 <GPIO_readPin+0x24>
    1114:	80 c0       	rjmp	.+256    	; 0x1216 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	3d 83       	std	Y+5, r19	; 0x05
    111e:	2c 83       	std	Y+4, r18	; 0x04
    1120:	4c 81       	ldd	r20, Y+4	; 0x04
    1122:	5d 81       	ldd	r21, Y+5	; 0x05
    1124:	41 30       	cpi	r20, 0x01	; 1
    1126:	51 05       	cpc	r21, r1
    1128:	79 f1       	breq	.+94     	; 0x1188 <GPIO_readPin+0x96>
    112a:	8c 81       	ldd	r24, Y+4	; 0x04
    112c:	9d 81       	ldd	r25, Y+5	; 0x05
    112e:	82 30       	cpi	r24, 0x02	; 2
    1130:	91 05       	cpc	r25, r1
    1132:	34 f4       	brge	.+12     	; 0x1140 <GPIO_readPin+0x4e>
    1134:	2c 81       	ldd	r18, Y+4	; 0x04
    1136:	3d 81       	ldd	r19, Y+5	; 0x05
    1138:	21 15       	cp	r18, r1
    113a:	31 05       	cpc	r19, r1
    113c:	69 f0       	breq	.+26     	; 0x1158 <GPIO_readPin+0x66>
    113e:	6b c0       	rjmp	.+214    	; 0x1216 <GPIO_readPin+0x124>
    1140:	4c 81       	ldd	r20, Y+4	; 0x04
    1142:	5d 81       	ldd	r21, Y+5	; 0x05
    1144:	42 30       	cpi	r20, 0x02	; 2
    1146:	51 05       	cpc	r21, r1
    1148:	b9 f1       	breq	.+110    	; 0x11b8 <GPIO_readPin+0xc6>
    114a:	8c 81       	ldd	r24, Y+4	; 0x04
    114c:	9d 81       	ldd	r25, Y+5	; 0x05
    114e:	83 30       	cpi	r24, 0x03	; 3
    1150:	91 05       	cpc	r25, r1
    1152:	09 f4       	brne	.+2      	; 0x1156 <GPIO_readPin+0x64>
    1154:	49 c0       	rjmp	.+146    	; 0x11e8 <GPIO_readPin+0xf6>
    1156:	5f c0       	rjmp	.+190    	; 0x1216 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1158:	e9 e3       	ldi	r30, 0x39	; 57
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	88 2f       	mov	r24, r24
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	a9 01       	movw	r20, r18
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <GPIO_readPin+0x7e>
    116c:	55 95       	asr	r21
    116e:	47 95       	ror	r20
    1170:	8a 95       	dec	r24
    1172:	e2 f7       	brpl	.-8      	; 0x116c <GPIO_readPin+0x7a>
    1174:	ca 01       	movw	r24, r20
    1176:	81 70       	andi	r24, 0x01	; 1
    1178:	90 70       	andi	r25, 0x00	; 0
    117a:	88 23       	and	r24, r24
    117c:	19 f0       	breq	.+6      	; 0x1184 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	49 c0       	rjmp	.+146    	; 0x1216 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1184:	19 82       	std	Y+1, r1	; 0x01
    1186:	47 c0       	rjmp	.+142    	; 0x1216 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1188:	e6 e3       	ldi	r30, 0x36	; 54
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	88 2f       	mov	r24, r24
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	a9 01       	movw	r20, r18
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <GPIO_readPin+0xae>
    119c:	55 95       	asr	r21
    119e:	47 95       	ror	r20
    11a0:	8a 95       	dec	r24
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <GPIO_readPin+0xaa>
    11a4:	ca 01       	movw	r24, r20
    11a6:	81 70       	andi	r24, 0x01	; 1
    11a8:	90 70       	andi	r25, 0x00	; 0
    11aa:	88 23       	and	r24, r24
    11ac:	19 f0       	breq	.+6      	; 0x11b4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	89 83       	std	Y+1, r24	; 0x01
    11b2:	31 c0       	rjmp	.+98     	; 0x1216 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11b4:	19 82       	std	Y+1, r1	; 0x01
    11b6:	2f c0       	rjmp	.+94     	; 0x1216 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    11b8:	e3 e3       	ldi	r30, 0x33	; 51
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	88 2f       	mov	r24, r24
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	a9 01       	movw	r20, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <GPIO_readPin+0xde>
    11cc:	55 95       	asr	r21
    11ce:	47 95       	ror	r20
    11d0:	8a 95       	dec	r24
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <GPIO_readPin+0xda>
    11d4:	ca 01       	movw	r24, r20
    11d6:	81 70       	andi	r24, 0x01	; 1
    11d8:	90 70       	andi	r25, 0x00	; 0
    11da:	88 23       	and	r24, r24
    11dc:	19 f0       	breq	.+6      	; 0x11e4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	89 83       	std	Y+1, r24	; 0x01
    11e2:	19 c0       	rjmp	.+50     	; 0x1216 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11e4:	19 82       	std	Y+1, r1	; 0x01
    11e6:	17 c0       	rjmp	.+46     	; 0x1216 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    11e8:	e0 e3       	ldi	r30, 0x30	; 48
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	88 2f       	mov	r24, r24
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	a9 01       	movw	r20, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <GPIO_readPin+0x10e>
    11fc:	55 95       	asr	r21
    11fe:	47 95       	ror	r20
    1200:	8a 95       	dec	r24
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <GPIO_readPin+0x10a>
    1204:	ca 01       	movw	r24, r20
    1206:	81 70       	andi	r24, 0x01	; 1
    1208:	90 70       	andi	r25, 0x00	; 0
    120a:	88 23       	and	r24, r24
    120c:	19 f0       	breq	.+6      	; 0x1214 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	89 83       	std	Y+1, r24	; 0x01
    1212:	01 c0       	rjmp	.+2      	; 0x1216 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1214:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1216:	89 81       	ldd	r24, Y+1	; 0x01
}
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	08 95       	ret

00001228 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	00 d0       	rcall	.+0      	; 0x122e <GPIO_setupPortDirection+0x6>
    122e:	00 d0       	rcall	.+0      	; 0x1230 <GPIO_setupPortDirection+0x8>
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	89 83       	std	Y+1, r24	; 0x01
    1236:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	84 30       	cpi	r24, 0x04	; 4
    123c:	90 f5       	brcc	.+100    	; 0x12a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	3c 83       	std	Y+4, r19	; 0x04
    1246:	2b 83       	std	Y+3, r18	; 0x03
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	9c 81       	ldd	r25, Y+4	; 0x04
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	91 05       	cpc	r25, r1
    1250:	d1 f0       	breq	.+52     	; 0x1286 <GPIO_setupPortDirection+0x5e>
    1252:	2b 81       	ldd	r18, Y+3	; 0x03
    1254:	3c 81       	ldd	r19, Y+4	; 0x04
    1256:	22 30       	cpi	r18, 0x02	; 2
    1258:	31 05       	cpc	r19, r1
    125a:	2c f4       	brge	.+10     	; 0x1266 <GPIO_setupPortDirection+0x3e>
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	9c 81       	ldd	r25, Y+4	; 0x04
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	61 f0       	breq	.+24     	; 0x127c <GPIO_setupPortDirection+0x54>
    1264:	1e c0       	rjmp	.+60     	; 0x12a2 <GPIO_setupPortDirection+0x7a>
    1266:	2b 81       	ldd	r18, Y+3	; 0x03
    1268:	3c 81       	ldd	r19, Y+4	; 0x04
    126a:	22 30       	cpi	r18, 0x02	; 2
    126c:	31 05       	cpc	r19, r1
    126e:	81 f0       	breq	.+32     	; 0x1290 <GPIO_setupPortDirection+0x68>
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	9c 81       	ldd	r25, Y+4	; 0x04
    1274:	83 30       	cpi	r24, 0x03	; 3
    1276:	91 05       	cpc	r25, r1
    1278:	81 f0       	breq	.+32     	; 0x129a <GPIO_setupPortDirection+0x72>
    127a:	13 c0       	rjmp	.+38     	; 0x12a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    127c:	ea e3       	ldi	r30, 0x3A	; 58
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	80 83       	st	Z, r24
    1284:	0e c0       	rjmp	.+28     	; 0x12a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1286:	e7 e3       	ldi	r30, 0x37	; 55
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	80 83       	st	Z, r24
    128e:	09 c0       	rjmp	.+18     	; 0x12a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1290:	e4 e3       	ldi	r30, 0x34	; 52
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	80 83       	st	Z, r24
    1298:	04 c0       	rjmp	.+8      	; 0x12a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    129a:	e1 e3       	ldi	r30, 0x31	; 49
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <GPIO_writePort+0x6>
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <GPIO_writePort+0x8>
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	89 83       	std	Y+1, r24	; 0x01
    12be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	84 30       	cpi	r24, 0x04	; 4
    12c4:	90 f5       	brcc	.+100    	; 0x132a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	3c 83       	std	Y+4, r19	; 0x04
    12ce:	2b 83       	std	Y+3, r18	; 0x03
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	81 30       	cpi	r24, 0x01	; 1
    12d6:	91 05       	cpc	r25, r1
    12d8:	d1 f0       	breq	.+52     	; 0x130e <GPIO_writePort+0x5e>
    12da:	2b 81       	ldd	r18, Y+3	; 0x03
    12dc:	3c 81       	ldd	r19, Y+4	; 0x04
    12de:	22 30       	cpi	r18, 0x02	; 2
    12e0:	31 05       	cpc	r19, r1
    12e2:	2c f4       	brge	.+10     	; 0x12ee <GPIO_writePort+0x3e>
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	9c 81       	ldd	r25, Y+4	; 0x04
    12e8:	00 97       	sbiw	r24, 0x00	; 0
    12ea:	61 f0       	breq	.+24     	; 0x1304 <GPIO_writePort+0x54>
    12ec:	1e c0       	rjmp	.+60     	; 0x132a <GPIO_writePort+0x7a>
    12ee:	2b 81       	ldd	r18, Y+3	; 0x03
    12f0:	3c 81       	ldd	r19, Y+4	; 0x04
    12f2:	22 30       	cpi	r18, 0x02	; 2
    12f4:	31 05       	cpc	r19, r1
    12f6:	81 f0       	breq	.+32     	; 0x1318 <GPIO_writePort+0x68>
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	9c 81       	ldd	r25, Y+4	; 0x04
    12fc:	83 30       	cpi	r24, 0x03	; 3
    12fe:	91 05       	cpc	r25, r1
    1300:	81 f0       	breq	.+32     	; 0x1322 <GPIO_writePort+0x72>
    1302:	13 c0       	rjmp	.+38     	; 0x132a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1304:	eb e3       	ldi	r30, 0x3B	; 59
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	80 83       	st	Z, r24
    130c:	0e c0       	rjmp	.+28     	; 0x132a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    130e:	e8 e3       	ldi	r30, 0x38	; 56
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	80 83       	st	Z, r24
    1316:	09 c0       	rjmp	.+18     	; 0x132a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1318:	e5 e3       	ldi	r30, 0x35	; 53
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	80 83       	st	Z, r24
    1320:	04 c0       	rjmp	.+8      	; 0x132a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1322:	e2 e3       	ldi	r30, 0x32	; 50
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	80 83       	st	Z, r24
			break;
		}
	}
}
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	08 95       	ret

00001338 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	00 d0       	rcall	.+0      	; 0x133e <GPIO_readPort+0x6>
    133e:	00 d0       	rcall	.+0      	; 0x1340 <GPIO_readPort+0x8>
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1346:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	84 30       	cpi	r24, 0x04	; 4
    134c:	90 f5       	brcc	.+100    	; 0x13b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	3c 83       	std	Y+4, r19	; 0x04
    1356:	2b 83       	std	Y+3, r18	; 0x03
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	9c 81       	ldd	r25, Y+4	; 0x04
    135c:	81 30       	cpi	r24, 0x01	; 1
    135e:	91 05       	cpc	r25, r1
    1360:	d1 f0       	breq	.+52     	; 0x1396 <GPIO_readPort+0x5e>
    1362:	2b 81       	ldd	r18, Y+3	; 0x03
    1364:	3c 81       	ldd	r19, Y+4	; 0x04
    1366:	22 30       	cpi	r18, 0x02	; 2
    1368:	31 05       	cpc	r19, r1
    136a:	2c f4       	brge	.+10     	; 0x1376 <GPIO_readPort+0x3e>
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	9c 81       	ldd	r25, Y+4	; 0x04
    1370:	00 97       	sbiw	r24, 0x00	; 0
    1372:	61 f0       	breq	.+24     	; 0x138c <GPIO_readPort+0x54>
    1374:	1e c0       	rjmp	.+60     	; 0x13b2 <GPIO_readPort+0x7a>
    1376:	2b 81       	ldd	r18, Y+3	; 0x03
    1378:	3c 81       	ldd	r19, Y+4	; 0x04
    137a:	22 30       	cpi	r18, 0x02	; 2
    137c:	31 05       	cpc	r19, r1
    137e:	81 f0       	breq	.+32     	; 0x13a0 <GPIO_readPort+0x68>
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	9c 81       	ldd	r25, Y+4	; 0x04
    1384:	83 30       	cpi	r24, 0x03	; 3
    1386:	91 05       	cpc	r25, r1
    1388:	81 f0       	breq	.+32     	; 0x13aa <GPIO_readPort+0x72>
    138a:	13 c0       	rjmp	.+38     	; 0x13b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    138c:	e9 e3       	ldi	r30, 0x39	; 57
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	89 83       	std	Y+1, r24	; 0x01
    1394:	0e c0       	rjmp	.+28     	; 0x13b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1396:	e6 e3       	ldi	r30, 0x36	; 54
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	09 c0       	rjmp	.+18     	; 0x13b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    13a0:	e3 e3       	ldi	r30, 0x33	; 51
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	89 83       	std	Y+1, r24	; 0x01
    13a8:	04 c0       	rjmp	.+8      	; 0x13b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    13aa:	e0 e3       	ldi	r30, 0x30	; 48
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	cf 91       	pop	r28
    13be:	df 91       	pop	r29
    13c0:	08 95       	ret

000013c2 <IfMatch>:
 *              Assisting functions for HMI MC to do it's function          *
 ****************************************************************************/


uint8 IfMatch(uint8* str1, uint8* str2)
{
    13c2:	df 93       	push	r29
    13c4:	cf 93       	push	r28
    13c6:	00 d0       	rcall	.+0      	; 0x13c8 <IfMatch+0x6>
    13c8:	00 d0       	rcall	.+0      	; 0x13ca <IfMatch+0x8>
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <IfMatch+0xa>
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	9c 83       	std	Y+4, r25	; 0x04
    13d2:	8b 83       	std	Y+3, r24	; 0x03
    13d4:	7e 83       	std	Y+6, r23	; 0x06
    13d6:	6d 83       	std	Y+5, r22	; 0x05
	 * Description : function check for passwords strings matching
	 * Synchronous Function
	 * Input : two passwords strings
	 * Output: 0 (not match)  or 1 (match)
	 */
	uint8 match=1; /*assume they match firstly */
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	8a 83       	std	Y+2, r24	; 0x02
	uint8 idx; /*idx for password looping*/
	for(idx=0; str1[idx] != '='; idx++)
    13dc:	19 82       	std	Y+1, r1	; 0x01
    13de:	18 c0       	rjmp	.+48     	; 0x1410 <IfMatch+0x4e>
	{
		/*if there is a bit difference --> not match*/
		if(str1[idx] != str2[idx])
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ea:	fc 01       	movw	r30, r24
    13ec:	e2 0f       	add	r30, r18
    13ee:	f3 1f       	adc	r31, r19
    13f0:	40 81       	ld	r20, Z
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	8d 81       	ldd	r24, Y+5	; 0x05
    13fa:	9e 81       	ldd	r25, Y+6	; 0x06
    13fc:	fc 01       	movw	r30, r24
    13fe:	e2 0f       	add	r30, r18
    1400:	f3 1f       	adc	r31, r19
    1402:	80 81       	ld	r24, Z
    1404:	48 17       	cp	r20, r24
    1406:	09 f0       	breq	.+2      	; 0x140a <IfMatch+0x48>
		{
			match=0;
    1408:	1a 82       	std	Y+2, r1	; 0x02
	 * Input : two passwords strings
	 * Output: 0 (not match)  or 1 (match)
	 */
	uint8 match=1; /*assume they match firstly */
	uint8 idx; /*idx for password looping*/
	for(idx=0; str1[idx] != '='; idx++)
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	8f 5f       	subi	r24, 0xFF	; 255
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	9c 81       	ldd	r25, Y+4	; 0x04
    141a:	fc 01       	movw	r30, r24
    141c:	e2 0f       	add	r30, r18
    141e:	f3 1f       	adc	r31, r19
    1420:	80 81       	ld	r24, Z
    1422:	8d 33       	cpi	r24, 0x3D	; 61
    1424:	e9 f6       	brne	.-70     	; 0x13e0 <IfMatch+0x1e>
		if(str1[idx] != str2[idx])
		{
			match=0;
		}
	}
	return match;
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1428:	26 96       	adiw	r28, 0x06	; 6
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <PasswordSetting>:
uint8 PasswordSetting(uint8* pass)
{
    143a:	0f 93       	push	r16
    143c:	1f 93       	push	r17
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	c8 54       	subi	r28, 0x48	; 72
    1448:	d0 40       	sbci	r29, 0x00	; 0
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	cd bf       	out	0x3d, r28	; 61
    1454:	fe 01       	movw	r30, r28
    1456:	e9 5b       	subi	r30, 0xB9	; 185
    1458:	ff 4f       	sbci	r31, 0xFF	; 255
    145a:	91 83       	std	Z+1, r25	; 0x01
    145c:	80 83       	st	Z, r24
	 * Description : function setting passwords and check it from user
	 * Synchronous Function
	 * Input : one passwords strings
	 * Output: 0 (not match)  or 1 (match) (user repeated password enterence)
	 */
	uint8 idx1=0;/*for looping of first password entering*/
    145e:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8 idx2=0;/*for looping of second password entering*/
    1460:	1d 8e       	std	Y+29, r1	; 0x1d
	uint8 password_first[20]; /*first password entering*/
	uint8 password_second[20];/*second password entering*/
	LCD_displayString("enter new pass:"); /*take password from user */
    1462:	80 e6       	ldi	r24, 0x60	; 96
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	0e 94 c3 18 	call	0x3186	; 0x3186 <LCD_displayString>
	/*new line*/
	LCD_moveCursor(1,0);
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <LCD_moveCursor>
    1472:	a1 c0       	rjmp	.+322    	; 0x15b6 <PasswordSetting+0x17c>
	/*writing encoded characters in '*' form*/
	while(password_first[idx1-1] != '=')
	{
		/*take inputs for first time*/
		password_first[idx1]=KEYPAD_getPressedKey();
    1474:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1476:	08 2f       	mov	r16, r24
    1478:	10 e0       	ldi	r17, 0x00	; 0
    147a:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    147e:	28 2f       	mov	r18, r24
    1480:	ce 01       	movw	r24, r28
    1482:	4f 96       	adiw	r24, 0x1f	; 31
    1484:	fc 01       	movw	r30, r24
    1486:	e0 0f       	add	r30, r16
    1488:	f1 1f       	adc	r31, r17
    148a:	20 83       	st	Z, r18
		if((password_first[idx1]-'0') <= 9 && (password_first[idx1]-'0') >= 0)
    148c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	ce 01       	movw	r24, r28
    1494:	4f 96       	adiw	r24, 0x1f	; 31
    1496:	fc 01       	movw	r30, r24
    1498:	e2 0f       	add	r30, r18
    149a:	f3 1f       	adc	r31, r19
    149c:	80 81       	ld	r24, Z
    149e:	88 2f       	mov	r24, r24
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	c0 97       	sbiw	r24, 0x30	; 48
    14a4:	8a 30       	cpi	r24, 0x0A	; 10
    14a6:	91 05       	cpc	r25, r1
    14a8:	8c f4       	brge	.+34     	; 0x14cc <PasswordSetting+0x92>
    14aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	ce 01       	movw	r24, r28
    14b2:	4f 96       	adiw	r24, 0x1f	; 31
    14b4:	fc 01       	movw	r30, r24
    14b6:	e2 0f       	add	r30, r18
    14b8:	f3 1f       	adc	r31, r19
    14ba:	80 81       	ld	r24, Z
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	c0 97       	sbiw	r24, 0x30	; 48
    14c2:	99 23       	and	r25, r25
    14c4:	1c f0       	brlt	.+6      	; 0x14cc <PasswordSetting+0x92>
			LCD_displayCharacter('*');
    14c6:	8a e2       	ldi	r24, 0x2A	; 42
    14c8:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_displayCharacter>
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	aa e7       	ldi	r26, 0x7A	; 122
    14d2:	b5 e4       	ldi	r27, 0x45	; 69
    14d4:	89 8f       	std	Y+25, r24	; 0x19
    14d6:	9a 8f       	std	Y+26, r25	; 0x1a
    14d8:	ab 8f       	std	Y+27, r26	; 0x1b
    14da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14dc:	69 8d       	ldd	r22, Y+25	; 0x19
    14de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	4a e7       	ldi	r20, 0x7A	; 122
    14ea:	53 e4       	ldi	r21, 0x43	; 67
    14ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	8d 8b       	std	Y+21, r24	; 0x15
    14f6:	9e 8b       	std	Y+22, r25	; 0x16
    14f8:	af 8b       	std	Y+23, r26	; 0x17
    14fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14fc:	6d 89       	ldd	r22, Y+21	; 0x15
    14fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1500:	8f 89       	ldd	r24, Y+23	; 0x17
    1502:	98 8d       	ldd	r25, Y+24	; 0x18
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	40 e8       	ldi	r20, 0x80	; 128
    150a:	5f e3       	ldi	r21, 0x3F	; 63
    150c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1510:	88 23       	and	r24, r24
    1512:	2c f4       	brge	.+10     	; 0x151e <PasswordSetting+0xe4>
		__ticks = 1;
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	9c 8b       	std	Y+20, r25	; 0x14
    151a:	8b 8b       	std	Y+19, r24	; 0x13
    151c:	3f c0       	rjmp	.+126    	; 0x159c <PasswordSetting+0x162>
	else if (__tmp > 65535)
    151e:	6d 89       	ldd	r22, Y+21	; 0x15
    1520:	7e 89       	ldd	r23, Y+22	; 0x16
    1522:	8f 89       	ldd	r24, Y+23	; 0x17
    1524:	98 8d       	ldd	r25, Y+24	; 0x18
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	3f ef       	ldi	r19, 0xFF	; 255
    152a:	4f e7       	ldi	r20, 0x7F	; 127
    152c:	57 e4       	ldi	r21, 0x47	; 71
    152e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1532:	18 16       	cp	r1, r24
    1534:	4c f5       	brge	.+82     	; 0x1588 <PasswordSetting+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1536:	69 8d       	ldd	r22, Y+25	; 0x19
    1538:	7a 8d       	ldd	r23, Y+26	; 0x1a
    153a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    153c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e2       	ldi	r20, 0x20	; 32
    1544:	51 e4       	ldi	r21, 0x41	; 65
    1546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	bc 01       	movw	r22, r24
    1550:	cd 01       	movw	r24, r26
    1552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1556:	dc 01       	movw	r26, r24
    1558:	cb 01       	movw	r24, r22
    155a:	9c 8b       	std	Y+20, r25	; 0x14
    155c:	8b 8b       	std	Y+19, r24	; 0x13
    155e:	0f c0       	rjmp	.+30     	; 0x157e <PasswordSetting+0x144>
    1560:	89 e1       	ldi	r24, 0x19	; 25
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	9a 8b       	std	Y+18, r25	; 0x12
    1566:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1568:	89 89       	ldd	r24, Y+17	; 0x11
    156a:	9a 89       	ldd	r25, Y+18	; 0x12
    156c:	01 97       	sbiw	r24, 0x01	; 1
    156e:	f1 f7       	brne	.-4      	; 0x156c <PasswordSetting+0x132>
    1570:	9a 8b       	std	Y+18, r25	; 0x12
    1572:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1574:	8b 89       	ldd	r24, Y+19	; 0x13
    1576:	9c 89       	ldd	r25, Y+20	; 0x14
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	9c 8b       	std	Y+20, r25	; 0x14
    157c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157e:	8b 89       	ldd	r24, Y+19	; 0x13
    1580:	9c 89       	ldd	r25, Y+20	; 0x14
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	69 f7       	brne	.-38     	; 0x1560 <PasswordSetting+0x126>
    1586:	14 c0       	rjmp	.+40     	; 0x15b0 <PasswordSetting+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1588:	6d 89       	ldd	r22, Y+21	; 0x15
    158a:	7e 89       	ldd	r23, Y+22	; 0x16
    158c:	8f 89       	ldd	r24, Y+23	; 0x17
    158e:	98 8d       	ldd	r25, Y+24	; 0x18
    1590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	9c 8b       	std	Y+20, r25	; 0x14
    159a:	8b 8b       	std	Y+19, r24	; 0x13
    159c:	8b 89       	ldd	r24, Y+19	; 0x13
    159e:	9c 89       	ldd	r25, Y+20	; 0x14
    15a0:	98 8b       	std	Y+16, r25	; 0x10
    15a2:	8f 87       	std	Y+15, r24	; 0x0f
    15a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    15a6:	98 89       	ldd	r25, Y+16	; 0x10
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	f1 f7       	brne	.-4      	; 0x15a8 <PasswordSetting+0x16e>
    15ac:	98 8b       	std	Y+16, r25	; 0x10
    15ae:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(4000);/*delay for keypad*/
		idx1++; /*increment index*/
    15b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15b2:	8f 5f       	subi	r24, 0xFF	; 255
    15b4:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 password_second[20];/*second password entering*/
	LCD_displayString("enter new pass:"); /*take password from user */
	/*new line*/
	LCD_moveCursor(1,0);
	/*writing encoded characters in '*' form*/
	while(password_first[idx1-1] != '=')
    15b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15b8:	88 2f       	mov	r24, r24
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	9c 01       	movw	r18, r24
    15be:	21 50       	subi	r18, 0x01	; 1
    15c0:	30 40       	sbci	r19, 0x00	; 0
    15c2:	ce 01       	movw	r24, r28
    15c4:	4f 96       	adiw	r24, 0x1f	; 31
    15c6:	fc 01       	movw	r30, r24
    15c8:	e2 0f       	add	r30, r18
    15ca:	f3 1f       	adc	r31, r19
    15cc:	80 81       	ld	r24, Z
    15ce:	8d 33       	cpi	r24, 0x3D	; 61
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <PasswordSetting+0x19a>
    15d2:	50 cf       	rjmp	.-352    	; 0x1474 <PasswordSetting+0x3a>
		if((password_first[idx1]-'0') <= 9 && (password_first[idx1]-'0') >= 0)
			LCD_displayCharacter('*');
		_delay_ms(4000);/*delay for keypad*/
		idx1++; /*increment index*/
	}
	password_first[idx1]='#';/*for UART transmission*/
    15d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	ce 01       	movw	r24, r28
    15dc:	4f 96       	adiw	r24, 0x1f	; 31
    15de:	fc 01       	movw	r30, r24
    15e0:	e2 0f       	add	r30, r18
    15e2:	f3 1f       	adc	r31, r19
    15e4:	83 e2       	ldi	r24, 0x23	; 35
    15e6:	80 83       	st	Z, r24
	LCD_clearScreen(); /*clean the screen for second time*/
    15e8:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <LCD_clearScreen>
	LCD_displayString("Re-enter pass:");/*enter password again*/
    15ec:	80 e7       	ldi	r24, 0x70	; 112
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	0e 94 c3 18 	call	0x3186	; 0x3186 <LCD_displayString>
	LCD_moveCursor(1,0);/*new line*/
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	60 e0       	ldi	r22, 0x00	; 0
    15f8:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <LCD_moveCursor>
    15fc:	a1 c0       	rjmp	.+322    	; 0x1740 <PasswordSetting+0x306>
	/*take password and encode it for second time*/
	while(password_second[idx2-1] != '=')
	{
		password_second[idx2]=KEYPAD_getPressedKey();
    15fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1600:	08 2f       	mov	r16, r24
    1602:	10 e0       	ldi	r17, 0x00	; 0
    1604:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    1608:	28 2f       	mov	r18, r24
    160a:	ce 01       	movw	r24, r28
    160c:	c3 96       	adiw	r24, 0x33	; 51
    160e:	fc 01       	movw	r30, r24
    1610:	e0 0f       	add	r30, r16
    1612:	f1 1f       	adc	r31, r17
    1614:	20 83       	st	Z, r18
		if((password_second[idx2]-'0') <= 9 && (password_second[idx2]-'0') >= 0)
    1616:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	ce 01       	movw	r24, r28
    161e:	c3 96       	adiw	r24, 0x33	; 51
    1620:	fc 01       	movw	r30, r24
    1622:	e2 0f       	add	r30, r18
    1624:	f3 1f       	adc	r31, r19
    1626:	80 81       	ld	r24, Z
    1628:	88 2f       	mov	r24, r24
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	c0 97       	sbiw	r24, 0x30	; 48
    162e:	8a 30       	cpi	r24, 0x0A	; 10
    1630:	91 05       	cpc	r25, r1
    1632:	8c f4       	brge	.+34     	; 0x1656 <PasswordSetting+0x21c>
    1634:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	ce 01       	movw	r24, r28
    163c:	c3 96       	adiw	r24, 0x33	; 51
    163e:	fc 01       	movw	r30, r24
    1640:	e2 0f       	add	r30, r18
    1642:	f3 1f       	adc	r31, r19
    1644:	80 81       	ld	r24, Z
    1646:	88 2f       	mov	r24, r24
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	c0 97       	sbiw	r24, 0x30	; 48
    164c:	99 23       	and	r25, r25
    164e:	1c f0       	brlt	.+6      	; 0x1656 <PasswordSetting+0x21c>
			LCD_displayCharacter('*');
    1650:	8a e2       	ldi	r24, 0x2A	; 42
    1652:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_displayCharacter>
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	aa e7       	ldi	r26, 0x7A	; 122
    165c:	b5 e4       	ldi	r27, 0x45	; 69
    165e:	8b 87       	std	Y+11, r24	; 0x0b
    1660:	9c 87       	std	Y+12, r25	; 0x0c
    1662:	ad 87       	std	Y+13, r26	; 0x0d
    1664:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1666:	6b 85       	ldd	r22, Y+11	; 0x0b
    1668:	7c 85       	ldd	r23, Y+12	; 0x0c
    166a:	8d 85       	ldd	r24, Y+13	; 0x0d
    166c:	9e 85       	ldd	r25, Y+14	; 0x0e
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	4a e7       	ldi	r20, 0x7A	; 122
    1674:	53 e4       	ldi	r21, 0x43	; 67
    1676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	8f 83       	std	Y+7, r24	; 0x07
    1680:	98 87       	std	Y+8, r25	; 0x08
    1682:	a9 87       	std	Y+9, r26	; 0x09
    1684:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1686:	6f 81       	ldd	r22, Y+7	; 0x07
    1688:	78 85       	ldd	r23, Y+8	; 0x08
    168a:	89 85       	ldd	r24, Y+9	; 0x09
    168c:	9a 85       	ldd	r25, Y+10	; 0x0a
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e8       	ldi	r20, 0x80	; 128
    1694:	5f e3       	ldi	r21, 0x3F	; 63
    1696:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    169a:	88 23       	and	r24, r24
    169c:	2c f4       	brge	.+10     	; 0x16a8 <PasswordSetting+0x26e>
		__ticks = 1;
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	9e 83       	std	Y+6, r25	; 0x06
    16a4:	8d 83       	std	Y+5, r24	; 0x05
    16a6:	3f c0       	rjmp	.+126    	; 0x1726 <PasswordSetting+0x2ec>
	else if (__tmp > 65535)
    16a8:	6f 81       	ldd	r22, Y+7	; 0x07
    16aa:	78 85       	ldd	r23, Y+8	; 0x08
    16ac:	89 85       	ldd	r24, Y+9	; 0x09
    16ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	3f ef       	ldi	r19, 0xFF	; 255
    16b4:	4f e7       	ldi	r20, 0x7F	; 127
    16b6:	57 e4       	ldi	r21, 0x47	; 71
    16b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16bc:	18 16       	cp	r1, r24
    16be:	4c f5       	brge	.+82     	; 0x1712 <PasswordSetting+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	40 e2       	ldi	r20, 0x20	; 32
    16ce:	51 e4       	ldi	r21, 0x41	; 65
    16d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	bc 01       	movw	r22, r24
    16da:	cd 01       	movw	r24, r26
    16dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	9e 83       	std	Y+6, r25	; 0x06
    16e6:	8d 83       	std	Y+5, r24	; 0x05
    16e8:	0f c0       	rjmp	.+30     	; 0x1708 <PasswordSetting+0x2ce>
    16ea:	89 e1       	ldi	r24, 0x19	; 25
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	9c 83       	std	Y+4, r25	; 0x04
    16f0:	8b 83       	std	Y+3, r24	; 0x03
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	9c 81       	ldd	r25, Y+4	; 0x04
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <PasswordSetting+0x2bc>
    16fa:	9c 83       	std	Y+4, r25	; 0x04
    16fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1700:	9e 81       	ldd	r25, Y+6	; 0x06
    1702:	01 97       	sbiw	r24, 0x01	; 1
    1704:	9e 83       	std	Y+6, r25	; 0x06
    1706:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1708:	8d 81       	ldd	r24, Y+5	; 0x05
    170a:	9e 81       	ldd	r25, Y+6	; 0x06
    170c:	00 97       	sbiw	r24, 0x00	; 0
    170e:	69 f7       	brne	.-38     	; 0x16ea <PasswordSetting+0x2b0>
    1710:	14 c0       	rjmp	.+40     	; 0x173a <PasswordSetting+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1712:	6f 81       	ldd	r22, Y+7	; 0x07
    1714:	78 85       	ldd	r23, Y+8	; 0x08
    1716:	89 85       	ldd	r24, Y+9	; 0x09
    1718:	9a 85       	ldd	r25, Y+10	; 0x0a
    171a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	9e 83       	std	Y+6, r25	; 0x06
    1724:	8d 83       	std	Y+5, r24	; 0x05
    1726:	8d 81       	ldd	r24, Y+5	; 0x05
    1728:	9e 81       	ldd	r25, Y+6	; 0x06
    172a:	9a 83       	std	Y+2, r25	; 0x02
    172c:	89 83       	std	Y+1, r24	; 0x01
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	9a 81       	ldd	r25, Y+2	; 0x02
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	f1 f7       	brne	.-4      	; 0x1732 <PasswordSetting+0x2f8>
    1736:	9a 83       	std	Y+2, r25	; 0x02
    1738:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(4000);
		idx2++;
    173a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    173c:	8f 5f       	subi	r24, 0xFF	; 255
    173e:	8d 8f       	std	Y+29, r24	; 0x1d
	password_first[idx1]='#';/*for UART transmission*/
	LCD_clearScreen(); /*clean the screen for second time*/
	LCD_displayString("Re-enter pass:");/*enter password again*/
	LCD_moveCursor(1,0);/*new line*/
	/*take password and encode it for second time*/
	while(password_second[idx2-1] != '=')
    1740:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1742:	88 2f       	mov	r24, r24
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	9c 01       	movw	r18, r24
    1748:	21 50       	subi	r18, 0x01	; 1
    174a:	30 40       	sbci	r19, 0x00	; 0
    174c:	ce 01       	movw	r24, r28
    174e:	c3 96       	adiw	r24, 0x33	; 51
    1750:	fc 01       	movw	r30, r24
    1752:	e2 0f       	add	r30, r18
    1754:	f3 1f       	adc	r31, r19
    1756:	80 81       	ld	r24, Z
    1758:	8d 33       	cpi	r24, 0x3D	; 61
    175a:	09 f0       	breq	.+2      	; 0x175e <PasswordSetting+0x324>
    175c:	50 cf       	rjmp	.-352    	; 0x15fe <PasswordSetting+0x1c4>
		if((password_second[idx2]-'0') <= 9 && (password_second[idx2]-'0') >= 0)
			LCD_displayCharacter('*');
		_delay_ms(4000);
		idx2++;
	}
	strcpy(pass,password_first);/*store password to send it to control MC*/
    175e:	fe 01       	movw	r30, r28
    1760:	e9 5b       	subi	r30, 0xB9	; 185
    1762:	ff 4f       	sbci	r31, 0xFF	; 255
    1764:	80 81       	ld	r24, Z
    1766:	91 81       	ldd	r25, Z+1	; 0x01
    1768:	9e 01       	movw	r18, r28
    176a:	21 5e       	subi	r18, 0xE1	; 225
    176c:	3f 4f       	sbci	r19, 0xFF	; 255
    176e:	b9 01       	movw	r22, r18
    1770:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <strcpy>
	return IfMatch(password_first,password_second);/*check if password entered correctly or not*/
    1774:	ce 01       	movw	r24, r28
    1776:	4f 96       	adiw	r24, 0x1f	; 31
    1778:	9e 01       	movw	r18, r28
    177a:	2d 5c       	subi	r18, 0xCD	; 205
    177c:	3f 4f       	sbci	r19, 0xFF	; 255
    177e:	b9 01       	movw	r22, r18
    1780:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <IfMatch>
}
    1784:	c8 5b       	subi	r28, 0xB8	; 184
    1786:	df 4f       	sbci	r29, 0xFF	; 255
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	f8 94       	cli
    178c:	de bf       	out	0x3e, r29	; 62
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	cd bf       	out	0x3d, r28	; 61
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	08 95       	ret

0000179c <Main_Options>:
uint8 Main_Options()
{
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	2f 97       	sbiw	r28, 0x0f	; 15
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	f8 94       	cli
    17aa:	de bf       	out	0x3e, r29	; 62
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	cd bf       	out	0x3d, r28	; 61
	 * Description : function display and get the main option
	 * Synchronous Function
	 * Input : void
	 * Output: uint8 option (+ / -)
	 */
	uint8 option =0; /*to stor the input option*/
    17b0:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_displayString("+ :Open the door");/*open the door*/
    17b2:	8f e7       	ldi	r24, 0x7F	; 127
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	0e 94 c3 18 	call	0x3186	; 0x3186 <LCD_displayString>
	LCD_moveCursor(1,0);/*new line*/
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	60 e0       	ldi	r22, 0x00	; 0
    17be:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <LCD_moveCursor>
	LCD_displayString("- :Change Pass    ");/*change the password*/
    17c2:	80 e9       	ldi	r24, 0x90	; 144
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	0e 94 c3 18 	call	0x3186	; 0x3186 <LCD_displayString>
	option = KEYPAD_getPressedKey();/*get the input option*/
    17ca:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    17ce:	8f 87       	std	Y+15, r24	; 0x0f
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	aa e7       	ldi	r26, 0x7A	; 122
    17d6:	b5 e4       	ldi	r27, 0x45	; 69
    17d8:	8b 87       	std	Y+11, r24	; 0x0b
    17da:	9c 87       	std	Y+12, r25	; 0x0c
    17dc:	ad 87       	std	Y+13, r26	; 0x0d
    17de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	4a e7       	ldi	r20, 0x7A	; 122
    17ee:	53 e4       	ldi	r21, 0x43	; 67
    17f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	8f 83       	std	Y+7, r24	; 0x07
    17fa:	98 87       	std	Y+8, r25	; 0x08
    17fc:	a9 87       	std	Y+9, r26	; 0x09
    17fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1800:	6f 81       	ldd	r22, Y+7	; 0x07
    1802:	78 85       	ldd	r23, Y+8	; 0x08
    1804:	89 85       	ldd	r24, Y+9	; 0x09
    1806:	9a 85       	ldd	r25, Y+10	; 0x0a
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	40 e8       	ldi	r20, 0x80	; 128
    180e:	5f e3       	ldi	r21, 0x3F	; 63
    1810:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1814:	88 23       	and	r24, r24
    1816:	2c f4       	brge	.+10     	; 0x1822 <Main_Options+0x86>
		__ticks = 1;
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	9e 83       	std	Y+6, r25	; 0x06
    181e:	8d 83       	std	Y+5, r24	; 0x05
    1820:	3f c0       	rjmp	.+126    	; 0x18a0 <Main_Options+0x104>
	else if (__tmp > 65535)
    1822:	6f 81       	ldd	r22, Y+7	; 0x07
    1824:	78 85       	ldd	r23, Y+8	; 0x08
    1826:	89 85       	ldd	r24, Y+9	; 0x09
    1828:	9a 85       	ldd	r25, Y+10	; 0x0a
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	3f ef       	ldi	r19, 0xFF	; 255
    182e:	4f e7       	ldi	r20, 0x7F	; 127
    1830:	57 e4       	ldi	r21, 0x47	; 71
    1832:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1836:	18 16       	cp	r1, r24
    1838:	4c f5       	brge	.+82     	; 0x188c <Main_Options+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183a:	6b 85       	ldd	r22, Y+11	; 0x0b
    183c:	7c 85       	ldd	r23, Y+12	; 0x0c
    183e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1840:	9e 85       	ldd	r25, Y+14	; 0x0e
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e2       	ldi	r20, 0x20	; 32
    1848:	51 e4       	ldi	r21, 0x41	; 65
    184a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	bc 01       	movw	r22, r24
    1854:	cd 01       	movw	r24, r26
    1856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	9e 83       	std	Y+6, r25	; 0x06
    1860:	8d 83       	std	Y+5, r24	; 0x05
    1862:	0f c0       	rjmp	.+30     	; 0x1882 <Main_Options+0xe6>
    1864:	89 e1       	ldi	r24, 0x19	; 25
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	9c 83       	std	Y+4, r25	; 0x04
    186a:	8b 83       	std	Y+3, r24	; 0x03
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	9c 81       	ldd	r25, Y+4	; 0x04
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	f1 f7       	brne	.-4      	; 0x1870 <Main_Options+0xd4>
    1874:	9c 83       	std	Y+4, r25	; 0x04
    1876:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1878:	8d 81       	ldd	r24, Y+5	; 0x05
    187a:	9e 81       	ldd	r25, Y+6	; 0x06
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	9e 83       	std	Y+6, r25	; 0x06
    1880:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1882:	8d 81       	ldd	r24, Y+5	; 0x05
    1884:	9e 81       	ldd	r25, Y+6	; 0x06
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	69 f7       	brne	.-38     	; 0x1864 <Main_Options+0xc8>
    188a:	14 c0       	rjmp	.+40     	; 0x18b4 <Main_Options+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188c:	6f 81       	ldd	r22, Y+7	; 0x07
    188e:	78 85       	ldd	r23, Y+8	; 0x08
    1890:	89 85       	ldd	r24, Y+9	; 0x09
    1892:	9a 85       	ldd	r25, Y+10	; 0x0a
    1894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	9e 83       	std	Y+6, r25	; 0x06
    189e:	8d 83       	std	Y+5, r24	; 0x05
    18a0:	8d 81       	ldd	r24, Y+5	; 0x05
    18a2:	9e 81       	ldd	r25, Y+6	; 0x06
    18a4:	9a 83       	std	Y+2, r25	; 0x02
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	9a 81       	ldd	r25, Y+2	; 0x02
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	f1 f7       	brne	.-4      	; 0x18ac <Main_Options+0x110>
    18b0:	9a 83       	std	Y+2, r25	; 0x02
    18b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4000);/*delay for keypad*/
	return option;
    18b4:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    18b6:	2f 96       	adiw	r28, 0x0f	; 15
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	de bf       	out	0x3e, r29	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	cd bf       	out	0x3d, r28	; 61
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	08 95       	ret

000018c8 <Enter_Password>:
void Enter_Password(uint8* password)
{
    18c8:	0f 93       	push	r16
    18ca:	1f 93       	push	r17
    18cc:	df 93       	push	r29
    18ce:	cf 93       	push	r28
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
    18d4:	61 97       	sbiw	r28, 0x11	; 17
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	f8 94       	cli
    18da:	de bf       	out	0x3e, r29	; 62
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	cd bf       	out	0x3d, r28	; 61
    18e0:	99 8b       	std	Y+17, r25	; 0x11
    18e2:	88 8b       	std	Y+16, r24	; 0x10
	 * Description : function handle password entering
	 * Asynchronous Function
	 * Input : one passwords strings
	 * Output: void
	 */
	uint8 idx=0;/*looping on password entering and encoding*/
    18e4:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_displayString("enter pass:");/*ask  for password entering*/
    18e6:	83 ea       	ldi	r24, 0xA3	; 163
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	0e 94 c3 18 	call	0x3186	; 0x3186 <LCD_displayString>
	LCD_moveCursor(1,0);/*new line*/
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <LCD_moveCursor>
    18f6:	a1 c0       	rjmp	.+322    	; 0x1a3a <Enter_Password+0x172>
	/*take the password from user*/
	while(password[idx-1] != '=')
	{
		password[idx]=KEYPAD_getPressedKey();
    18f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	88 89       	ldd	r24, Y+16	; 0x10
    1900:	99 89       	ldd	r25, Y+17	; 0x11
    1902:	8c 01       	movw	r16, r24
    1904:	02 0f       	add	r16, r18
    1906:	13 1f       	adc	r17, r19
    1908:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    190c:	f8 01       	movw	r30, r16
    190e:	80 83       	st	Z, r24
		if((password[idx]-'0') <= 9 && (password[idx]-'0') >= 0)
    1910:	8f 85       	ldd	r24, Y+15	; 0x0f
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	88 89       	ldd	r24, Y+16	; 0x10
    1918:	99 89       	ldd	r25, Y+17	; 0x11
    191a:	fc 01       	movw	r30, r24
    191c:	e2 0f       	add	r30, r18
    191e:	f3 1f       	adc	r31, r19
    1920:	80 81       	ld	r24, Z
    1922:	88 2f       	mov	r24, r24
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	c0 97       	sbiw	r24, 0x30	; 48
    1928:	8a 30       	cpi	r24, 0x0A	; 10
    192a:	91 05       	cpc	r25, r1
    192c:	8c f4       	brge	.+34     	; 0x1950 <Enter_Password+0x88>
    192e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	88 89       	ldd	r24, Y+16	; 0x10
    1936:	99 89       	ldd	r25, Y+17	; 0x11
    1938:	fc 01       	movw	r30, r24
    193a:	e2 0f       	add	r30, r18
    193c:	f3 1f       	adc	r31, r19
    193e:	80 81       	ld	r24, Z
    1940:	88 2f       	mov	r24, r24
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	c0 97       	sbiw	r24, 0x30	; 48
    1946:	99 23       	and	r25, r25
    1948:	1c f0       	brlt	.+6      	; 0x1950 <Enter_Password+0x88>
			LCD_displayCharacter('*');
    194a:	8a e2       	ldi	r24, 0x2A	; 42
    194c:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_displayCharacter>
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	aa e7       	ldi	r26, 0x7A	; 122
    1956:	b5 e4       	ldi	r27, 0x45	; 69
    1958:	8b 87       	std	Y+11, r24	; 0x0b
    195a:	9c 87       	std	Y+12, r25	; 0x0c
    195c:	ad 87       	std	Y+13, r26	; 0x0d
    195e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1960:	6b 85       	ldd	r22, Y+11	; 0x0b
    1962:	7c 85       	ldd	r23, Y+12	; 0x0c
    1964:	8d 85       	ldd	r24, Y+13	; 0x0d
    1966:	9e 85       	ldd	r25, Y+14	; 0x0e
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	4a e7       	ldi	r20, 0x7A	; 122
    196e:	53 e4       	ldi	r21, 0x43	; 67
    1970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	8f 83       	std	Y+7, r24	; 0x07
    197a:	98 87       	std	Y+8, r25	; 0x08
    197c:	a9 87       	std	Y+9, r26	; 0x09
    197e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1980:	6f 81       	ldd	r22, Y+7	; 0x07
    1982:	78 85       	ldd	r23, Y+8	; 0x08
    1984:	89 85       	ldd	r24, Y+9	; 0x09
    1986:	9a 85       	ldd	r25, Y+10	; 0x0a
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e8       	ldi	r20, 0x80	; 128
    198e:	5f e3       	ldi	r21, 0x3F	; 63
    1990:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1994:	88 23       	and	r24, r24
    1996:	2c f4       	brge	.+10     	; 0x19a2 <Enter_Password+0xda>
		__ticks = 1;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	9e 83       	std	Y+6, r25	; 0x06
    199e:	8d 83       	std	Y+5, r24	; 0x05
    19a0:	3f c0       	rjmp	.+126    	; 0x1a20 <Enter_Password+0x158>
	else if (__tmp > 65535)
    19a2:	6f 81       	ldd	r22, Y+7	; 0x07
    19a4:	78 85       	ldd	r23, Y+8	; 0x08
    19a6:	89 85       	ldd	r24, Y+9	; 0x09
    19a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	3f ef       	ldi	r19, 0xFF	; 255
    19ae:	4f e7       	ldi	r20, 0x7F	; 127
    19b0:	57 e4       	ldi	r21, 0x47	; 71
    19b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b6:	18 16       	cp	r1, r24
    19b8:	4c f5       	brge	.+82     	; 0x1a0c <Enter_Password+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    19bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    19be:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	40 e2       	ldi	r20, 0x20	; 32
    19c8:	51 e4       	ldi	r21, 0x41	; 65
    19ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	bc 01       	movw	r22, r24
    19d4:	cd 01       	movw	r24, r26
    19d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	9e 83       	std	Y+6, r25	; 0x06
    19e0:	8d 83       	std	Y+5, r24	; 0x05
    19e2:	0f c0       	rjmp	.+30     	; 0x1a02 <Enter_Password+0x13a>
    19e4:	89 e1       	ldi	r24, 0x19	; 25
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	9c 83       	std	Y+4, r25	; 0x04
    19ea:	8b 83       	std	Y+3, r24	; 0x03
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	f1 f7       	brne	.-4      	; 0x19f0 <Enter_Password+0x128>
    19f4:	9c 83       	std	Y+4, r25	; 0x04
    19f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f8:	8d 81       	ldd	r24, Y+5	; 0x05
    19fa:	9e 81       	ldd	r25, Y+6	; 0x06
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	9e 83       	std	Y+6, r25	; 0x06
    1a00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a02:	8d 81       	ldd	r24, Y+5	; 0x05
    1a04:	9e 81       	ldd	r25, Y+6	; 0x06
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	69 f7       	brne	.-38     	; 0x19e4 <Enter_Password+0x11c>
    1a0a:	14 c0       	rjmp	.+40     	; 0x1a34 <Enter_Password+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0e:	78 85       	ldd	r23, Y+8	; 0x08
    1a10:	89 85       	ldd	r24, Y+9	; 0x09
    1a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	9e 83       	std	Y+6, r25	; 0x06
    1a1e:	8d 83       	std	Y+5, r24	; 0x05
    1a20:	8d 81       	ldd	r24, Y+5	; 0x05
    1a22:	9e 81       	ldd	r25, Y+6	; 0x06
    1a24:	9a 83       	std	Y+2, r25	; 0x02
    1a26:	89 83       	std	Y+1, r24	; 0x01
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	f1 f7       	brne	.-4      	; 0x1a2c <Enter_Password+0x164>
    1a30:	9a 83       	std	Y+2, r25	; 0x02
    1a32:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(4000);
		idx++;
    1a34:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a36:	8f 5f       	subi	r24, 0xFF	; 255
    1a38:	8f 87       	std	Y+15, r24	; 0x0f
	 */
	uint8 idx=0;/*looping on password entering and encoding*/
	LCD_displayString("enter pass:");/*ask  for password entering*/
	LCD_moveCursor(1,0);/*new line*/
	/*take the password from user*/
	while(password[idx-1] != '=')
    1a3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a3c:	88 2f       	mov	r24, r24
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	9c 01       	movw	r18, r24
    1a42:	21 50       	subi	r18, 0x01	; 1
    1a44:	30 40       	sbci	r19, 0x00	; 0
    1a46:	88 89       	ldd	r24, Y+16	; 0x10
    1a48:	99 89       	ldd	r25, Y+17	; 0x11
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	e2 0f       	add	r30, r18
    1a4e:	f3 1f       	adc	r31, r19
    1a50:	80 81       	ld	r24, Z
    1a52:	8d 33       	cpi	r24, 0x3D	; 61
    1a54:	09 f0       	breq	.+2      	; 0x1a58 <Enter_Password+0x190>
    1a56:	50 cf       	rjmp	.-352    	; 0x18f8 <Enter_Password+0x30>
		if((password[idx]-'0') <= 9 && (password[idx]-'0') >= 0)
			LCD_displayCharacter('*');
		_delay_ms(4000);
		idx++;
	}
	password[idx]='#';/*for UART transmission*/
    1a58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	88 89       	ldd	r24, Y+16	; 0x10
    1a60:	99 89       	ldd	r25, Y+17	; 0x11
    1a62:	fc 01       	movw	r30, r24
    1a64:	e2 0f       	add	r30, r18
    1a66:	f3 1f       	adc	r31, r19
    1a68:	83 e2       	ldi	r24, 0x23	; 35
    1a6a:	80 83       	st	Z, r24
	LCD_clearScreen();
    1a6c:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <LCD_clearScreen>
}
    1a70:	61 96       	adiw	r28, 0x11	; 17
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	de bf       	out	0x3e, r29	; 62
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	cd bf       	out	0x3d, r28	; 61
    1a7c:	cf 91       	pop	r28
    1a7e:	df 91       	pop	r29
    1a80:	1f 91       	pop	r17
    1a82:	0f 91       	pop	r16
    1a84:	08 95       	ret

00001a86 <Buzzer_Stop>:
void Buzzer_Stop()
{
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
	 * Description : CallBack function for Error in case 3 times wrong passwords
	 * Asynchronous Function
	 * Input : Void
	 * Output: Void
	 */
	g_buzzerticks++; /*Counting ticks for 1 min Error displaying time calculations*/
    1a8e:	80 91 d7 00 	lds	r24, 0x00D7
    1a92:	8f 5f       	subi	r24, 0xFF	; 255
    1a94:	80 93 d7 00 	sts	0x00D7, r24
	if(g_buzzerticks == 8)
    1a98:	80 91 d7 00 	lds	r24, 0x00D7
    1a9c:	88 30       	cpi	r24, 0x08	; 8
    1a9e:	39 f4       	brne	.+14     	; 0x1aae <Buzzer_Stop+0x28>
	{
		g_buzzerflag=0;/*reset flag for loop termination*/
    1aa0:	10 92 d6 00 	sts	0x00D6, r1
		g_buzzerticks=0;/*reset ticks counter*/
    1aa4:	10 92 d7 00 	sts	0x00D7, r1
		TIMER_Deinit(timer1);/*reset timer for another usage*/
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <TIMER_Deinit>
	}

}
    1aae:	cf 91       	pop	r28
    1ab0:	df 91       	pop	r29
    1ab2:	08 95       	ret

00001ab4 <Change_Pass>:
void Change_Pass(uint8 flag)
{
    1ab4:	df 93       	push	r29
    1ab6:	cf 93       	push	r28
    1ab8:	cd b7       	in	r28, 0x3d	; 61
    1aba:	de b7       	in	r29, 0x3e	; 62
    1abc:	c6 56       	subi	r28, 0x66	; 102
    1abe:	d0 40       	sbci	r29, 0x00	; 0
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	cd bf       	out	0x3d, r28	; 61
    1aca:	fe 01       	movw	r30, r28
    1acc:	ef 59       	subi	r30, 0x9F	; 159
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	80 83       	st	Z, r24
	 * Synchronous Function
	 * Input : Void
	 * Output: Void
	 */
	uint8 error; /*to store wrong password times received from control MC*/
	uint8 match=0;/*for store if matching or not*/
    1ad2:	19 ae       	std	Y+57, r1	; 0x39
	uint8 entered_pass[15];/*to store entered password*/
	uint8 password_real[15];/*to store new password*/
	error = UART_receiveByte(); /*receive the wrong password times */
    1ad4:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <UART_receiveByte>
    1ad8:	8a af       	std	Y+58, r24	; 0x3a
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	a8 e4       	ldi	r26, 0x48	; 72
    1ae0:	b3 e4       	ldi	r27, 0x43	; 67
    1ae2:	8d ab       	std	Y+53, r24	; 0x35
    1ae4:	9e ab       	std	Y+54, r25	; 0x36
    1ae6:	af ab       	std	Y+55, r26	; 0x37
    1ae8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aea:	6d a9       	ldd	r22, Y+53	; 0x35
    1aec:	7e a9       	ldd	r23, Y+54	; 0x36
    1aee:	8f a9       	ldd	r24, Y+55	; 0x37
    1af0:	98 ad       	ldd	r25, Y+56	; 0x38
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	4a e7       	ldi	r20, 0x7A	; 122
    1af8:	53 e4       	ldi	r21, 0x43	; 67
    1afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	89 ab       	std	Y+49, r24	; 0x31
    1b04:	9a ab       	std	Y+50, r25	; 0x32
    1b06:	ab ab       	std	Y+51, r26	; 0x33
    1b08:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b10:	9c a9       	ldd	r25, Y+52	; 0x34
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	40 e8       	ldi	r20, 0x80	; 128
    1b18:	5f e3       	ldi	r21, 0x3F	; 63
    1b1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b1e:	88 23       	and	r24, r24
    1b20:	2c f4       	brge	.+10     	; 0x1b2c <Change_Pass+0x78>
		__ticks = 1;
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	98 ab       	std	Y+48, r25	; 0x30
    1b28:	8f a7       	std	Y+47, r24	; 0x2f
    1b2a:	3f c0       	rjmp	.+126    	; 0x1baa <Change_Pass+0xf6>
	else if (__tmp > 65535)
    1b2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1b30:	8b a9       	ldd	r24, Y+51	; 0x33
    1b32:	9c a9       	ldd	r25, Y+52	; 0x34
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	3f ef       	ldi	r19, 0xFF	; 255
    1b38:	4f e7       	ldi	r20, 0x7F	; 127
    1b3a:	57 e4       	ldi	r21, 0x47	; 71
    1b3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b40:	18 16       	cp	r1, r24
    1b42:	4c f5       	brge	.+82     	; 0x1b96 <Change_Pass+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b44:	6d a9       	ldd	r22, Y+53	; 0x35
    1b46:	7e a9       	ldd	r23, Y+54	; 0x36
    1b48:	8f a9       	ldd	r24, Y+55	; 0x37
    1b4a:	98 ad       	ldd	r25, Y+56	; 0x38
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	40 e2       	ldi	r20, 0x20	; 32
    1b52:	51 e4       	ldi	r21, 0x41	; 65
    1b54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	bc 01       	movw	r22, r24
    1b5e:	cd 01       	movw	r24, r26
    1b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	98 ab       	std	Y+48, r25	; 0x30
    1b6a:	8f a7       	std	Y+47, r24	; 0x2f
    1b6c:	0f c0       	rjmp	.+30     	; 0x1b8c <Change_Pass+0xd8>
    1b6e:	89 e1       	ldi	r24, 0x19	; 25
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	9e a7       	std	Y+46, r25	; 0x2e
    1b74:	8d a7       	std	Y+45, r24	; 0x2d
    1b76:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b78:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	f1 f7       	brne	.-4      	; 0x1b7a <Change_Pass+0xc6>
    1b7e:	9e a7       	std	Y+46, r25	; 0x2e
    1b80:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b84:	98 a9       	ldd	r25, Y+48	; 0x30
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	98 ab       	std	Y+48, r25	; 0x30
    1b8a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b90:	00 97       	sbiw	r24, 0x00	; 0
    1b92:	69 f7       	brne	.-38     	; 0x1b6e <Change_Pass+0xba>
    1b94:	14 c0       	rjmp	.+40     	; 0x1bbe <Change_Pass+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b96:	69 a9       	ldd	r22, Y+49	; 0x31
    1b98:	7a a9       	ldd	r23, Y+50	; 0x32
    1b9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1b9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	98 ab       	std	Y+48, r25	; 0x30
    1ba8:	8f a7       	std	Y+47, r24	; 0x2f
    1baa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bac:	98 a9       	ldd	r25, Y+48	; 0x30
    1bae:	9c a7       	std	Y+44, r25	; 0x2c
    1bb0:	8b a7       	std	Y+43, r24	; 0x2b
    1bb2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bb4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	f1 f7       	brne	.-4      	; 0x1bb6 <Change_Pass+0x102>
    1bba:	9c a7       	std	Y+44, r25	; 0x2c
    1bbc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(200); /*delay for receiving from UART*/
	LCD_clearScreen();
    1bbe:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <LCD_clearScreen>
	Enter_Password(entered_pass);/*taking the password*/
    1bc2:	ce 01       	movw	r24, r28
    1bc4:	cb 96       	adiw	r24, 0x3b	; 59
    1bc6:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <Enter_Password>
	UART_sendString(entered_pass);/*sending it */
    1bca:	ce 01       	movw	r24, r28
    1bcc:	cb 96       	adiw	r24, 0x3b	; 59
    1bce:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <UART_sendString>
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	aa ef       	ldi	r26, 0xFA	; 250
    1bd8:	b4 e4       	ldi	r27, 0x44	; 68
    1bda:	8f a3       	std	Y+39, r24	; 0x27
    1bdc:	98 a7       	std	Y+40, r25	; 0x28
    1bde:	a9 a7       	std	Y+41, r26	; 0x29
    1be0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be2:	6f a1       	ldd	r22, Y+39	; 0x27
    1be4:	78 a5       	ldd	r23, Y+40	; 0x28
    1be6:	89 a5       	ldd	r24, Y+41	; 0x29
    1be8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	4a e7       	ldi	r20, 0x7A	; 122
    1bf0:	53 e4       	ldi	r21, 0x43	; 67
    1bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	8b a3       	std	Y+35, r24	; 0x23
    1bfc:	9c a3       	std	Y+36, r25	; 0x24
    1bfe:	ad a3       	std	Y+37, r26	; 0x25
    1c00:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c02:	6b a1       	ldd	r22, Y+35	; 0x23
    1c04:	7c a1       	ldd	r23, Y+36	; 0x24
    1c06:	8d a1       	ldd	r24, Y+37	; 0x25
    1c08:	9e a1       	ldd	r25, Y+38	; 0x26
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 e8       	ldi	r20, 0x80	; 128
    1c10:	5f e3       	ldi	r21, 0x3F	; 63
    1c12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c16:	88 23       	and	r24, r24
    1c18:	2c f4       	brge	.+10     	; 0x1c24 <Change_Pass+0x170>
		__ticks = 1;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	9a a3       	std	Y+34, r25	; 0x22
    1c20:	89 a3       	std	Y+33, r24	; 0x21
    1c22:	3f c0       	rjmp	.+126    	; 0x1ca2 <Change_Pass+0x1ee>
	else if (__tmp > 65535)
    1c24:	6b a1       	ldd	r22, Y+35	; 0x23
    1c26:	7c a1       	ldd	r23, Y+36	; 0x24
    1c28:	8d a1       	ldd	r24, Y+37	; 0x25
    1c2a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	3f ef       	ldi	r19, 0xFF	; 255
    1c30:	4f e7       	ldi	r20, 0x7F	; 127
    1c32:	57 e4       	ldi	r21, 0x47	; 71
    1c34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c38:	18 16       	cp	r1, r24
    1c3a:	4c f5       	brge	.+82     	; 0x1c8e <Change_Pass+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3c:	6f a1       	ldd	r22, Y+39	; 0x27
    1c3e:	78 a5       	ldd	r23, Y+40	; 0x28
    1c40:	89 a5       	ldd	r24, Y+41	; 0x29
    1c42:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	40 e2       	ldi	r20, 0x20	; 32
    1c4a:	51 e4       	ldi	r21, 0x41	; 65
    1c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	bc 01       	movw	r22, r24
    1c56:	cd 01       	movw	r24, r26
    1c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	9a a3       	std	Y+34, r25	; 0x22
    1c62:	89 a3       	std	Y+33, r24	; 0x21
    1c64:	0f c0       	rjmp	.+30     	; 0x1c84 <Change_Pass+0x1d0>
    1c66:	89 e1       	ldi	r24, 0x19	; 25
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	98 a3       	std	Y+32, r25	; 0x20
    1c6c:	8f 8f       	std	Y+31, r24	; 0x1f
    1c6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c70:	98 a1       	ldd	r25, Y+32	; 0x20
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	f1 f7       	brne	.-4      	; 0x1c72 <Change_Pass+0x1be>
    1c76:	98 a3       	std	Y+32, r25	; 0x20
    1c78:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	9a a3       	std	Y+34, r25	; 0x22
    1c82:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c84:	89 a1       	ldd	r24, Y+33	; 0x21
    1c86:	9a a1       	ldd	r25, Y+34	; 0x22
    1c88:	00 97       	sbiw	r24, 0x00	; 0
    1c8a:	69 f7       	brne	.-38     	; 0x1c66 <Change_Pass+0x1b2>
    1c8c:	14 c0       	rjmp	.+40     	; 0x1cb6 <Change_Pass+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c8e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c90:	7c a1       	ldd	r23, Y+36	; 0x24
    1c92:	8d a1       	ldd	r24, Y+37	; 0x25
    1c94:	9e a1       	ldd	r25, Y+38	; 0x26
    1c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	9a a3       	std	Y+34, r25	; 0x22
    1ca0:	89 a3       	std	Y+33, r24	; 0x21
    1ca2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ca4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ca6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ca8:	8d 8f       	std	Y+29, r24	; 0x1d
    1caa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <Change_Pass+0x1fa>
    1cb2:	9e 8f       	std	Y+30, r25	; 0x1e
    1cb4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2000); /*delay for UART transmission*/
	match = UART_receiveByte(); /*recieve if match the or not from control MC*/
    1cb6:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <UART_receiveByte>
    1cba:	89 af       	std	Y+57, r24	; 0x39
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	aa ef       	ldi	r26, 0xFA	; 250
    1cc2:	b3 e4       	ldi	r27, 0x43	; 67
    1cc4:	89 8f       	std	Y+25, r24	; 0x19
    1cc6:	9a 8f       	std	Y+26, r25	; 0x1a
    1cc8:	ab 8f       	std	Y+27, r26	; 0x1b
    1cca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ccc:	69 8d       	ldd	r22, Y+25	; 0x19
    1cce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	4a e7       	ldi	r20, 0x7A	; 122
    1cda:	53 e4       	ldi	r21, 0x43	; 67
    1cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	8d 8b       	std	Y+21, r24	; 0x15
    1ce6:	9e 8b       	std	Y+22, r25	; 0x16
    1ce8:	af 8b       	std	Y+23, r26	; 0x17
    1cea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cec:	6d 89       	ldd	r22, Y+21	; 0x15
    1cee:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf0:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf2:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e8       	ldi	r20, 0x80	; 128
    1cfa:	5f e3       	ldi	r21, 0x3F	; 63
    1cfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d00:	88 23       	and	r24, r24
    1d02:	2c f4       	brge	.+10     	; 0x1d0e <Change_Pass+0x25a>
		__ticks = 1;
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	9c 8b       	std	Y+20, r25	; 0x14
    1d0a:	8b 8b       	std	Y+19, r24	; 0x13
    1d0c:	3f c0       	rjmp	.+126    	; 0x1d8c <Change_Pass+0x2d8>
	else if (__tmp > 65535)
    1d0e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d10:	7e 89       	ldd	r23, Y+22	; 0x16
    1d12:	8f 89       	ldd	r24, Y+23	; 0x17
    1d14:	98 8d       	ldd	r25, Y+24	; 0x18
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	3f ef       	ldi	r19, 0xFF	; 255
    1d1a:	4f e7       	ldi	r20, 0x7F	; 127
    1d1c:	57 e4       	ldi	r21, 0x47	; 71
    1d1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d22:	18 16       	cp	r1, r24
    1d24:	4c f5       	brge	.+82     	; 0x1d78 <Change_Pass+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d26:	69 8d       	ldd	r22, Y+25	; 0x19
    1d28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	40 e2       	ldi	r20, 0x20	; 32
    1d34:	51 e4       	ldi	r21, 0x41	; 65
    1d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	bc 01       	movw	r22, r24
    1d40:	cd 01       	movw	r24, r26
    1d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	9c 8b       	std	Y+20, r25	; 0x14
    1d4c:	8b 8b       	std	Y+19, r24	; 0x13
    1d4e:	0f c0       	rjmp	.+30     	; 0x1d6e <Change_Pass+0x2ba>
    1d50:	89 e1       	ldi	r24, 0x19	; 25
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	9a 8b       	std	Y+18, r25	; 0x12
    1d56:	89 8b       	std	Y+17, r24	; 0x11
    1d58:	89 89       	ldd	r24, Y+17	; 0x11
    1d5a:	9a 89       	ldd	r25, Y+18	; 0x12
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	f1 f7       	brne	.-4      	; 0x1d5c <Change_Pass+0x2a8>
    1d60:	9a 8b       	std	Y+18, r25	; 0x12
    1d62:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d64:	8b 89       	ldd	r24, Y+19	; 0x13
    1d66:	9c 89       	ldd	r25, Y+20	; 0x14
    1d68:	01 97       	sbiw	r24, 0x01	; 1
    1d6a:	9c 8b       	std	Y+20, r25	; 0x14
    1d6c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d70:	9c 89       	ldd	r25, Y+20	; 0x14
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	69 f7       	brne	.-38     	; 0x1d50 <Change_Pass+0x29c>
    1d76:	14 c0       	rjmp	.+40     	; 0x1da0 <Change_Pass+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d78:	6d 89       	ldd	r22, Y+21	; 0x15
    1d7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	9c 8b       	std	Y+20, r25	; 0x14
    1d8a:	8b 8b       	std	Y+19, r24	; 0x13
    1d8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d90:	98 8b       	std	Y+16, r25	; 0x10
    1d92:	8f 87       	std	Y+15, r24	; 0x0f
    1d94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d96:	98 89       	ldd	r25, Y+16	; 0x10
    1d98:	01 97       	sbiw	r24, 0x01	; 1
    1d9a:	f1 f7       	brne	.-4      	; 0x1d98 <Change_Pass+0x2e4>
    1d9c:	98 8b       	std	Y+16, r25	; 0x10
    1d9e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	if(match == 1)
    1da0:	89 ad       	ldd	r24, Y+57	; 0x39
    1da2:	81 30       	cpi	r24, 0x01	; 1
    1da4:	a9 f4       	brne	.+42     	; 0x1dd0 <Change_Pass+0x31c>
	{
		/*if match do the change*/
		if(PasswordSetting(password_real))
    1da6:	ce 01       	movw	r24, r28
    1da8:	86 5b       	subi	r24, 0xB6	; 182
    1daa:	9f 4f       	sbci	r25, 0xFF	; 255
    1dac:	0e 94 1d 0a 	call	0x143a	; 0x143a <PasswordSetting>
    1db0:	88 23       	and	r24, r24
    1db2:	41 f0       	breq	.+16     	; 0x1dc4 <Change_Pass+0x310>
		{
			UART_sendString(password_real);
    1db4:	ce 01       	movw	r24, r28
    1db6:	86 5b       	subi	r24, 0xB6	; 182
    1db8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dba:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <UART_sendString>
			LCD_clearScreen();
    1dbe:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <LCD_clearScreen>
    1dc2:	d5 c0       	rjmp	.+426    	; 0x1f6e <Change_Pass+0x4ba>
		}
		else
		{
			/*if not ask for password again*/
			PasswordSetting(password_real);
    1dc4:	ce 01       	movw	r24, r28
    1dc6:	86 5b       	subi	r24, 0xB6	; 182
    1dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dca:	0e 94 1d 0a 	call	0x143a	; 0x143a <PasswordSetting>
    1dce:	cf c0       	rjmp	.+414    	; 0x1f6e <Change_Pass+0x4ba>

	}
	else
	{
		/*if the wrong times get 3 times 0,1,2 */
		if(error == 2)
    1dd0:	8a ad       	ldd	r24, Y+58	; 0x3a
    1dd2:	82 30       	cpi	r24, 0x02	; 2
    1dd4:	09 f0       	breq	.+2      	; 0x1dd8 <Change_Pass+0x324>
    1dd6:	cb c0       	rjmp	.+406    	; 0x1f6e <Change_Pass+0x4ba>
		{
			g_buzzerflag=1;/*Set the flag to enter the loop*/
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	80 93 d6 00 	sts	0x00D6, r24
			/*Turn on the timer to count 1 Min for Error !!*/
			TIMER_Configuration config={timer1,CMP_Mode,0,58594,F_cpu_1024,0};
    1dde:	ce 01       	movw	r24, r28
    1de0:	87 5a       	subi	r24, 0xA7	; 167
    1de2:	9f 4f       	sbci	r25, 0xFF	; 255
    1de4:	a4 96       	adiw	r28, 0x24	; 36
    1de6:	9f af       	std	Y+63, r25	; 0x3f
    1de8:	8e af       	std	Y+62, r24	; 0x3e
    1dea:	a4 97       	sbiw	r28, 0x24	; 36
    1dec:	80 ec       	ldi	r24, 0xC0	; 192
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	a6 96       	adiw	r28, 0x26	; 38
    1df2:	9f af       	std	Y+63, r25	; 0x3f
    1df4:	8e af       	std	Y+62, r24	; 0x3e
    1df6:	a6 97       	sbiw	r28, 0x26	; 38
    1df8:	98 e0       	ldi	r25, 0x08	; 8
    1dfa:	a7 96       	adiw	r28, 0x27	; 39
    1dfc:	9f af       	std	Y+63, r25	; 0x3f
    1dfe:	a7 97       	sbiw	r28, 0x27	; 39
    1e00:	a6 96       	adiw	r28, 0x26	; 38
    1e02:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e04:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e06:	a6 97       	sbiw	r28, 0x26	; 38
    1e08:	00 80       	ld	r0, Z
    1e0a:	a6 96       	adiw	r28, 0x26	; 38
    1e0c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e0e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e10:	a6 97       	sbiw	r28, 0x26	; 38
    1e12:	01 96       	adiw	r24, 0x01	; 1
    1e14:	a6 96       	adiw	r28, 0x26	; 38
    1e16:	9f af       	std	Y+63, r25	; 0x3f
    1e18:	8e af       	std	Y+62, r24	; 0x3e
    1e1a:	a6 97       	sbiw	r28, 0x26	; 38
    1e1c:	a4 96       	adiw	r28, 0x24	; 36
    1e1e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e20:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e22:	a4 97       	sbiw	r28, 0x24	; 36
    1e24:	00 82       	st	Z, r0
    1e26:	a4 96       	adiw	r28, 0x24	; 36
    1e28:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e2a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e2c:	a4 97       	sbiw	r28, 0x24	; 36
    1e2e:	01 96       	adiw	r24, 0x01	; 1
    1e30:	a4 96       	adiw	r28, 0x24	; 36
    1e32:	9f af       	std	Y+63, r25	; 0x3f
    1e34:	8e af       	std	Y+62, r24	; 0x3e
    1e36:	a4 97       	sbiw	r28, 0x24	; 36
    1e38:	a7 96       	adiw	r28, 0x27	; 39
    1e3a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e3c:	a7 97       	sbiw	r28, 0x27	; 39
    1e3e:	91 50       	subi	r25, 0x01	; 1
    1e40:	a7 96       	adiw	r28, 0x27	; 39
    1e42:	9f af       	std	Y+63, r25	; 0x3f
    1e44:	a7 97       	sbiw	r28, 0x27	; 39
    1e46:	a7 96       	adiw	r28, 0x27	; 39
    1e48:	ef ad       	ldd	r30, Y+63	; 0x3f
    1e4a:	a7 97       	sbiw	r28, 0x27	; 39
    1e4c:	ee 23       	and	r30, r30
    1e4e:	c1 f6       	brne	.-80     	; 0x1e00 <Change_Pass+0x34c>
			TIMER_setCallback(Buzzer_Stop,CMP_Mode,timer1);
    1e50:	83 e4       	ldi	r24, 0x43	; 67
    1e52:	9d e0       	ldi	r25, 0x0D	; 13
    1e54:	61 e0       	ldi	r22, 0x01	; 1
    1e56:	41 e0       	ldi	r20, 0x01	; 1
    1e58:	0e 94 9f 1c 	call	0x393e	; 0x393e <TIMER_setCallback>
			TIMER_init(&config);
    1e5c:	ce 01       	movw	r24, r28
    1e5e:	87 5a       	subi	r24, 0xA7	; 167
    1e60:	9f 4f       	sbci	r25, 0xFF	; 255
    1e62:	0e 94 a6 1a 	call	0x354c	; 0x354c <TIMER_init>
			LCD_clearScreen();
    1e66:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <LCD_clearScreen>
    1e6a:	7a c0       	rjmp	.+244    	; 0x1f60 <Change_Pass+0x4ac>
			while(g_buzzerflag == 1)
			{
				LCD_moveCursor(0,4);
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	64 e0       	ldi	r22, 0x04	; 4
    1e70:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <LCD_moveCursor>
				LCD_displayString("ERROR!!!");
    1e74:	8f ea       	ldi	r24, 0xAF	; 175
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	0e 94 c3 18 	call	0x3186	; 0x3186 <LCD_displayString>
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	aa ef       	ldi	r26, 0xFA	; 250
    1e82:	b3 e4       	ldi	r27, 0x43	; 67
    1e84:	8b 87       	std	Y+11, r24	; 0x0b
    1e86:	9c 87       	std	Y+12, r25	; 0x0c
    1e88:	ad 87       	std	Y+13, r26	; 0x0d
    1e8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	4a e7       	ldi	r20, 0x7A	; 122
    1e9a:	53 e4       	ldi	r21, 0x43	; 67
    1e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	8f 83       	std	Y+7, r24	; 0x07
    1ea6:	98 87       	std	Y+8, r25	; 0x08
    1ea8:	a9 87       	std	Y+9, r26	; 0x09
    1eaa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eac:	6f 81       	ldd	r22, Y+7	; 0x07
    1eae:	78 85       	ldd	r23, Y+8	; 0x08
    1eb0:	89 85       	ldd	r24, Y+9	; 0x09
    1eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	40 e8       	ldi	r20, 0x80	; 128
    1eba:	5f e3       	ldi	r21, 0x3F	; 63
    1ebc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ec0:	88 23       	and	r24, r24
    1ec2:	2c f4       	brge	.+10     	; 0x1ece <Change_Pass+0x41a>
		__ticks = 1;
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	9e 83       	std	Y+6, r25	; 0x06
    1eca:	8d 83       	std	Y+5, r24	; 0x05
    1ecc:	3f c0       	rjmp	.+126    	; 0x1f4c <Change_Pass+0x498>
	else if (__tmp > 65535)
    1ece:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed0:	78 85       	ldd	r23, Y+8	; 0x08
    1ed2:	89 85       	ldd	r24, Y+9	; 0x09
    1ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	3f ef       	ldi	r19, 0xFF	; 255
    1eda:	4f e7       	ldi	r20, 0x7F	; 127
    1edc:	57 e4       	ldi	r21, 0x47	; 71
    1ede:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ee2:	18 16       	cp	r1, r24
    1ee4:	4c f5       	brge	.+82     	; 0x1f38 <Change_Pass+0x484>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	40 e2       	ldi	r20, 0x20	; 32
    1ef4:	51 e4       	ldi	r21, 0x41	; 65
    1ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	bc 01       	movw	r22, r24
    1f00:	cd 01       	movw	r24, r26
    1f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	9e 83       	std	Y+6, r25	; 0x06
    1f0c:	8d 83       	std	Y+5, r24	; 0x05
    1f0e:	0f c0       	rjmp	.+30     	; 0x1f2e <Change_Pass+0x47a>
    1f10:	89 e1       	ldi	r24, 0x19	; 25
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	9c 83       	std	Y+4, r25	; 0x04
    1f16:	8b 83       	std	Y+3, r24	; 0x03
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	f1 f7       	brne	.-4      	; 0x1f1c <Change_Pass+0x468>
    1f20:	9c 83       	std	Y+4, r25	; 0x04
    1f22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f24:	8d 81       	ldd	r24, Y+5	; 0x05
    1f26:	9e 81       	ldd	r25, Y+6	; 0x06
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	9e 83       	std	Y+6, r25	; 0x06
    1f2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f30:	9e 81       	ldd	r25, Y+6	; 0x06
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	69 f7       	brne	.-38     	; 0x1f10 <Change_Pass+0x45c>
    1f36:	14 c0       	rjmp	.+40     	; 0x1f60 <Change_Pass+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f38:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3a:	78 85       	ldd	r23, Y+8	; 0x08
    1f3c:	89 85       	ldd	r24, Y+9	; 0x09
    1f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	9e 83       	std	Y+6, r25	; 0x06
    1f4a:	8d 83       	std	Y+5, r24	; 0x05
    1f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f50:	9a 83       	std	Y+2, r25	; 0x02
    1f52:	89 83       	std	Y+1, r24	; 0x01
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
    1f56:	9a 81       	ldd	r25, Y+2	; 0x02
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	f1 f7       	brne	.-4      	; 0x1f58 <Change_Pass+0x4a4>
    1f5c:	9a 83       	std	Y+2, r25	; 0x02
    1f5e:	89 83       	std	Y+1, r24	; 0x01
			/*Turn on the timer to count 1 Min for Error !!*/
			TIMER_Configuration config={timer1,CMP_Mode,0,58594,F_cpu_1024,0};
			TIMER_setCallback(Buzzer_Stop,CMP_Mode,timer1);
			TIMER_init(&config);
			LCD_clearScreen();
			while(g_buzzerflag == 1)
    1f60:	80 91 d6 00 	lds	r24, 0x00D6
    1f64:	81 30       	cpi	r24, 0x01	; 1
    1f66:	09 f4       	brne	.+2      	; 0x1f6a <Change_Pass+0x4b6>
    1f68:	81 cf       	rjmp	.-254    	; 0x1e6c <Change_Pass+0x3b8>
			{
				LCD_moveCursor(0,4);
				LCD_displayString("ERROR!!!");
				_delay_ms(500);
			}
			LCD_clearScreen();
    1f6a:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <LCD_clearScreen>
		}
	}
}
    1f6e:	ca 59       	subi	r28, 0x9A	; 154
    1f70:	df 4f       	sbci	r29, 0xFF	; 255
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	f8 94       	cli
    1f76:	de bf       	out	0x3e, r29	; 62
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	cd bf       	out	0x3d, r28	; 61
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <main>:
int main(void)
{
    1f82:	0f 93       	push	r16
    1f84:	1f 93       	push	r17
    1f86:	df 93       	push	r29
    1f88:	cf 93       	push	r28
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	ca 59       	subi	r28, 0x9A	; 154
    1f90:	d0 40       	sbci	r29, 0x00	; 0
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
	uint8 flag=0; /*flag for password handle for one time*/
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	eb 59       	subi	r30, 0x9B	; 155
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	10 82       	st	Z, r1
	uint8 option=0; /*to store option*/
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	ec 59       	subi	r30, 0x9C	; 156
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	10 82       	st	Z, r1
	uint8 error;/*to store wrong times received from control MC*/
	uint8 password_real[15];/*to get the password first time as an admin*/
	uint8 pass[15];/*to store the entered password from user each timer*/
	SREG |= (1<<7);/*enable interrupts for timer*/
    1fac:	af e5       	ldi	r26, 0x5F	; 95
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	ef e5       	ldi	r30, 0x5F	; 95
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	80 68       	ori	r24, 0x80	; 128
    1fb8:	8c 93       	st	X, r24
	/*configure UART*/
	UART_Configuration  configuration={eight_bits,disable,one_bit,9600};
    1fba:	ce 01       	movw	r24, r28
    1fbc:	8c 57       	subi	r24, 0x7C	; 124
    1fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc0:	cf 56       	subi	r28, 0x6F	; 111
    1fc2:	df 4f       	sbci	r29, 0xFF	; 255
    1fc4:	99 83       	std	Y+1, r25	; 0x01
    1fc6:	88 83       	st	Y, r24
    1fc8:	c1 59       	subi	r28, 0x91	; 145
    1fca:	d0 40       	sbci	r29, 0x00	; 0
    1fcc:	80 ed       	ldi	r24, 0xD0	; 208
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	cd 56       	subi	r28, 0x6D	; 109
    1fd2:	df 4f       	sbci	r29, 0xFF	; 255
    1fd4:	99 83       	std	Y+1, r25	; 0x01
    1fd6:	88 83       	st	Y, r24
    1fd8:	c3 59       	subi	r28, 0x93	; 147
    1fda:	d0 40       	sbci	r29, 0x00	; 0
    1fdc:	95 e0       	ldi	r25, 0x05	; 5
    1fde:	cb 56       	subi	r28, 0x6B	; 107
    1fe0:	df 4f       	sbci	r29, 0xFF	; 255
    1fe2:	98 83       	st	Y, r25
    1fe4:	c5 59       	subi	r28, 0x95	; 149
    1fe6:	d0 40       	sbci	r29, 0x00	; 0
    1fe8:	cd 56       	subi	r28, 0x6D	; 109
    1fea:	df 4f       	sbci	r29, 0xFF	; 255
    1fec:	e8 81       	ld	r30, Y
    1fee:	f9 81       	ldd	r31, Y+1	; 0x01
    1ff0:	c3 59       	subi	r28, 0x93	; 147
    1ff2:	d0 40       	sbci	r29, 0x00	; 0
    1ff4:	00 80       	ld	r0, Z
    1ff6:	cd 56       	subi	r28, 0x6D	; 109
    1ff8:	df 4f       	sbci	r29, 0xFF	; 255
    1ffa:	88 81       	ld	r24, Y
    1ffc:	99 81       	ldd	r25, Y+1	; 0x01
    1ffe:	c3 59       	subi	r28, 0x93	; 147
    2000:	d0 40       	sbci	r29, 0x00	; 0
    2002:	01 96       	adiw	r24, 0x01	; 1
    2004:	cd 56       	subi	r28, 0x6D	; 109
    2006:	df 4f       	sbci	r29, 0xFF	; 255
    2008:	99 83       	std	Y+1, r25	; 0x01
    200a:	88 83       	st	Y, r24
    200c:	c3 59       	subi	r28, 0x93	; 147
    200e:	d0 40       	sbci	r29, 0x00	; 0
    2010:	cf 56       	subi	r28, 0x6F	; 111
    2012:	df 4f       	sbci	r29, 0xFF	; 255
    2014:	e8 81       	ld	r30, Y
    2016:	f9 81       	ldd	r31, Y+1	; 0x01
    2018:	c1 59       	subi	r28, 0x91	; 145
    201a:	d0 40       	sbci	r29, 0x00	; 0
    201c:	00 82       	st	Z, r0
    201e:	cf 56       	subi	r28, 0x6F	; 111
    2020:	df 4f       	sbci	r29, 0xFF	; 255
    2022:	88 81       	ld	r24, Y
    2024:	99 81       	ldd	r25, Y+1	; 0x01
    2026:	c1 59       	subi	r28, 0x91	; 145
    2028:	d0 40       	sbci	r29, 0x00	; 0
    202a:	01 96       	adiw	r24, 0x01	; 1
    202c:	cf 56       	subi	r28, 0x6F	; 111
    202e:	df 4f       	sbci	r29, 0xFF	; 255
    2030:	99 83       	std	Y+1, r25	; 0x01
    2032:	88 83       	st	Y, r24
    2034:	c1 59       	subi	r28, 0x91	; 145
    2036:	d0 40       	sbci	r29, 0x00	; 0
    2038:	cb 56       	subi	r28, 0x6B	; 107
    203a:	df 4f       	sbci	r29, 0xFF	; 255
    203c:	98 81       	ld	r25, Y
    203e:	c5 59       	subi	r28, 0x95	; 149
    2040:	d0 40       	sbci	r29, 0x00	; 0
    2042:	91 50       	subi	r25, 0x01	; 1
    2044:	cb 56       	subi	r28, 0x6B	; 107
    2046:	df 4f       	sbci	r29, 0xFF	; 255
    2048:	98 83       	st	Y, r25
    204a:	c5 59       	subi	r28, 0x95	; 149
    204c:	d0 40       	sbci	r29, 0x00	; 0
    204e:	cb 56       	subi	r28, 0x6B	; 107
    2050:	df 4f       	sbci	r29, 0xFF	; 255
    2052:	e8 81       	ld	r30, Y
    2054:	c5 59       	subi	r28, 0x95	; 149
    2056:	d0 40       	sbci	r29, 0x00	; 0
    2058:	ee 23       	and	r30, r30
    205a:	31 f6       	brne	.-116    	; 0x1fe8 <main+0x66>
	LCD_init();/*initialize LCD*/
    205c:	0e 94 b8 14 	call	0x2970	; 0x2970 <LCD_init>
    2060:	fe 01       	movw	r30, r28
    2062:	e1 5a       	subi	r30, 0xA1	; 161
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	a8 ec       	ldi	r26, 0xC8	; 200
    206c:	b2 e4       	ldi	r27, 0x42	; 66
    206e:	80 83       	st	Z, r24
    2070:	91 83       	std	Z+1, r25	; 0x01
    2072:	a2 83       	std	Z+2, r26	; 0x02
    2074:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2076:	8e 01       	movw	r16, r28
    2078:	05 5a       	subi	r16, 0xA5	; 165
    207a:	1f 4f       	sbci	r17, 0xFF	; 255
    207c:	fe 01       	movw	r30, r28
    207e:	e1 5a       	subi	r30, 0xA1	; 161
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	60 81       	ld	r22, Z
    2084:	71 81       	ldd	r23, Z+1	; 0x01
    2086:	82 81       	ldd	r24, Z+2	; 0x02
    2088:	93 81       	ldd	r25, Z+3	; 0x03
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	4a e7       	ldi	r20, 0x7A	; 122
    2090:	53 e4       	ldi	r21, 0x43	; 67
    2092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	f8 01       	movw	r30, r16
    209c:	80 83       	st	Z, r24
    209e:	91 83       	std	Z+1, r25	; 0x01
    20a0:	a2 83       	std	Z+2, r26	; 0x02
    20a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20a4:	fe 01       	movw	r30, r28
    20a6:	e5 5a       	subi	r30, 0xA5	; 165
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	60 81       	ld	r22, Z
    20ac:	71 81       	ldd	r23, Z+1	; 0x01
    20ae:	82 81       	ldd	r24, Z+2	; 0x02
    20b0:	93 81       	ldd	r25, Z+3	; 0x03
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e8       	ldi	r20, 0x80	; 128
    20b8:	5f e3       	ldi	r21, 0x3F	; 63
    20ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20be:	88 23       	and	r24, r24
    20c0:	44 f4       	brge	.+16     	; 0x20d2 <main+0x150>
		__ticks = 1;
    20c2:	fe 01       	movw	r30, r28
    20c4:	e7 5a       	subi	r30, 0xA7	; 167
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	91 83       	std	Z+1, r25	; 0x01
    20ce:	80 83       	st	Z, r24
    20d0:	64 c0       	rjmp	.+200    	; 0x219a <main+0x218>
	else if (__tmp > 65535)
    20d2:	fe 01       	movw	r30, r28
    20d4:	e5 5a       	subi	r30, 0xA5	; 165
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	60 81       	ld	r22, Z
    20da:	71 81       	ldd	r23, Z+1	; 0x01
    20dc:	82 81       	ldd	r24, Z+2	; 0x02
    20de:	93 81       	ldd	r25, Z+3	; 0x03
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	3f ef       	ldi	r19, 0xFF	; 255
    20e4:	4f e7       	ldi	r20, 0x7F	; 127
    20e6:	57 e4       	ldi	r21, 0x47	; 71
    20e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ec:	18 16       	cp	r1, r24
    20ee:	0c f0       	brlt	.+2      	; 0x20f2 <main+0x170>
    20f0:	43 c0       	rjmp	.+134    	; 0x2178 <main+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f2:	fe 01       	movw	r30, r28
    20f4:	e1 5a       	subi	r30, 0xA1	; 161
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	60 81       	ld	r22, Z
    20fa:	71 81       	ldd	r23, Z+1	; 0x01
    20fc:	82 81       	ldd	r24, Z+2	; 0x02
    20fe:	93 81       	ldd	r25, Z+3	; 0x03
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	40 e2       	ldi	r20, 0x20	; 32
    2106:	51 e4       	ldi	r21, 0x41	; 65
    2108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	8e 01       	movw	r16, r28
    2112:	07 5a       	subi	r16, 0xA7	; 167
    2114:	1f 4f       	sbci	r17, 0xFF	; 255
    2116:	bc 01       	movw	r22, r24
    2118:	cd 01       	movw	r24, r26
    211a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	f8 01       	movw	r30, r16
    2124:	91 83       	std	Z+1, r25	; 0x01
    2126:	80 83       	st	Z, r24
    2128:	1f c0       	rjmp	.+62     	; 0x2168 <main+0x1e6>
    212a:	fe 01       	movw	r30, r28
    212c:	e9 5a       	subi	r30, 0xA9	; 169
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	89 e1       	ldi	r24, 0x19	; 25
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	91 83       	std	Z+1, r25	; 0x01
    2136:	80 83       	st	Z, r24
    2138:	fe 01       	movw	r30, r28
    213a:	e9 5a       	subi	r30, 0xA9	; 169
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	80 81       	ld	r24, Z
    2140:	91 81       	ldd	r25, Z+1	; 0x01
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	f1 f7       	brne	.-4      	; 0x2142 <main+0x1c0>
    2146:	fe 01       	movw	r30, r28
    2148:	e9 5a       	subi	r30, 0xA9	; 169
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	91 83       	std	Z+1, r25	; 0x01
    214e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2150:	de 01       	movw	r26, r28
    2152:	a7 5a       	subi	r26, 0xA7	; 167
    2154:	bf 4f       	sbci	r27, 0xFF	; 255
    2156:	fe 01       	movw	r30, r28
    2158:	e7 5a       	subi	r30, 0xA7	; 167
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	80 81       	ld	r24, Z
    215e:	91 81       	ldd	r25, Z+1	; 0x01
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	11 96       	adiw	r26, 0x01	; 1
    2164:	9c 93       	st	X, r25
    2166:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2168:	fe 01       	movw	r30, r28
    216a:	e7 5a       	subi	r30, 0xA7	; 167
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	80 81       	ld	r24, Z
    2170:	91 81       	ldd	r25, Z+1	; 0x01
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	d1 f6       	brne	.-76     	; 0x212a <main+0x1a8>
    2176:	27 c0       	rjmp	.+78     	; 0x21c6 <main+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2178:	8e 01       	movw	r16, r28
    217a:	07 5a       	subi	r16, 0xA7	; 167
    217c:	1f 4f       	sbci	r17, 0xFF	; 255
    217e:	fe 01       	movw	r30, r28
    2180:	e5 5a       	subi	r30, 0xA5	; 165
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	60 81       	ld	r22, Z
    2186:	71 81       	ldd	r23, Z+1	; 0x01
    2188:	82 81       	ldd	r24, Z+2	; 0x02
    218a:	93 81       	ldd	r25, Z+3	; 0x03
    218c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	f8 01       	movw	r30, r16
    2196:	91 83       	std	Z+1, r25	; 0x01
    2198:	80 83       	st	Z, r24
    219a:	de 01       	movw	r26, r28
    219c:	ab 5a       	subi	r26, 0xAB	; 171
    219e:	bf 4f       	sbci	r27, 0xFF	; 255
    21a0:	fe 01       	movw	r30, r28
    21a2:	e7 5a       	subi	r30, 0xA7	; 167
    21a4:	ff 4f       	sbci	r31, 0xFF	; 255
    21a6:	80 81       	ld	r24, Z
    21a8:	91 81       	ldd	r25, Z+1	; 0x01
    21aa:	8d 93       	st	X+, r24
    21ac:	9c 93       	st	X, r25
    21ae:	fe 01       	movw	r30, r28
    21b0:	eb 5a       	subi	r30, 0xAB	; 171
    21b2:	ff 4f       	sbci	r31, 0xFF	; 255
    21b4:	80 81       	ld	r24, Z
    21b6:	91 81       	ldd	r25, Z+1	; 0x01
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	f1 f7       	brne	.-4      	; 0x21b8 <main+0x236>
    21bc:	fe 01       	movw	r30, r28
    21be:	eb 5a       	subi	r30, 0xAB	; 171
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	91 83       	std	Z+1, r25	; 0x01
    21c4:	80 83       	st	Z, r24
	_delay_ms(100);/*delay for LCD initialization*/
	UART_init(&configuration);
    21c6:	ce 01       	movw	r24, r28
    21c8:	8c 57       	subi	r24, 0x7C	; 124
    21ca:	9f 4f       	sbci	r25, 0xFF	; 255
    21cc:	0e 94 cd 1c 	call	0x399a	; 0x399a <UART_init>
    21d0:	0e c0       	rjmp	.+28     	; 0x21ee <main+0x26c>
	/*reset password as an admin*/
	while(flag == 0)
	{
		if(PasswordSetting(password_real))
    21d2:	ce 01       	movw	r24, r28
    21d4:	8a 59       	subi	r24, 0x9A	; 154
    21d6:	9f 4f       	sbci	r25, 0xFF	; 255
    21d8:	0e 94 1d 0a 	call	0x143a	; 0x143a <PasswordSetting>
    21dc:	88 23       	and	r24, r24
    21de:	29 f0       	breq	.+10     	; 0x21ea <main+0x268>
			flag=1;
    21e0:	fe 01       	movw	r30, r28
    21e2:	eb 59       	subi	r30, 0x9B	; 155
    21e4:	ff 4f       	sbci	r31, 0xFF	; 255
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	80 83       	st	Z, r24
		LCD_clearScreen();
    21ea:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <LCD_clearScreen>
	UART_Configuration  configuration={eight_bits,disable,one_bit,9600};
	LCD_init();/*initialize LCD*/
	_delay_ms(100);/*delay for LCD initialization*/
	UART_init(&configuration);
	/*reset password as an admin*/
	while(flag == 0)
    21ee:	fe 01       	movw	r30, r28
    21f0:	eb 59       	subi	r30, 0x9B	; 155
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	80 81       	ld	r24, Z
    21f6:	88 23       	and	r24, r24
    21f8:	61 f3       	breq	.-40     	; 0x21d2 <main+0x250>
		if(PasswordSetting(password_real))
			flag=1;
		LCD_clearScreen();
	}
	/*send the first password to control MC to store it*/
	UART_sendString(password_real);
    21fa:	ce 01       	movw	r24, r28
    21fc:	8a 59       	subi	r24, 0x9A	; 154
    21fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2200:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <UART_sendString>
	while(1)
	{
		/*get the  option from user*/
		option = Main_Options();
    2204:	0e 94 ce 0b 	call	0x179c	; 0x179c <Main_Options>
    2208:	fe 01       	movw	r30, r28
    220a:	ec 59       	subi	r30, 0x9C	; 156
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	80 83       	st	Z, r24
		if(option == '+')
    2210:	fe 01       	movw	r30, r28
    2212:	ec 59       	subi	r30, 0x9C	; 156
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	80 81       	ld	r24, Z
    2218:	8b 32       	cpi	r24, 0x2B	; 43
    221a:	09 f0       	breq	.+2      	; 0x221e <main+0x29c>
    221c:	1f c3       	rjmp	.+1598   	; 0x285c <main+0x8da>
		{
			/*if '+' ask for password for opening the door*/
			UART_sendByte(option);
    221e:	fe 01       	movw	r30, r28
    2220:	ec 59       	subi	r30, 0x9C	; 156
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	80 81       	ld	r24, Z
    2226:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <UART_sendByte>
    222a:	fe 01       	movw	r30, r28
    222c:	ef 5a       	subi	r30, 0xAF	; 175
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	80 e0       	ldi	r24, 0x00	; 0
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	aa ef       	ldi	r26, 0xFA	; 250
    2236:	b4 e4       	ldi	r27, 0x44	; 68
    2238:	80 83       	st	Z, r24
    223a:	91 83       	std	Z+1, r25	; 0x01
    223c:	a2 83       	std	Z+2, r26	; 0x02
    223e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2240:	8e 01       	movw	r16, r28
    2242:	03 5b       	subi	r16, 0xB3	; 179
    2244:	1f 4f       	sbci	r17, 0xFF	; 255
    2246:	fe 01       	movw	r30, r28
    2248:	ef 5a       	subi	r30, 0xAF	; 175
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	60 81       	ld	r22, Z
    224e:	71 81       	ldd	r23, Z+1	; 0x01
    2250:	82 81       	ldd	r24, Z+2	; 0x02
    2252:	93 81       	ldd	r25, Z+3	; 0x03
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	4a e7       	ldi	r20, 0x7A	; 122
    225a:	53 e4       	ldi	r21, 0x43	; 67
    225c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	f8 01       	movw	r30, r16
    2266:	80 83       	st	Z, r24
    2268:	91 83       	std	Z+1, r25	; 0x01
    226a:	a2 83       	std	Z+2, r26	; 0x02
    226c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    226e:	fe 01       	movw	r30, r28
    2270:	e3 5b       	subi	r30, 0xB3	; 179
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	60 81       	ld	r22, Z
    2276:	71 81       	ldd	r23, Z+1	; 0x01
    2278:	82 81       	ldd	r24, Z+2	; 0x02
    227a:	93 81       	ldd	r25, Z+3	; 0x03
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e8       	ldi	r20, 0x80	; 128
    2282:	5f e3       	ldi	r21, 0x3F	; 63
    2284:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2288:	88 23       	and	r24, r24
    228a:	44 f4       	brge	.+16     	; 0x229c <main+0x31a>
		__ticks = 1;
    228c:	fe 01       	movw	r30, r28
    228e:	e5 5b       	subi	r30, 0xB5	; 181
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	91 83       	std	Z+1, r25	; 0x01
    2298:	80 83       	st	Z, r24
    229a:	64 c0       	rjmp	.+200    	; 0x2364 <main+0x3e2>
	else if (__tmp > 65535)
    229c:	fe 01       	movw	r30, r28
    229e:	e3 5b       	subi	r30, 0xB3	; 179
    22a0:	ff 4f       	sbci	r31, 0xFF	; 255
    22a2:	60 81       	ld	r22, Z
    22a4:	71 81       	ldd	r23, Z+1	; 0x01
    22a6:	82 81       	ldd	r24, Z+2	; 0x02
    22a8:	93 81       	ldd	r25, Z+3	; 0x03
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	3f ef       	ldi	r19, 0xFF	; 255
    22ae:	4f e7       	ldi	r20, 0x7F	; 127
    22b0:	57 e4       	ldi	r21, 0x47	; 71
    22b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22b6:	18 16       	cp	r1, r24
    22b8:	0c f0       	brlt	.+2      	; 0x22bc <main+0x33a>
    22ba:	43 c0       	rjmp	.+134    	; 0x2342 <main+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22bc:	fe 01       	movw	r30, r28
    22be:	ef 5a       	subi	r30, 0xAF	; 175
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	60 81       	ld	r22, Z
    22c4:	71 81       	ldd	r23, Z+1	; 0x01
    22c6:	82 81       	ldd	r24, Z+2	; 0x02
    22c8:	93 81       	ldd	r25, Z+3	; 0x03
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	40 e2       	ldi	r20, 0x20	; 32
    22d0:	51 e4       	ldi	r21, 0x41	; 65
    22d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	8e 01       	movw	r16, r28
    22dc:	05 5b       	subi	r16, 0xB5	; 181
    22de:	1f 4f       	sbci	r17, 0xFF	; 255
    22e0:	bc 01       	movw	r22, r24
    22e2:	cd 01       	movw	r24, r26
    22e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	f8 01       	movw	r30, r16
    22ee:	91 83       	std	Z+1, r25	; 0x01
    22f0:	80 83       	st	Z, r24
    22f2:	1f c0       	rjmp	.+62     	; 0x2332 <main+0x3b0>
    22f4:	fe 01       	movw	r30, r28
    22f6:	e7 5b       	subi	r30, 0xB7	; 183
    22f8:	ff 4f       	sbci	r31, 0xFF	; 255
    22fa:	89 e1       	ldi	r24, 0x19	; 25
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	91 83       	std	Z+1, r25	; 0x01
    2300:	80 83       	st	Z, r24
    2302:	fe 01       	movw	r30, r28
    2304:	e7 5b       	subi	r30, 0xB7	; 183
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	80 81       	ld	r24, Z
    230a:	91 81       	ldd	r25, Z+1	; 0x01
    230c:	01 97       	sbiw	r24, 0x01	; 1
    230e:	f1 f7       	brne	.-4      	; 0x230c <main+0x38a>
    2310:	fe 01       	movw	r30, r28
    2312:	e7 5b       	subi	r30, 0xB7	; 183
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	91 83       	std	Z+1, r25	; 0x01
    2318:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231a:	de 01       	movw	r26, r28
    231c:	a5 5b       	subi	r26, 0xB5	; 181
    231e:	bf 4f       	sbci	r27, 0xFF	; 255
    2320:	fe 01       	movw	r30, r28
    2322:	e5 5b       	subi	r30, 0xB5	; 181
    2324:	ff 4f       	sbci	r31, 0xFF	; 255
    2326:	80 81       	ld	r24, Z
    2328:	91 81       	ldd	r25, Z+1	; 0x01
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	11 96       	adiw	r26, 0x01	; 1
    232e:	9c 93       	st	X, r25
    2330:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2332:	fe 01       	movw	r30, r28
    2334:	e5 5b       	subi	r30, 0xB5	; 181
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	80 81       	ld	r24, Z
    233a:	91 81       	ldd	r25, Z+1	; 0x01
    233c:	00 97       	sbiw	r24, 0x00	; 0
    233e:	d1 f6       	brne	.-76     	; 0x22f4 <main+0x372>
    2340:	27 c0       	rjmp	.+78     	; 0x2390 <main+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2342:	8e 01       	movw	r16, r28
    2344:	05 5b       	subi	r16, 0xB5	; 181
    2346:	1f 4f       	sbci	r17, 0xFF	; 255
    2348:	fe 01       	movw	r30, r28
    234a:	e3 5b       	subi	r30, 0xB3	; 179
    234c:	ff 4f       	sbci	r31, 0xFF	; 255
    234e:	60 81       	ld	r22, Z
    2350:	71 81       	ldd	r23, Z+1	; 0x01
    2352:	82 81       	ldd	r24, Z+2	; 0x02
    2354:	93 81       	ldd	r25, Z+3	; 0x03
    2356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	f8 01       	movw	r30, r16
    2360:	91 83       	std	Z+1, r25	; 0x01
    2362:	80 83       	st	Z, r24
    2364:	de 01       	movw	r26, r28
    2366:	a9 5b       	subi	r26, 0xB9	; 185
    2368:	bf 4f       	sbci	r27, 0xFF	; 255
    236a:	fe 01       	movw	r30, r28
    236c:	e5 5b       	subi	r30, 0xB5	; 181
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	80 81       	ld	r24, Z
    2372:	91 81       	ldd	r25, Z+1	; 0x01
    2374:	8d 93       	st	X+, r24
    2376:	9c 93       	st	X, r25
    2378:	fe 01       	movw	r30, r28
    237a:	e9 5b       	subi	r30, 0xB9	; 185
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	80 81       	ld	r24, Z
    2380:	91 81       	ldd	r25, Z+1	; 0x01
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	f1 f7       	brne	.-4      	; 0x2382 <main+0x400>
    2386:	fe 01       	movw	r30, r28
    2388:	e9 5b       	subi	r30, 0xB9	; 185
    238a:	ff 4f       	sbci	r31, 0xFF	; 255
    238c:	91 83       	std	Z+1, r25	; 0x01
    238e:	80 83       	st	Z, r24
			_delay_ms(2000);/*delay for option transmission*/
			LCD_clearScreen();
    2390:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <LCD_clearScreen>
			Enter_Password(pass);/*get password from user*/
    2394:	ce 01       	movw	r24, r28
    2396:	8b 58       	subi	r24, 0x8B	; 139
    2398:	9f 4f       	sbci	r25, 0xFF	; 255
    239a:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <Enter_Password>
			error = UART_receiveByte();/*receive wrong pass times*/
    239e:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <UART_receiveByte>
    23a2:	fe 01       	movw	r30, r28
    23a4:	ed 59       	subi	r30, 0x9D	; 157
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	80 83       	st	Z, r24
    23aa:	fe 01       	movw	r30, r28
    23ac:	ed 5b       	subi	r30, 0xBD	; 189
    23ae:	ff 4f       	sbci	r31, 0xFF	; 255
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	aa ef       	ldi	r26, 0xFA	; 250
    23b6:	b4 e4       	ldi	r27, 0x44	; 68
    23b8:	80 83       	st	Z, r24
    23ba:	91 83       	std	Z+1, r25	; 0x01
    23bc:	a2 83       	std	Z+2, r26	; 0x02
    23be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c0:	8e 01       	movw	r16, r28
    23c2:	01 5c       	subi	r16, 0xC1	; 193
    23c4:	1f 4f       	sbci	r17, 0xFF	; 255
    23c6:	fe 01       	movw	r30, r28
    23c8:	ed 5b       	subi	r30, 0xBD	; 189
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	60 81       	ld	r22, Z
    23ce:	71 81       	ldd	r23, Z+1	; 0x01
    23d0:	82 81       	ldd	r24, Z+2	; 0x02
    23d2:	93 81       	ldd	r25, Z+3	; 0x03
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	4a e7       	ldi	r20, 0x7A	; 122
    23da:	53 e4       	ldi	r21, 0x43	; 67
    23dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	f8 01       	movw	r30, r16
    23e6:	80 83       	st	Z, r24
    23e8:	91 83       	std	Z+1, r25	; 0x01
    23ea:	a2 83       	std	Z+2, r26	; 0x02
    23ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23ee:	fe 01       	movw	r30, r28
    23f0:	ff 96       	adiw	r30, 0x3f	; 63
    23f2:	60 81       	ld	r22, Z
    23f4:	71 81       	ldd	r23, Z+1	; 0x01
    23f6:	82 81       	ldd	r24, Z+2	; 0x02
    23f8:	93 81       	ldd	r25, Z+3	; 0x03
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e8       	ldi	r20, 0x80	; 128
    2400:	5f e3       	ldi	r21, 0x3F	; 63
    2402:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2406:	88 23       	and	r24, r24
    2408:	2c f4       	brge	.+10     	; 0x2414 <main+0x492>
		__ticks = 1;
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	9e af       	std	Y+62, r25	; 0x3e
    2410:	8d af       	std	Y+61, r24	; 0x3d
    2412:	46 c0       	rjmp	.+140    	; 0x24a0 <main+0x51e>
	else if (__tmp > 65535)
    2414:	fe 01       	movw	r30, r28
    2416:	ff 96       	adiw	r30, 0x3f	; 63
    2418:	60 81       	ld	r22, Z
    241a:	71 81       	ldd	r23, Z+1	; 0x01
    241c:	82 81       	ldd	r24, Z+2	; 0x02
    241e:	93 81       	ldd	r25, Z+3	; 0x03
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	3f ef       	ldi	r19, 0xFF	; 255
    2424:	4f e7       	ldi	r20, 0x7F	; 127
    2426:	57 e4       	ldi	r21, 0x47	; 71
    2428:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    242c:	18 16       	cp	r1, r24
    242e:	64 f5       	brge	.+88     	; 0x2488 <main+0x506>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2430:	fe 01       	movw	r30, r28
    2432:	ed 5b       	subi	r30, 0xBD	; 189
    2434:	ff 4f       	sbci	r31, 0xFF	; 255
    2436:	60 81       	ld	r22, Z
    2438:	71 81       	ldd	r23, Z+1	; 0x01
    243a:	82 81       	ldd	r24, Z+2	; 0x02
    243c:	93 81       	ldd	r25, Z+3	; 0x03
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	40 e2       	ldi	r20, 0x20	; 32
    2444:	51 e4       	ldi	r21, 0x41	; 65
    2446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	bc 01       	movw	r22, r24
    2450:	cd 01       	movw	r24, r26
    2452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	9e af       	std	Y+62, r25	; 0x3e
    245c:	8d af       	std	Y+61, r24	; 0x3d
    245e:	0f c0       	rjmp	.+30     	; 0x247e <main+0x4fc>
    2460:	89 e1       	ldi	r24, 0x19	; 25
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	9c af       	std	Y+60, r25	; 0x3c
    2466:	8b af       	std	Y+59, r24	; 0x3b
    2468:	8b ad       	ldd	r24, Y+59	; 0x3b
    246a:	9c ad       	ldd	r25, Y+60	; 0x3c
    246c:	01 97       	sbiw	r24, 0x01	; 1
    246e:	f1 f7       	brne	.-4      	; 0x246c <main+0x4ea>
    2470:	9c af       	std	Y+60, r25	; 0x3c
    2472:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2474:	8d ad       	ldd	r24, Y+61	; 0x3d
    2476:	9e ad       	ldd	r25, Y+62	; 0x3e
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	9e af       	std	Y+62, r25	; 0x3e
    247c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2480:	9e ad       	ldd	r25, Y+62	; 0x3e
    2482:	00 97       	sbiw	r24, 0x00	; 0
    2484:	69 f7       	brne	.-38     	; 0x2460 <main+0x4de>
    2486:	16 c0       	rjmp	.+44     	; 0x24b4 <main+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2488:	fe 01       	movw	r30, r28
    248a:	ff 96       	adiw	r30, 0x3f	; 63
    248c:	60 81       	ld	r22, Z
    248e:	71 81       	ldd	r23, Z+1	; 0x01
    2490:	82 81       	ldd	r24, Z+2	; 0x02
    2492:	93 81       	ldd	r25, Z+3	; 0x03
    2494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	9e af       	std	Y+62, r25	; 0x3e
    249e:	8d af       	std	Y+61, r24	; 0x3d
    24a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    24a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    24a4:	9a af       	std	Y+58, r25	; 0x3a
    24a6:	89 af       	std	Y+57, r24	; 0x39
    24a8:	89 ad       	ldd	r24, Y+57	; 0x39
    24aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	f1 f7       	brne	.-4      	; 0x24ac <main+0x52a>
    24b0:	9a af       	std	Y+58, r25	; 0x3a
    24b2:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(2000);
			UART_sendString(pass);/*send the entered pass for checking in control MC*/
    24b4:	ce 01       	movw	r24, r28
    24b6:	8b 58       	subi	r24, 0x8B	; 139
    24b8:	9f 4f       	sbci	r25, 0xFF	; 255
    24ba:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <UART_sendString>
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	90 e8       	ldi	r25, 0x80	; 128
    24c2:	ab eb       	ldi	r26, 0xBB	; 187
    24c4:	b4 e4       	ldi	r27, 0x44	; 68
    24c6:	8d ab       	std	Y+53, r24	; 0x35
    24c8:	9e ab       	std	Y+54, r25	; 0x36
    24ca:	af ab       	std	Y+55, r26	; 0x37
    24cc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ce:	6d a9       	ldd	r22, Y+53	; 0x35
    24d0:	7e a9       	ldd	r23, Y+54	; 0x36
    24d2:	8f a9       	ldd	r24, Y+55	; 0x37
    24d4:	98 ad       	ldd	r25, Y+56	; 0x38
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	4a e7       	ldi	r20, 0x7A	; 122
    24dc:	53 e4       	ldi	r21, 0x43	; 67
    24de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	89 ab       	std	Y+49, r24	; 0x31
    24e8:	9a ab       	std	Y+50, r25	; 0x32
    24ea:	ab ab       	std	Y+51, r26	; 0x33
    24ec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24ee:	69 a9       	ldd	r22, Y+49	; 0x31
    24f0:	7a a9       	ldd	r23, Y+50	; 0x32
    24f2:	8b a9       	ldd	r24, Y+51	; 0x33
    24f4:	9c a9       	ldd	r25, Y+52	; 0x34
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 e8       	ldi	r20, 0x80	; 128
    24fc:	5f e3       	ldi	r21, 0x3F	; 63
    24fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2502:	88 23       	and	r24, r24
    2504:	2c f4       	brge	.+10     	; 0x2510 <main+0x58e>
		__ticks = 1;
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	98 ab       	std	Y+48, r25	; 0x30
    250c:	8f a7       	std	Y+47, r24	; 0x2f
    250e:	3f c0       	rjmp	.+126    	; 0x258e <main+0x60c>
	else if (__tmp > 65535)
    2510:	69 a9       	ldd	r22, Y+49	; 0x31
    2512:	7a a9       	ldd	r23, Y+50	; 0x32
    2514:	8b a9       	ldd	r24, Y+51	; 0x33
    2516:	9c a9       	ldd	r25, Y+52	; 0x34
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	3f ef       	ldi	r19, 0xFF	; 255
    251c:	4f e7       	ldi	r20, 0x7F	; 127
    251e:	57 e4       	ldi	r21, 0x47	; 71
    2520:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2524:	18 16       	cp	r1, r24
    2526:	4c f5       	brge	.+82     	; 0x257a <main+0x5f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2528:	6d a9       	ldd	r22, Y+53	; 0x35
    252a:	7e a9       	ldd	r23, Y+54	; 0x36
    252c:	8f a9       	ldd	r24, Y+55	; 0x37
    252e:	98 ad       	ldd	r25, Y+56	; 0x38
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e2       	ldi	r20, 0x20	; 32
    2536:	51 e4       	ldi	r21, 0x41	; 65
    2538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	bc 01       	movw	r22, r24
    2542:	cd 01       	movw	r24, r26
    2544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	98 ab       	std	Y+48, r25	; 0x30
    254e:	8f a7       	std	Y+47, r24	; 0x2f
    2550:	0f c0       	rjmp	.+30     	; 0x2570 <main+0x5ee>
    2552:	89 e1       	ldi	r24, 0x19	; 25
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	9e a7       	std	Y+46, r25	; 0x2e
    2558:	8d a7       	std	Y+45, r24	; 0x2d
    255a:	8d a5       	ldd	r24, Y+45	; 0x2d
    255c:	9e a5       	ldd	r25, Y+46	; 0x2e
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	f1 f7       	brne	.-4      	; 0x255e <main+0x5dc>
    2562:	9e a7       	std	Y+46, r25	; 0x2e
    2564:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2566:	8f a5       	ldd	r24, Y+47	; 0x2f
    2568:	98 a9       	ldd	r25, Y+48	; 0x30
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	98 ab       	std	Y+48, r25	; 0x30
    256e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2570:	8f a5       	ldd	r24, Y+47	; 0x2f
    2572:	98 a9       	ldd	r25, Y+48	; 0x30
    2574:	00 97       	sbiw	r24, 0x00	; 0
    2576:	69 f7       	brne	.-38     	; 0x2552 <main+0x5d0>
    2578:	14 c0       	rjmp	.+40     	; 0x25a2 <main+0x620>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257a:	69 a9       	ldd	r22, Y+49	; 0x31
    257c:	7a a9       	ldd	r23, Y+50	; 0x32
    257e:	8b a9       	ldd	r24, Y+51	; 0x33
    2580:	9c a9       	ldd	r25, Y+52	; 0x34
    2582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	98 ab       	std	Y+48, r25	; 0x30
    258c:	8f a7       	std	Y+47, r24	; 0x2f
    258e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2590:	98 a9       	ldd	r25, Y+48	; 0x30
    2592:	9c a7       	std	Y+44, r25	; 0x2c
    2594:	8b a7       	std	Y+43, r24	; 0x2b
    2596:	8b a5       	ldd	r24, Y+43	; 0x2b
    2598:	9c a5       	ldd	r25, Y+44	; 0x2c
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	f1 f7       	brne	.-4      	; 0x259a <main+0x618>
    259e:	9c a7       	std	Y+44, r25	; 0x2c
    25a0:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1500);/*delay for transmission*/
			/*if wrong time get 3 times (0,1,2) eraise an error message*/
			if(error == 2)
    25a2:	fe 01       	movw	r30, r28
    25a4:	ed 59       	subi	r30, 0x9D	; 157
    25a6:	ff 4f       	sbci	r31, 0xFF	; 255
    25a8:	80 81       	ld	r24, Z
    25aa:	82 30       	cpi	r24, 0x02	; 2
    25ac:	09 f0       	breq	.+2      	; 0x25b0 <main+0x62e>
    25ae:	2a ce       	rjmp	.-940    	; 0x2204 <main+0x282>
			{
				g_buzzerflag=1;
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	80 93 d6 00 	sts	0x00D6, r24
				TIMER_Configuration config={timer1,CMP_Mode,0,58594,F_cpu_1024,0};
    25b6:	ce 01       	movw	r24, r28
    25b8:	87 57       	subi	r24, 0x77	; 119
    25ba:	9f 4f       	sbci	r25, 0xFF	; 255
    25bc:	ca 56       	subi	r28, 0x6A	; 106
    25be:	df 4f       	sbci	r29, 0xFF	; 255
    25c0:	99 83       	std	Y+1, r25	; 0x01
    25c2:	88 83       	st	Y, r24
    25c4:	c6 59       	subi	r28, 0x96	; 150
    25c6:	d0 40       	sbci	r29, 0x00	; 0
    25c8:	88 ec       	ldi	r24, 0xC8	; 200
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	c8 56       	subi	r28, 0x68	; 104
    25ce:	df 4f       	sbci	r29, 0xFF	; 255
    25d0:	99 83       	std	Y+1, r25	; 0x01
    25d2:	88 83       	st	Y, r24
    25d4:	c8 59       	subi	r28, 0x98	; 152
    25d6:	d0 40       	sbci	r29, 0x00	; 0
    25d8:	98 e0       	ldi	r25, 0x08	; 8
    25da:	c6 56       	subi	r28, 0x66	; 102
    25dc:	df 4f       	sbci	r29, 0xFF	; 255
    25de:	98 83       	st	Y, r25
    25e0:	ca 59       	subi	r28, 0x9A	; 154
    25e2:	d0 40       	sbci	r29, 0x00	; 0
    25e4:	c8 56       	subi	r28, 0x68	; 104
    25e6:	df 4f       	sbci	r29, 0xFF	; 255
    25e8:	e8 81       	ld	r30, Y
    25ea:	f9 81       	ldd	r31, Y+1	; 0x01
    25ec:	c8 59       	subi	r28, 0x98	; 152
    25ee:	d0 40       	sbci	r29, 0x00	; 0
    25f0:	00 80       	ld	r0, Z
    25f2:	c8 56       	subi	r28, 0x68	; 104
    25f4:	df 4f       	sbci	r29, 0xFF	; 255
    25f6:	88 81       	ld	r24, Y
    25f8:	99 81       	ldd	r25, Y+1	; 0x01
    25fa:	c8 59       	subi	r28, 0x98	; 152
    25fc:	d0 40       	sbci	r29, 0x00	; 0
    25fe:	01 96       	adiw	r24, 0x01	; 1
    2600:	c8 56       	subi	r28, 0x68	; 104
    2602:	df 4f       	sbci	r29, 0xFF	; 255
    2604:	99 83       	std	Y+1, r25	; 0x01
    2606:	88 83       	st	Y, r24
    2608:	c8 59       	subi	r28, 0x98	; 152
    260a:	d0 40       	sbci	r29, 0x00	; 0
    260c:	ca 56       	subi	r28, 0x6A	; 106
    260e:	df 4f       	sbci	r29, 0xFF	; 255
    2610:	e8 81       	ld	r30, Y
    2612:	f9 81       	ldd	r31, Y+1	; 0x01
    2614:	c6 59       	subi	r28, 0x96	; 150
    2616:	d0 40       	sbci	r29, 0x00	; 0
    2618:	00 82       	st	Z, r0
    261a:	ca 56       	subi	r28, 0x6A	; 106
    261c:	df 4f       	sbci	r29, 0xFF	; 255
    261e:	88 81       	ld	r24, Y
    2620:	99 81       	ldd	r25, Y+1	; 0x01
    2622:	c6 59       	subi	r28, 0x96	; 150
    2624:	d0 40       	sbci	r29, 0x00	; 0
    2626:	01 96       	adiw	r24, 0x01	; 1
    2628:	ca 56       	subi	r28, 0x6A	; 106
    262a:	df 4f       	sbci	r29, 0xFF	; 255
    262c:	99 83       	std	Y+1, r25	; 0x01
    262e:	88 83       	st	Y, r24
    2630:	c6 59       	subi	r28, 0x96	; 150
    2632:	d0 40       	sbci	r29, 0x00	; 0
    2634:	c6 56       	subi	r28, 0x66	; 102
    2636:	df 4f       	sbci	r29, 0xFF	; 255
    2638:	98 81       	ld	r25, Y
    263a:	ca 59       	subi	r28, 0x9A	; 154
    263c:	d0 40       	sbci	r29, 0x00	; 0
    263e:	91 50       	subi	r25, 0x01	; 1
    2640:	c6 56       	subi	r28, 0x66	; 102
    2642:	df 4f       	sbci	r29, 0xFF	; 255
    2644:	98 83       	st	Y, r25
    2646:	ca 59       	subi	r28, 0x9A	; 154
    2648:	d0 40       	sbci	r29, 0x00	; 0
    264a:	c6 56       	subi	r28, 0x66	; 102
    264c:	df 4f       	sbci	r29, 0xFF	; 255
    264e:	e8 81       	ld	r30, Y
    2650:	ca 59       	subi	r28, 0x9A	; 154
    2652:	d0 40       	sbci	r29, 0x00	; 0
    2654:	ee 23       	and	r30, r30
    2656:	31 f6       	brne	.-116    	; 0x25e4 <main+0x662>
				TIMER_setCallback(Buzzer_Stop,CMP_Mode,timer1);
    2658:	83 e4       	ldi	r24, 0x43	; 67
    265a:	9d e0       	ldi	r25, 0x0D	; 13
    265c:	61 e0       	ldi	r22, 0x01	; 1
    265e:	41 e0       	ldi	r20, 0x01	; 1
    2660:	0e 94 9f 1c 	call	0x393e	; 0x393e <TIMER_setCallback>
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	aa e7       	ldi	r26, 0x7A	; 122
    266a:	b4 e4       	ldi	r27, 0x44	; 68
    266c:	8f a3       	std	Y+39, r24	; 0x27
    266e:	98 a7       	std	Y+40, r25	; 0x28
    2670:	a9 a7       	std	Y+41, r26	; 0x29
    2672:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2674:	6f a1       	ldd	r22, Y+39	; 0x27
    2676:	78 a5       	ldd	r23, Y+40	; 0x28
    2678:	89 a5       	ldd	r24, Y+41	; 0x29
    267a:	9a a5       	ldd	r25, Y+42	; 0x2a
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	4a e7       	ldi	r20, 0x7A	; 122
    2682:	53 e4       	ldi	r21, 0x43	; 67
    2684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	8b a3       	std	Y+35, r24	; 0x23
    268e:	9c a3       	std	Y+36, r25	; 0x24
    2690:	ad a3       	std	Y+37, r26	; 0x25
    2692:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2694:	6b a1       	ldd	r22, Y+35	; 0x23
    2696:	7c a1       	ldd	r23, Y+36	; 0x24
    2698:	8d a1       	ldd	r24, Y+37	; 0x25
    269a:	9e a1       	ldd	r25, Y+38	; 0x26
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	40 e8       	ldi	r20, 0x80	; 128
    26a2:	5f e3       	ldi	r21, 0x3F	; 63
    26a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26a8:	88 23       	and	r24, r24
    26aa:	2c f4       	brge	.+10     	; 0x26b6 <main+0x734>
		__ticks = 1;
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	9a a3       	std	Y+34, r25	; 0x22
    26b2:	89 a3       	std	Y+33, r24	; 0x21
    26b4:	3f c0       	rjmp	.+126    	; 0x2734 <main+0x7b2>
	else if (__tmp > 65535)
    26b6:	6b a1       	ldd	r22, Y+35	; 0x23
    26b8:	7c a1       	ldd	r23, Y+36	; 0x24
    26ba:	8d a1       	ldd	r24, Y+37	; 0x25
    26bc:	9e a1       	ldd	r25, Y+38	; 0x26
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	3f ef       	ldi	r19, 0xFF	; 255
    26c2:	4f e7       	ldi	r20, 0x7F	; 127
    26c4:	57 e4       	ldi	r21, 0x47	; 71
    26c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26ca:	18 16       	cp	r1, r24
    26cc:	4c f5       	brge	.+82     	; 0x2720 <main+0x79e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ce:	6f a1       	ldd	r22, Y+39	; 0x27
    26d0:	78 a5       	ldd	r23, Y+40	; 0x28
    26d2:	89 a5       	ldd	r24, Y+41	; 0x29
    26d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e2       	ldi	r20, 0x20	; 32
    26dc:	51 e4       	ldi	r21, 0x41	; 65
    26de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	bc 01       	movw	r22, r24
    26e8:	cd 01       	movw	r24, r26
    26ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	9a a3       	std	Y+34, r25	; 0x22
    26f4:	89 a3       	std	Y+33, r24	; 0x21
    26f6:	0f c0       	rjmp	.+30     	; 0x2716 <main+0x794>
    26f8:	89 e1       	ldi	r24, 0x19	; 25
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	98 a3       	std	Y+32, r25	; 0x20
    26fe:	8f 8f       	std	Y+31, r24	; 0x1f
    2700:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2702:	98 a1       	ldd	r25, Y+32	; 0x20
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	f1 f7       	brne	.-4      	; 0x2704 <main+0x782>
    2708:	98 a3       	std	Y+32, r25	; 0x20
    270a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    270c:	89 a1       	ldd	r24, Y+33	; 0x21
    270e:	9a a1       	ldd	r25, Y+34	; 0x22
    2710:	01 97       	sbiw	r24, 0x01	; 1
    2712:	9a a3       	std	Y+34, r25	; 0x22
    2714:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2716:	89 a1       	ldd	r24, Y+33	; 0x21
    2718:	9a a1       	ldd	r25, Y+34	; 0x22
    271a:	00 97       	sbiw	r24, 0x00	; 0
    271c:	69 f7       	brne	.-38     	; 0x26f8 <main+0x776>
    271e:	14 c0       	rjmp	.+40     	; 0x2748 <main+0x7c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2720:	6b a1       	ldd	r22, Y+35	; 0x23
    2722:	7c a1       	ldd	r23, Y+36	; 0x24
    2724:	8d a1       	ldd	r24, Y+37	; 0x25
    2726:	9e a1       	ldd	r25, Y+38	; 0x26
    2728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	9a a3       	std	Y+34, r25	; 0x22
    2732:	89 a3       	std	Y+33, r24	; 0x21
    2734:	89 a1       	ldd	r24, Y+33	; 0x21
    2736:	9a a1       	ldd	r25, Y+34	; 0x22
    2738:	9e 8f       	std	Y+30, r25	; 0x1e
    273a:	8d 8f       	std	Y+29, r24	; 0x1d
    273c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    273e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	f1 f7       	brne	.-4      	; 0x2740 <main+0x7be>
    2744:	9e 8f       	std	Y+30, r25	; 0x1e
    2746:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(1000);
				TIMER_init(&config);
    2748:	ce 01       	movw	r24, r28
    274a:	87 57       	subi	r24, 0x77	; 119
    274c:	9f 4f       	sbci	r25, 0xFF	; 255
    274e:	0e 94 a6 1a 	call	0x354c	; 0x354c <TIMER_init>
				LCD_clearScreen();
    2752:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <LCD_clearScreen>
    2756:	7a c0       	rjmp	.+244    	; 0x284c <main+0x8ca>
				while(g_buzzerflag == 1)
				{
					LCD_moveCursor(0,4);
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	64 e0       	ldi	r22, 0x04	; 4
    275c:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <LCD_moveCursor>
					LCD_displayString("ERROR!!!");
    2760:	8f ea       	ldi	r24, 0xAF	; 175
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	0e 94 c3 18 	call	0x3186	; 0x3186 <LCD_displayString>
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	aa ef       	ldi	r26, 0xFA	; 250
    276e:	b3 e4       	ldi	r27, 0x43	; 67
    2770:	89 8f       	std	Y+25, r24	; 0x19
    2772:	9a 8f       	std	Y+26, r25	; 0x1a
    2774:	ab 8f       	std	Y+27, r26	; 0x1b
    2776:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2778:	69 8d       	ldd	r22, Y+25	; 0x19
    277a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    277c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    277e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	4a e7       	ldi	r20, 0x7A	; 122
    2786:	53 e4       	ldi	r21, 0x43	; 67
    2788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	8d 8b       	std	Y+21, r24	; 0x15
    2792:	9e 8b       	std	Y+22, r25	; 0x16
    2794:	af 8b       	std	Y+23, r26	; 0x17
    2796:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2798:	6d 89       	ldd	r22, Y+21	; 0x15
    279a:	7e 89       	ldd	r23, Y+22	; 0x16
    279c:	8f 89       	ldd	r24, Y+23	; 0x17
    279e:	98 8d       	ldd	r25, Y+24	; 0x18
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	40 e8       	ldi	r20, 0x80	; 128
    27a6:	5f e3       	ldi	r21, 0x3F	; 63
    27a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ac:	88 23       	and	r24, r24
    27ae:	2c f4       	brge	.+10     	; 0x27ba <main+0x838>
		__ticks = 1;
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	9c 8b       	std	Y+20, r25	; 0x14
    27b6:	8b 8b       	std	Y+19, r24	; 0x13
    27b8:	3f c0       	rjmp	.+126    	; 0x2838 <main+0x8b6>
	else if (__tmp > 65535)
    27ba:	6d 89       	ldd	r22, Y+21	; 0x15
    27bc:	7e 89       	ldd	r23, Y+22	; 0x16
    27be:	8f 89       	ldd	r24, Y+23	; 0x17
    27c0:	98 8d       	ldd	r25, Y+24	; 0x18
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	3f ef       	ldi	r19, 0xFF	; 255
    27c6:	4f e7       	ldi	r20, 0x7F	; 127
    27c8:	57 e4       	ldi	r21, 0x47	; 71
    27ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ce:	18 16       	cp	r1, r24
    27d0:	4c f5       	brge	.+82     	; 0x2824 <main+0x8a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d2:	69 8d       	ldd	r22, Y+25	; 0x19
    27d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	40 e2       	ldi	r20, 0x20	; 32
    27e0:	51 e4       	ldi	r21, 0x41	; 65
    27e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	bc 01       	movw	r22, r24
    27ec:	cd 01       	movw	r24, r26
    27ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	9c 8b       	std	Y+20, r25	; 0x14
    27f8:	8b 8b       	std	Y+19, r24	; 0x13
    27fa:	0f c0       	rjmp	.+30     	; 0x281a <main+0x898>
    27fc:	89 e1       	ldi	r24, 0x19	; 25
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	9a 8b       	std	Y+18, r25	; 0x12
    2802:	89 8b       	std	Y+17, r24	; 0x11
    2804:	89 89       	ldd	r24, Y+17	; 0x11
    2806:	9a 89       	ldd	r25, Y+18	; 0x12
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	f1 f7       	brne	.-4      	; 0x2808 <main+0x886>
    280c:	9a 8b       	std	Y+18, r25	; 0x12
    280e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2810:	8b 89       	ldd	r24, Y+19	; 0x13
    2812:	9c 89       	ldd	r25, Y+20	; 0x14
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	9c 8b       	std	Y+20, r25	; 0x14
    2818:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281a:	8b 89       	ldd	r24, Y+19	; 0x13
    281c:	9c 89       	ldd	r25, Y+20	; 0x14
    281e:	00 97       	sbiw	r24, 0x00	; 0
    2820:	69 f7       	brne	.-38     	; 0x27fc <main+0x87a>
    2822:	14 c0       	rjmp	.+40     	; 0x284c <main+0x8ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2824:	6d 89       	ldd	r22, Y+21	; 0x15
    2826:	7e 89       	ldd	r23, Y+22	; 0x16
    2828:	8f 89       	ldd	r24, Y+23	; 0x17
    282a:	98 8d       	ldd	r25, Y+24	; 0x18
    282c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	9c 8b       	std	Y+20, r25	; 0x14
    2836:	8b 8b       	std	Y+19, r24	; 0x13
    2838:	8b 89       	ldd	r24, Y+19	; 0x13
    283a:	9c 89       	ldd	r25, Y+20	; 0x14
    283c:	98 8b       	std	Y+16, r25	; 0x10
    283e:	8f 87       	std	Y+15, r24	; 0x0f
    2840:	8f 85       	ldd	r24, Y+15	; 0x0f
    2842:	98 89       	ldd	r25, Y+16	; 0x10
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	f1 f7       	brne	.-4      	; 0x2844 <main+0x8c2>
    2848:	98 8b       	std	Y+16, r25	; 0x10
    284a:	8f 87       	std	Y+15, r24	; 0x0f
				TIMER_Configuration config={timer1,CMP_Mode,0,58594,F_cpu_1024,0};
				TIMER_setCallback(Buzzer_Stop,CMP_Mode,timer1);
				_delay_ms(1000);
				TIMER_init(&config);
				LCD_clearScreen();
				while(g_buzzerflag == 1)
    284c:	80 91 d6 00 	lds	r24, 0x00D6
    2850:	81 30       	cpi	r24, 0x01	; 1
    2852:	09 f4       	brne	.+2      	; 0x2856 <main+0x8d4>
    2854:	81 cf       	rjmp	.-254    	; 0x2758 <main+0x7d6>
				{
					LCD_moveCursor(0,4);
					LCD_displayString("ERROR!!!");
					_delay_ms(500);
				}
				LCD_clearScreen();
    2856:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <LCD_clearScreen>
    285a:	d4 cc       	rjmp	.-1624   	; 0x2204 <main+0x282>
			}
		}
		else if(option == '-')
    285c:	fe 01       	movw	r30, r28
    285e:	ec 59       	subi	r30, 0x9C	; 156
    2860:	ff 4f       	sbci	r31, 0xFF	; 255
    2862:	80 81       	ld	r24, Z
    2864:	8d 32       	cpi	r24, 0x2D	; 45
    2866:	09 f0       	breq	.+2      	; 0x286a <main+0x8e8>
    2868:	cd cc       	rjmp	.-1638   	; 0x2204 <main+0x282>
		{
			/*
			 * if the option = '-' .....> change the password
			 */
			UART_sendByte(option);
    286a:	fe 01       	movw	r30, r28
    286c:	ec 59       	subi	r30, 0x9C	; 156
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	80 81       	ld	r24, Z
    2872:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <UART_sendByte>
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	aa e7       	ldi	r26, 0x7A	; 122
    287c:	b4 e4       	ldi	r27, 0x44	; 68
    287e:	8b 87       	std	Y+11, r24	; 0x0b
    2880:	9c 87       	std	Y+12, r25	; 0x0c
    2882:	ad 87       	std	Y+13, r26	; 0x0d
    2884:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2886:	6b 85       	ldd	r22, Y+11	; 0x0b
    2888:	7c 85       	ldd	r23, Y+12	; 0x0c
    288a:	8d 85       	ldd	r24, Y+13	; 0x0d
    288c:	9e 85       	ldd	r25, Y+14	; 0x0e
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	4a e7       	ldi	r20, 0x7A	; 122
    2894:	53 e4       	ldi	r21, 0x43	; 67
    2896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	8f 83       	std	Y+7, r24	; 0x07
    28a0:	98 87       	std	Y+8, r25	; 0x08
    28a2:	a9 87       	std	Y+9, r26	; 0x09
    28a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28a6:	6f 81       	ldd	r22, Y+7	; 0x07
    28a8:	78 85       	ldd	r23, Y+8	; 0x08
    28aa:	89 85       	ldd	r24, Y+9	; 0x09
    28ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	40 e8       	ldi	r20, 0x80	; 128
    28b4:	5f e3       	ldi	r21, 0x3F	; 63
    28b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ba:	88 23       	and	r24, r24
    28bc:	2c f4       	brge	.+10     	; 0x28c8 <main+0x946>
		__ticks = 1;
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	9e 83       	std	Y+6, r25	; 0x06
    28c4:	8d 83       	std	Y+5, r24	; 0x05
    28c6:	3f c0       	rjmp	.+126    	; 0x2946 <main+0x9c4>
	else if (__tmp > 65535)
    28c8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ca:	78 85       	ldd	r23, Y+8	; 0x08
    28cc:	89 85       	ldd	r24, Y+9	; 0x09
    28ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	3f ef       	ldi	r19, 0xFF	; 255
    28d4:	4f e7       	ldi	r20, 0x7F	; 127
    28d6:	57 e4       	ldi	r21, 0x47	; 71
    28d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28dc:	18 16       	cp	r1, r24
    28de:	4c f5       	brge	.+82     	; 0x2932 <main+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	40 e2       	ldi	r20, 0x20	; 32
    28ee:	51 e4       	ldi	r21, 0x41	; 65
    28f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	bc 01       	movw	r22, r24
    28fa:	cd 01       	movw	r24, r26
    28fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	9e 83       	std	Y+6, r25	; 0x06
    2906:	8d 83       	std	Y+5, r24	; 0x05
    2908:	0f c0       	rjmp	.+30     	; 0x2928 <main+0x9a6>
    290a:	89 e1       	ldi	r24, 0x19	; 25
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	9c 83       	std	Y+4, r25	; 0x04
    2910:	8b 83       	std	Y+3, r24	; 0x03
    2912:	8b 81       	ldd	r24, Y+3	; 0x03
    2914:	9c 81       	ldd	r25, Y+4	; 0x04
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	f1 f7       	brne	.-4      	; 0x2916 <main+0x994>
    291a:	9c 83       	std	Y+4, r25	; 0x04
    291c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    291e:	8d 81       	ldd	r24, Y+5	; 0x05
    2920:	9e 81       	ldd	r25, Y+6	; 0x06
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	9e 83       	std	Y+6, r25	; 0x06
    2926:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2928:	8d 81       	ldd	r24, Y+5	; 0x05
    292a:	9e 81       	ldd	r25, Y+6	; 0x06
    292c:	00 97       	sbiw	r24, 0x00	; 0
    292e:	69 f7       	brne	.-38     	; 0x290a <main+0x988>
    2930:	14 c0       	rjmp	.+40     	; 0x295a <main+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2932:	6f 81       	ldd	r22, Y+7	; 0x07
    2934:	78 85       	ldd	r23, Y+8	; 0x08
    2936:	89 85       	ldd	r24, Y+9	; 0x09
    2938:	9a 85       	ldd	r25, Y+10	; 0x0a
    293a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	9e 83       	std	Y+6, r25	; 0x06
    2944:	8d 83       	std	Y+5, r24	; 0x05
    2946:	8d 81       	ldd	r24, Y+5	; 0x05
    2948:	9e 81       	ldd	r25, Y+6	; 0x06
    294a:	9a 83       	std	Y+2, r25	; 0x02
    294c:	89 83       	std	Y+1, r24	; 0x01
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	9a 81       	ldd	r25, Y+2	; 0x02
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	f1 f7       	brne	.-4      	; 0x2952 <main+0x9d0>
    2956:	9a 83       	std	Y+2, r25	; 0x02
    2958:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			flag=0;
    295a:	fe 01       	movw	r30, r28
    295c:	eb 59       	subi	r30, 0x9B	; 155
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	10 82       	st	Z, r1
			Change_Pass(flag);
    2962:	fe 01       	movw	r30, r28
    2964:	eb 59       	subi	r30, 0x9B	; 155
    2966:	ff 4f       	sbci	r31, 0xFF	; 255
    2968:	80 81       	ld	r24, Z
    296a:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <Change_Pass>
    296e:	4a cc       	rjmp	.-1900   	; 0x2204 <main+0x282>

00002970 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2970:	df 93       	push	r29
    2972:	cf 93       	push	r28
    2974:	cd b7       	in	r28, 0x3d	; 61
    2976:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2978:	83 e0       	ldi	r24, 0x03	; 3
    297a:	62 e0       	ldi	r22, 0x02	; 2
    297c:	41 e0       	ldi	r20, 0x01	; 1
    297e:	0e 94 a3 06 	call	0xd46	; 0xd46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2982:	83 e0       	ldi	r24, 0x03	; 3
    2984:	63 e0       	ldi	r22, 0x03	; 3
    2986:	41 e0       	ldi	r20, 0x01	; 1
    2988:	0e 94 a3 06 	call	0xd46	; 0xd46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    298c:	83 e0       	ldi	r24, 0x03	; 3
    298e:	64 e0       	ldi	r22, 0x04	; 4
    2990:	41 e0       	ldi	r20, 0x01	; 1
    2992:	0e 94 a3 06 	call	0xd46	; 0xd46 <GPIO_setupPinDirection>

	/* Configure the data port as output port */

#if(LCD_DB==8)
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2996:	82 e0       	ldi	r24, 0x02	; 2
    2998:	6f ef       	ldi	r22, 0xFF	; 255
    299a:	0e 94 14 09 	call	0x1228	; 0x1228 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    299e:	88 e3       	ldi	r24, 0x38	; 56
    29a0:	0e 94 db 14 	call	0x29b6	; 0x29b6 <LCD_sendCommand>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,PIN2_ID,PIN_OUTPUT);
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,PIN3_ID,PIN_OUTPUT);
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
#endif
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    29a4:	8c e0       	ldi	r24, 0x0C	; 12
    29a6:	0e 94 db 14 	call	0x29b6	; 0x29b6 <LCD_sendCommand>

	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	0e 94 db 14 	call	0x29b6	; 0x29b6 <LCD_sendCommand>

}
    29b0:	cf 91       	pop	r28
    29b2:	df 91       	pop	r29
    29b4:	08 95       	ret

000029b6 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    29b6:	df 93       	push	r29
    29b8:	cf 93       	push	r28
    29ba:	cd b7       	in	r28, 0x3d	; 61
    29bc:	de b7       	in	r29, 0x3e	; 62
    29be:	e9 97       	sbiw	r28, 0x39	; 57
    29c0:	0f b6       	in	r0, 0x3f	; 63
    29c2:	f8 94       	cli
    29c4:	de bf       	out	0x3e, r29	; 62
    29c6:	0f be       	out	0x3f, r0	; 63
    29c8:	cd bf       	out	0x3d, r28	; 61
    29ca:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    29cc:	83 e0       	ldi	r24, 0x03	; 3
    29ce:	62 e0       	ldi	r22, 0x02	; 2
    29d0:	40 e0       	ldi	r20, 0x00	; 0
    29d2:	0e 94 8e 07 	call	0xf1c	; 0xf1c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    29d6:	83 e0       	ldi	r24, 0x03	; 3
    29d8:	63 e0       	ldi	r22, 0x03	; 3
    29da:	40 e0       	ldi	r20, 0x00	; 0
    29dc:	0e 94 8e 07 	call	0xf1c	; 0xf1c <GPIO_writePin>
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	a0 e8       	ldi	r26, 0x80	; 128
    29e6:	bf e3       	ldi	r27, 0x3F	; 63
    29e8:	8d ab       	std	Y+53, r24	; 0x35
    29ea:	9e ab       	std	Y+54, r25	; 0x36
    29ec:	af ab       	std	Y+55, r26	; 0x37
    29ee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f0:	6d a9       	ldd	r22, Y+53	; 0x35
    29f2:	7e a9       	ldd	r23, Y+54	; 0x36
    29f4:	8f a9       	ldd	r24, Y+55	; 0x37
    29f6:	98 ad       	ldd	r25, Y+56	; 0x38
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	4a e7       	ldi	r20, 0x7A	; 122
    29fe:	53 e4       	ldi	r21, 0x43	; 67
    2a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	89 ab       	std	Y+49, r24	; 0x31
    2a0a:	9a ab       	std	Y+50, r25	; 0x32
    2a0c:	ab ab       	std	Y+51, r26	; 0x33
    2a0e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a10:	69 a9       	ldd	r22, Y+49	; 0x31
    2a12:	7a a9       	ldd	r23, Y+50	; 0x32
    2a14:	8b a9       	ldd	r24, Y+51	; 0x33
    2a16:	9c a9       	ldd	r25, Y+52	; 0x34
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	40 e8       	ldi	r20, 0x80	; 128
    2a1e:	5f e3       	ldi	r21, 0x3F	; 63
    2a20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a24:	88 23       	and	r24, r24
    2a26:	2c f4       	brge	.+10     	; 0x2a32 <LCD_sendCommand+0x7c>
		__ticks = 1;
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	98 ab       	std	Y+48, r25	; 0x30
    2a2e:	8f a7       	std	Y+47, r24	; 0x2f
    2a30:	3f c0       	rjmp	.+126    	; 0x2ab0 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    2a32:	69 a9       	ldd	r22, Y+49	; 0x31
    2a34:	7a a9       	ldd	r23, Y+50	; 0x32
    2a36:	8b a9       	ldd	r24, Y+51	; 0x33
    2a38:	9c a9       	ldd	r25, Y+52	; 0x34
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	3f ef       	ldi	r19, 0xFF	; 255
    2a3e:	4f e7       	ldi	r20, 0x7F	; 127
    2a40:	57 e4       	ldi	r21, 0x47	; 71
    2a42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a46:	18 16       	cp	r1, r24
    2a48:	4c f5       	brge	.+82     	; 0x2a9c <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a4a:	6d a9       	ldd	r22, Y+53	; 0x35
    2a4c:	7e a9       	ldd	r23, Y+54	; 0x36
    2a4e:	8f a9       	ldd	r24, Y+55	; 0x37
    2a50:	98 ad       	ldd	r25, Y+56	; 0x38
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	40 e2       	ldi	r20, 0x20	; 32
    2a58:	51 e4       	ldi	r21, 0x41	; 65
    2a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	bc 01       	movw	r22, r24
    2a64:	cd 01       	movw	r24, r26
    2a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	98 ab       	std	Y+48, r25	; 0x30
    2a70:	8f a7       	std	Y+47, r24	; 0x2f
    2a72:	0f c0       	rjmp	.+30     	; 0x2a92 <LCD_sendCommand+0xdc>
    2a74:	89 e1       	ldi	r24, 0x19	; 25
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	9e a7       	std	Y+46, r25	; 0x2e
    2a7a:	8d a7       	std	Y+45, r24	; 0x2d
    2a7c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a7e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	f1 f7       	brne	.-4      	; 0x2a80 <LCD_sendCommand+0xca>
    2a84:	9e a7       	std	Y+46, r25	; 0x2e
    2a86:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a88:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a8a:	98 a9       	ldd	r25, Y+48	; 0x30
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	98 ab       	std	Y+48, r25	; 0x30
    2a90:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a92:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a94:	98 a9       	ldd	r25, Y+48	; 0x30
    2a96:	00 97       	sbiw	r24, 0x00	; 0
    2a98:	69 f7       	brne	.-38     	; 0x2a74 <LCD_sendCommand+0xbe>
    2a9a:	14 c0       	rjmp	.+40     	; 0x2ac4 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a9c:	69 a9       	ldd	r22, Y+49	; 0x31
    2a9e:	7a a9       	ldd	r23, Y+50	; 0x32
    2aa0:	8b a9       	ldd	r24, Y+51	; 0x33
    2aa2:	9c a9       	ldd	r25, Y+52	; 0x34
    2aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	98 ab       	std	Y+48, r25	; 0x30
    2aae:	8f a7       	std	Y+47, r24	; 0x2f
    2ab0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ab2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ab4:	9c a7       	std	Y+44, r25	; 0x2c
    2ab6:	8b a7       	std	Y+43, r24	; 0x2b
    2ab8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2aba:	9c a5       	ldd	r25, Y+44	; 0x2c
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	f1 f7       	brne	.-4      	; 0x2abc <LCD_sendCommand+0x106>
    2ac0:	9c a7       	std	Y+44, r25	; 0x2c
    2ac2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
#if(LCD_DB == 8)
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2ac4:	83 e0       	ldi	r24, 0x03	; 3
    2ac6:	64 e0       	ldi	r22, 0x04	; 4
    2ac8:	41 e0       	ldi	r20, 0x01	; 1
    2aca:	0e 94 8e 07 	call	0xf1c	; 0xf1c <GPIO_writePin>
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	a0 e8       	ldi	r26, 0x80	; 128
    2ad4:	bf e3       	ldi	r27, 0x3F	; 63
    2ad6:	8f a3       	std	Y+39, r24	; 0x27
    2ad8:	98 a7       	std	Y+40, r25	; 0x28
    2ada:	a9 a7       	std	Y+41, r26	; 0x29
    2adc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ade:	6f a1       	ldd	r22, Y+39	; 0x27
    2ae0:	78 a5       	ldd	r23, Y+40	; 0x28
    2ae2:	89 a5       	ldd	r24, Y+41	; 0x29
    2ae4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	4a e7       	ldi	r20, 0x7A	; 122
    2aec:	53 e4       	ldi	r21, 0x43	; 67
    2aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	8b a3       	std	Y+35, r24	; 0x23
    2af8:	9c a3       	std	Y+36, r25	; 0x24
    2afa:	ad a3       	std	Y+37, r26	; 0x25
    2afc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2afe:	6b a1       	ldd	r22, Y+35	; 0x23
    2b00:	7c a1       	ldd	r23, Y+36	; 0x24
    2b02:	8d a1       	ldd	r24, Y+37	; 0x25
    2b04:	9e a1       	ldd	r25, Y+38	; 0x26
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e8       	ldi	r20, 0x80	; 128
    2b0c:	5f e3       	ldi	r21, 0x3F	; 63
    2b0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b12:	88 23       	and	r24, r24
    2b14:	2c f4       	brge	.+10     	; 0x2b20 <LCD_sendCommand+0x16a>
		__ticks = 1;
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	9a a3       	std	Y+34, r25	; 0x22
    2b1c:	89 a3       	std	Y+33, r24	; 0x21
    2b1e:	3f c0       	rjmp	.+126    	; 0x2b9e <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    2b20:	6b a1       	ldd	r22, Y+35	; 0x23
    2b22:	7c a1       	ldd	r23, Y+36	; 0x24
    2b24:	8d a1       	ldd	r24, Y+37	; 0x25
    2b26:	9e a1       	ldd	r25, Y+38	; 0x26
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	3f ef       	ldi	r19, 0xFF	; 255
    2b2c:	4f e7       	ldi	r20, 0x7F	; 127
    2b2e:	57 e4       	ldi	r21, 0x47	; 71
    2b30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b34:	18 16       	cp	r1, r24
    2b36:	4c f5       	brge	.+82     	; 0x2b8a <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b38:	6f a1       	ldd	r22, Y+39	; 0x27
    2b3a:	78 a5       	ldd	r23, Y+40	; 0x28
    2b3c:	89 a5       	ldd	r24, Y+41	; 0x29
    2b3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	40 e2       	ldi	r20, 0x20	; 32
    2b46:	51 e4       	ldi	r21, 0x41	; 65
    2b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	bc 01       	movw	r22, r24
    2b52:	cd 01       	movw	r24, r26
    2b54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	9a a3       	std	Y+34, r25	; 0x22
    2b5e:	89 a3       	std	Y+33, r24	; 0x21
    2b60:	0f c0       	rjmp	.+30     	; 0x2b80 <LCD_sendCommand+0x1ca>
    2b62:	89 e1       	ldi	r24, 0x19	; 25
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	98 a3       	std	Y+32, r25	; 0x20
    2b68:	8f 8f       	std	Y+31, r24	; 0x1f
    2b6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b6c:	98 a1       	ldd	r25, Y+32	; 0x20
    2b6e:	01 97       	sbiw	r24, 0x01	; 1
    2b70:	f1 f7       	brne	.-4      	; 0x2b6e <LCD_sendCommand+0x1b8>
    2b72:	98 a3       	std	Y+32, r25	; 0x20
    2b74:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b76:	89 a1       	ldd	r24, Y+33	; 0x21
    2b78:	9a a1       	ldd	r25, Y+34	; 0x22
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	9a a3       	std	Y+34, r25	; 0x22
    2b7e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b80:	89 a1       	ldd	r24, Y+33	; 0x21
    2b82:	9a a1       	ldd	r25, Y+34	; 0x22
    2b84:	00 97       	sbiw	r24, 0x00	; 0
    2b86:	69 f7       	brne	.-38     	; 0x2b62 <LCD_sendCommand+0x1ac>
    2b88:	14 c0       	rjmp	.+40     	; 0x2bb2 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b8c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b8e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b90:	9e a1       	ldd	r25, Y+38	; 0x26
    2b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	9a a3       	std	Y+34, r25	; 0x22
    2b9c:	89 a3       	std	Y+33, r24	; 0x21
    2b9e:	89 a1       	ldd	r24, Y+33	; 0x21
    2ba0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ba2:	9e 8f       	std	Y+30, r25	; 0x1e
    2ba4:	8d 8f       	std	Y+29, r24	; 0x1d
    2ba6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ba8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2baa:	01 97       	sbiw	r24, 0x01	; 1
    2bac:	f1 f7       	brne	.-4      	; 0x2baa <LCD_sendCommand+0x1f4>
    2bae:	9e 8f       	std	Y+30, r25	; 0x1e
    2bb0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2bb2:	82 e0       	ldi	r24, 0x02	; 2
    2bb4:	69 ad       	ldd	r22, Y+57	; 0x39
    2bb6:	0e 94 58 09 	call	0x12b0	; 0x12b0 <GPIO_writePort>
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	a0 e8       	ldi	r26, 0x80	; 128
    2bc0:	bf e3       	ldi	r27, 0x3F	; 63
    2bc2:	89 8f       	std	Y+25, r24	; 0x19
    2bc4:	9a 8f       	std	Y+26, r25	; 0x1a
    2bc6:	ab 8f       	std	Y+27, r26	; 0x1b
    2bc8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bca:	69 8d       	ldd	r22, Y+25	; 0x19
    2bcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	4a e7       	ldi	r20, 0x7A	; 122
    2bd8:	53 e4       	ldi	r21, 0x43	; 67
    2bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	8d 8b       	std	Y+21, r24	; 0x15
    2be4:	9e 8b       	std	Y+22, r25	; 0x16
    2be6:	af 8b       	std	Y+23, r26	; 0x17
    2be8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bea:	6d 89       	ldd	r22, Y+21	; 0x15
    2bec:	7e 89       	ldd	r23, Y+22	; 0x16
    2bee:	8f 89       	ldd	r24, Y+23	; 0x17
    2bf0:	98 8d       	ldd	r25, Y+24	; 0x18
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e8       	ldi	r20, 0x80	; 128
    2bf8:	5f e3       	ldi	r21, 0x3F	; 63
    2bfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bfe:	88 23       	and	r24, r24
    2c00:	2c f4       	brge	.+10     	; 0x2c0c <LCD_sendCommand+0x256>
		__ticks = 1;
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	9c 8b       	std	Y+20, r25	; 0x14
    2c08:	8b 8b       	std	Y+19, r24	; 0x13
    2c0a:	3f c0       	rjmp	.+126    	; 0x2c8a <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    2c0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c10:	8f 89       	ldd	r24, Y+23	; 0x17
    2c12:	98 8d       	ldd	r25, Y+24	; 0x18
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	3f ef       	ldi	r19, 0xFF	; 255
    2c18:	4f e7       	ldi	r20, 0x7F	; 127
    2c1a:	57 e4       	ldi	r21, 0x47	; 71
    2c1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c20:	18 16       	cp	r1, r24
    2c22:	4c f5       	brge	.+82     	; 0x2c76 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c24:	69 8d       	ldd	r22, Y+25	; 0x19
    2c26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	40 e2       	ldi	r20, 0x20	; 32
    2c32:	51 e4       	ldi	r21, 0x41	; 65
    2c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	bc 01       	movw	r22, r24
    2c3e:	cd 01       	movw	r24, r26
    2c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	9c 8b       	std	Y+20, r25	; 0x14
    2c4a:	8b 8b       	std	Y+19, r24	; 0x13
    2c4c:	0f c0       	rjmp	.+30     	; 0x2c6c <LCD_sendCommand+0x2b6>
    2c4e:	89 e1       	ldi	r24, 0x19	; 25
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	9a 8b       	std	Y+18, r25	; 0x12
    2c54:	89 8b       	std	Y+17, r24	; 0x11
    2c56:	89 89       	ldd	r24, Y+17	; 0x11
    2c58:	9a 89       	ldd	r25, Y+18	; 0x12
    2c5a:	01 97       	sbiw	r24, 0x01	; 1
    2c5c:	f1 f7       	brne	.-4      	; 0x2c5a <LCD_sendCommand+0x2a4>
    2c5e:	9a 8b       	std	Y+18, r25	; 0x12
    2c60:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c62:	8b 89       	ldd	r24, Y+19	; 0x13
    2c64:	9c 89       	ldd	r25, Y+20	; 0x14
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	9c 8b       	std	Y+20, r25	; 0x14
    2c6a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c70:	00 97       	sbiw	r24, 0x00	; 0
    2c72:	69 f7       	brne	.-38     	; 0x2c4e <LCD_sendCommand+0x298>
    2c74:	14 c0       	rjmp	.+40     	; 0x2c9e <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c76:	6d 89       	ldd	r22, Y+21	; 0x15
    2c78:	7e 89       	ldd	r23, Y+22	; 0x16
    2c7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	9c 8b       	std	Y+20, r25	; 0x14
    2c88:	8b 8b       	std	Y+19, r24	; 0x13
    2c8a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c8c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c8e:	98 8b       	std	Y+16, r25	; 0x10
    2c90:	8f 87       	std	Y+15, r24	; 0x0f
    2c92:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c94:	98 89       	ldd	r25, Y+16	; 0x10
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	f1 f7       	brne	.-4      	; 0x2c96 <LCD_sendCommand+0x2e0>
    2c9a:	98 8b       	std	Y+16, r25	; 0x10
    2c9c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2c9e:	83 e0       	ldi	r24, 0x03	; 3
    2ca0:	64 e0       	ldi	r22, 0x04	; 4
    2ca2:	40 e0       	ldi	r20, 0x00	; 0
    2ca4:	0e 94 8e 07 	call	0xf1c	; 0xf1c <GPIO_writePin>
    2ca8:	80 e0       	ldi	r24, 0x00	; 0
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	a0 e8       	ldi	r26, 0x80	; 128
    2cae:	bf e3       	ldi	r27, 0x3F	; 63
    2cb0:	8b 87       	std	Y+11, r24	; 0x0b
    2cb2:	9c 87       	std	Y+12, r25	; 0x0c
    2cb4:	ad 87       	std	Y+13, r26	; 0x0d
    2cb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cba:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	4a e7       	ldi	r20, 0x7A	; 122
    2cc6:	53 e4       	ldi	r21, 0x43	; 67
    2cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	8f 83       	std	Y+7, r24	; 0x07
    2cd2:	98 87       	std	Y+8, r25	; 0x08
    2cd4:	a9 87       	std	Y+9, r26	; 0x09
    2cd6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cd8:	6f 81       	ldd	r22, Y+7	; 0x07
    2cda:	78 85       	ldd	r23, Y+8	; 0x08
    2cdc:	89 85       	ldd	r24, Y+9	; 0x09
    2cde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	40 e8       	ldi	r20, 0x80	; 128
    2ce6:	5f e3       	ldi	r21, 0x3F	; 63
    2ce8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cec:	88 23       	and	r24, r24
    2cee:	2c f4       	brge	.+10     	; 0x2cfa <LCD_sendCommand+0x344>
		__ticks = 1;
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	9e 83       	std	Y+6, r25	; 0x06
    2cf6:	8d 83       	std	Y+5, r24	; 0x05
    2cf8:	3f c0       	rjmp	.+126    	; 0x2d78 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    2cfa:	6f 81       	ldd	r22, Y+7	; 0x07
    2cfc:	78 85       	ldd	r23, Y+8	; 0x08
    2cfe:	89 85       	ldd	r24, Y+9	; 0x09
    2d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	3f ef       	ldi	r19, 0xFF	; 255
    2d06:	4f e7       	ldi	r20, 0x7F	; 127
    2d08:	57 e4       	ldi	r21, 0x47	; 71
    2d0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d0e:	18 16       	cp	r1, r24
    2d10:	4c f5       	brge	.+82     	; 0x2d64 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	40 e2       	ldi	r20, 0x20	; 32
    2d20:	51 e4       	ldi	r21, 0x41	; 65
    2d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	bc 01       	movw	r22, r24
    2d2c:	cd 01       	movw	r24, r26
    2d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	9e 83       	std	Y+6, r25	; 0x06
    2d38:	8d 83       	std	Y+5, r24	; 0x05
    2d3a:	0f c0       	rjmp	.+30     	; 0x2d5a <LCD_sendCommand+0x3a4>
    2d3c:	89 e1       	ldi	r24, 0x19	; 25
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	9c 83       	std	Y+4, r25	; 0x04
    2d42:	8b 83       	std	Y+3, r24	; 0x03
    2d44:	8b 81       	ldd	r24, Y+3	; 0x03
    2d46:	9c 81       	ldd	r25, Y+4	; 0x04
    2d48:	01 97       	sbiw	r24, 0x01	; 1
    2d4a:	f1 f7       	brne	.-4      	; 0x2d48 <LCD_sendCommand+0x392>
    2d4c:	9c 83       	std	Y+4, r25	; 0x04
    2d4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d50:	8d 81       	ldd	r24, Y+5	; 0x05
    2d52:	9e 81       	ldd	r25, Y+6	; 0x06
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	9e 83       	std	Y+6, r25	; 0x06
    2d58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d5e:	00 97       	sbiw	r24, 0x00	; 0
    2d60:	69 f7       	brne	.-38     	; 0x2d3c <LCD_sendCommand+0x386>
    2d62:	14 c0       	rjmp	.+40     	; 0x2d8c <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d64:	6f 81       	ldd	r22, Y+7	; 0x07
    2d66:	78 85       	ldd	r23, Y+8	; 0x08
    2d68:	89 85       	ldd	r24, Y+9	; 0x09
    2d6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d70:	dc 01       	movw	r26, r24
    2d72:	cb 01       	movw	r24, r22
    2d74:	9e 83       	std	Y+6, r25	; 0x06
    2d76:	8d 83       	std	Y+5, r24	; 0x05
    2d78:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7c:	9a 83       	std	Y+2, r25	; 0x02
    2d7e:	89 83       	std	Y+1, r24	; 0x01
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	9a 81       	ldd	r25, Y+2	; 0x02
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	f1 f7       	brne	.-4      	; 0x2d84 <LCD_sendCommand+0x3ce>
    2d88:	9a 83       	std	Y+2, r25	; 0x02
    2d8a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,(command>>4)); /* out the second nibble required command to the data bus D4 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2d8c:	e9 96       	adiw	r28, 0x39	; 57
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	f8 94       	cli
    2d92:	de bf       	out	0x3e, r29	; 62
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	cd bf       	out	0x3d, r28	; 61
    2d98:	cf 91       	pop	r28
    2d9a:	df 91       	pop	r29
    2d9c:	08 95       	ret

00002d9e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2d9e:	df 93       	push	r29
    2da0:	cf 93       	push	r28
    2da2:	cd b7       	in	r28, 0x3d	; 61
    2da4:	de b7       	in	r29, 0x3e	; 62
    2da6:	e9 97       	sbiw	r28, 0x39	; 57
    2da8:	0f b6       	in	r0, 0x3f	; 63
    2daa:	f8 94       	cli
    2dac:	de bf       	out	0x3e, r29	; 62
    2dae:	0f be       	out	0x3f, r0	; 63
    2db0:	cd bf       	out	0x3d, r28	; 61
    2db2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2db4:	83 e0       	ldi	r24, 0x03	; 3
    2db6:	62 e0       	ldi	r22, 0x02	; 2
    2db8:	41 e0       	ldi	r20, 0x01	; 1
    2dba:	0e 94 8e 07 	call	0xf1c	; 0xf1c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2dbe:	83 e0       	ldi	r24, 0x03	; 3
    2dc0:	63 e0       	ldi	r22, 0x03	; 3
    2dc2:	40 e0       	ldi	r20, 0x00	; 0
    2dc4:	0e 94 8e 07 	call	0xf1c	; 0xf1c <GPIO_writePin>
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	a0 e8       	ldi	r26, 0x80	; 128
    2dce:	bf e3       	ldi	r27, 0x3F	; 63
    2dd0:	8d ab       	std	Y+53, r24	; 0x35
    2dd2:	9e ab       	std	Y+54, r25	; 0x36
    2dd4:	af ab       	std	Y+55, r26	; 0x37
    2dd6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dd8:	6d a9       	ldd	r22, Y+53	; 0x35
    2dda:	7e a9       	ldd	r23, Y+54	; 0x36
    2ddc:	8f a9       	ldd	r24, Y+55	; 0x37
    2dde:	98 ad       	ldd	r25, Y+56	; 0x38
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	4a e7       	ldi	r20, 0x7A	; 122
    2de6:	53 e4       	ldi	r21, 0x43	; 67
    2de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	89 ab       	std	Y+49, r24	; 0x31
    2df2:	9a ab       	std	Y+50, r25	; 0x32
    2df4:	ab ab       	std	Y+51, r26	; 0x33
    2df6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2df8:	69 a9       	ldd	r22, Y+49	; 0x31
    2dfa:	7a a9       	ldd	r23, Y+50	; 0x32
    2dfc:	8b a9       	ldd	r24, Y+51	; 0x33
    2dfe:	9c a9       	ldd	r25, Y+52	; 0x34
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	40 e8       	ldi	r20, 0x80	; 128
    2e06:	5f e3       	ldi	r21, 0x3F	; 63
    2e08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e0c:	88 23       	and	r24, r24
    2e0e:	2c f4       	brge	.+10     	; 0x2e1a <LCD_displayCharacter+0x7c>
		__ticks = 1;
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	98 ab       	std	Y+48, r25	; 0x30
    2e16:	8f a7       	std	Y+47, r24	; 0x2f
    2e18:	3f c0       	rjmp	.+126    	; 0x2e98 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    2e1a:	69 a9       	ldd	r22, Y+49	; 0x31
    2e1c:	7a a9       	ldd	r23, Y+50	; 0x32
    2e1e:	8b a9       	ldd	r24, Y+51	; 0x33
    2e20:	9c a9       	ldd	r25, Y+52	; 0x34
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	3f ef       	ldi	r19, 0xFF	; 255
    2e26:	4f e7       	ldi	r20, 0x7F	; 127
    2e28:	57 e4       	ldi	r21, 0x47	; 71
    2e2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e2e:	18 16       	cp	r1, r24
    2e30:	4c f5       	brge	.+82     	; 0x2e84 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e32:	6d a9       	ldd	r22, Y+53	; 0x35
    2e34:	7e a9       	ldd	r23, Y+54	; 0x36
    2e36:	8f a9       	ldd	r24, Y+55	; 0x37
    2e38:	98 ad       	ldd	r25, Y+56	; 0x38
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	40 e2       	ldi	r20, 0x20	; 32
    2e40:	51 e4       	ldi	r21, 0x41	; 65
    2e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e46:	dc 01       	movw	r26, r24
    2e48:	cb 01       	movw	r24, r22
    2e4a:	bc 01       	movw	r22, r24
    2e4c:	cd 01       	movw	r24, r26
    2e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	98 ab       	std	Y+48, r25	; 0x30
    2e58:	8f a7       	std	Y+47, r24	; 0x2f
    2e5a:	0f c0       	rjmp	.+30     	; 0x2e7a <LCD_displayCharacter+0xdc>
    2e5c:	89 e1       	ldi	r24, 0x19	; 25
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	9e a7       	std	Y+46, r25	; 0x2e
    2e62:	8d a7       	std	Y+45, r24	; 0x2d
    2e64:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e66:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e68:	01 97       	sbiw	r24, 0x01	; 1
    2e6a:	f1 f7       	brne	.-4      	; 0x2e68 <LCD_displayCharacter+0xca>
    2e6c:	9e a7       	std	Y+46, r25	; 0x2e
    2e6e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e70:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e72:	98 a9       	ldd	r25, Y+48	; 0x30
    2e74:	01 97       	sbiw	r24, 0x01	; 1
    2e76:	98 ab       	std	Y+48, r25	; 0x30
    2e78:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e7c:	98 a9       	ldd	r25, Y+48	; 0x30
    2e7e:	00 97       	sbiw	r24, 0x00	; 0
    2e80:	69 f7       	brne	.-38     	; 0x2e5c <LCD_displayCharacter+0xbe>
    2e82:	14 c0       	rjmp	.+40     	; 0x2eac <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e84:	69 a9       	ldd	r22, Y+49	; 0x31
    2e86:	7a a9       	ldd	r23, Y+50	; 0x32
    2e88:	8b a9       	ldd	r24, Y+51	; 0x33
    2e8a:	9c a9       	ldd	r25, Y+52	; 0x34
    2e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	98 ab       	std	Y+48, r25	; 0x30
    2e96:	8f a7       	std	Y+47, r24	; 0x2f
    2e98:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e9a:	98 a9       	ldd	r25, Y+48	; 0x30
    2e9c:	9c a7       	std	Y+44, r25	; 0x2c
    2e9e:	8b a7       	std	Y+43, r24	; 0x2b
    2ea0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ea2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ea4:	01 97       	sbiw	r24, 0x01	; 1
    2ea6:	f1 f7       	brne	.-4      	; 0x2ea4 <LCD_displayCharacter+0x106>
    2ea8:	9c a7       	std	Y+44, r25	; 0x2c
    2eaa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
#if(LCD_DB == 8)
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2eac:	83 e0       	ldi	r24, 0x03	; 3
    2eae:	64 e0       	ldi	r22, 0x04	; 4
    2eb0:	41 e0       	ldi	r20, 0x01	; 1
    2eb2:	0e 94 8e 07 	call	0xf1c	; 0xf1c <GPIO_writePin>
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	a0 e8       	ldi	r26, 0x80	; 128
    2ebc:	bf e3       	ldi	r27, 0x3F	; 63
    2ebe:	8f a3       	std	Y+39, r24	; 0x27
    2ec0:	98 a7       	std	Y+40, r25	; 0x28
    2ec2:	a9 a7       	std	Y+41, r26	; 0x29
    2ec4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec6:	6f a1       	ldd	r22, Y+39	; 0x27
    2ec8:	78 a5       	ldd	r23, Y+40	; 0x28
    2eca:	89 a5       	ldd	r24, Y+41	; 0x29
    2ecc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ece:	20 e0       	ldi	r18, 0x00	; 0
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	4a e7       	ldi	r20, 0x7A	; 122
    2ed4:	53 e4       	ldi	r21, 0x43	; 67
    2ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	8b a3       	std	Y+35, r24	; 0x23
    2ee0:	9c a3       	std	Y+36, r25	; 0x24
    2ee2:	ad a3       	std	Y+37, r26	; 0x25
    2ee4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ee6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ee8:	7c a1       	ldd	r23, Y+36	; 0x24
    2eea:	8d a1       	ldd	r24, Y+37	; 0x25
    2eec:	9e a1       	ldd	r25, Y+38	; 0x26
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	40 e8       	ldi	r20, 0x80	; 128
    2ef4:	5f e3       	ldi	r21, 0x3F	; 63
    2ef6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2efa:	88 23       	and	r24, r24
    2efc:	2c f4       	brge	.+10     	; 0x2f08 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	9a a3       	std	Y+34, r25	; 0x22
    2f04:	89 a3       	std	Y+33, r24	; 0x21
    2f06:	3f c0       	rjmp	.+126    	; 0x2f86 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2f08:	6b a1       	ldd	r22, Y+35	; 0x23
    2f0a:	7c a1       	ldd	r23, Y+36	; 0x24
    2f0c:	8d a1       	ldd	r24, Y+37	; 0x25
    2f0e:	9e a1       	ldd	r25, Y+38	; 0x26
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	3f ef       	ldi	r19, 0xFF	; 255
    2f14:	4f e7       	ldi	r20, 0x7F	; 127
    2f16:	57 e4       	ldi	r21, 0x47	; 71
    2f18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f1c:	18 16       	cp	r1, r24
    2f1e:	4c f5       	brge	.+82     	; 0x2f72 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f20:	6f a1       	ldd	r22, Y+39	; 0x27
    2f22:	78 a5       	ldd	r23, Y+40	; 0x28
    2f24:	89 a5       	ldd	r24, Y+41	; 0x29
    2f26:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	40 e2       	ldi	r20, 0x20	; 32
    2f2e:	51 e4       	ldi	r21, 0x41	; 65
    2f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	bc 01       	movw	r22, r24
    2f3a:	cd 01       	movw	r24, r26
    2f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f40:	dc 01       	movw	r26, r24
    2f42:	cb 01       	movw	r24, r22
    2f44:	9a a3       	std	Y+34, r25	; 0x22
    2f46:	89 a3       	std	Y+33, r24	; 0x21
    2f48:	0f c0       	rjmp	.+30     	; 0x2f68 <LCD_displayCharacter+0x1ca>
    2f4a:	89 e1       	ldi	r24, 0x19	; 25
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	98 a3       	std	Y+32, r25	; 0x20
    2f50:	8f 8f       	std	Y+31, r24	; 0x1f
    2f52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f54:	98 a1       	ldd	r25, Y+32	; 0x20
    2f56:	01 97       	sbiw	r24, 0x01	; 1
    2f58:	f1 f7       	brne	.-4      	; 0x2f56 <LCD_displayCharacter+0x1b8>
    2f5a:	98 a3       	std	Y+32, r25	; 0x20
    2f5c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f5e:	89 a1       	ldd	r24, Y+33	; 0x21
    2f60:	9a a1       	ldd	r25, Y+34	; 0x22
    2f62:	01 97       	sbiw	r24, 0x01	; 1
    2f64:	9a a3       	std	Y+34, r25	; 0x22
    2f66:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f68:	89 a1       	ldd	r24, Y+33	; 0x21
    2f6a:	9a a1       	ldd	r25, Y+34	; 0x22
    2f6c:	00 97       	sbiw	r24, 0x00	; 0
    2f6e:	69 f7       	brne	.-38     	; 0x2f4a <LCD_displayCharacter+0x1ac>
    2f70:	14 c0       	rjmp	.+40     	; 0x2f9a <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f72:	6b a1       	ldd	r22, Y+35	; 0x23
    2f74:	7c a1       	ldd	r23, Y+36	; 0x24
    2f76:	8d a1       	ldd	r24, Y+37	; 0x25
    2f78:	9e a1       	ldd	r25, Y+38	; 0x26
    2f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	9a a3       	std	Y+34, r25	; 0x22
    2f84:	89 a3       	std	Y+33, r24	; 0x21
    2f86:	89 a1       	ldd	r24, Y+33	; 0x21
    2f88:	9a a1       	ldd	r25, Y+34	; 0x22
    2f8a:	9e 8f       	std	Y+30, r25	; 0x1e
    2f8c:	8d 8f       	std	Y+29, r24	; 0x1d
    2f8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f90:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f92:	01 97       	sbiw	r24, 0x01	; 1
    2f94:	f1 f7       	brne	.-4      	; 0x2f92 <LCD_displayCharacter+0x1f4>
    2f96:	9e 8f       	std	Y+30, r25	; 0x1e
    2f98:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2f9a:	82 e0       	ldi	r24, 0x02	; 2
    2f9c:	69 ad       	ldd	r22, Y+57	; 0x39
    2f9e:	0e 94 58 09 	call	0x12b0	; 0x12b0 <GPIO_writePort>
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	a0 e8       	ldi	r26, 0x80	; 128
    2fa8:	bf e3       	ldi	r27, 0x3F	; 63
    2faa:	89 8f       	std	Y+25, r24	; 0x19
    2fac:	9a 8f       	std	Y+26, r25	; 0x1a
    2fae:	ab 8f       	std	Y+27, r26	; 0x1b
    2fb0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb2:	69 8d       	ldd	r22, Y+25	; 0x19
    2fb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	4a e7       	ldi	r20, 0x7A	; 122
    2fc0:	53 e4       	ldi	r21, 0x43	; 67
    2fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	8d 8b       	std	Y+21, r24	; 0x15
    2fcc:	9e 8b       	std	Y+22, r25	; 0x16
    2fce:	af 8b       	std	Y+23, r26	; 0x17
    2fd0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fd2:	6d 89       	ldd	r22, Y+21	; 0x15
    2fd4:	7e 89       	ldd	r23, Y+22	; 0x16
    2fd6:	8f 89       	ldd	r24, Y+23	; 0x17
    2fd8:	98 8d       	ldd	r25, Y+24	; 0x18
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	40 e8       	ldi	r20, 0x80	; 128
    2fe0:	5f e3       	ldi	r21, 0x3F	; 63
    2fe2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fe6:	88 23       	and	r24, r24
    2fe8:	2c f4       	brge	.+10     	; 0x2ff4 <LCD_displayCharacter+0x256>
		__ticks = 1;
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	9c 8b       	std	Y+20, r25	; 0x14
    2ff0:	8b 8b       	std	Y+19, r24	; 0x13
    2ff2:	3f c0       	rjmp	.+126    	; 0x3072 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    2ff4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ff6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff8:	8f 89       	ldd	r24, Y+23	; 0x17
    2ffa:	98 8d       	ldd	r25, Y+24	; 0x18
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	3f ef       	ldi	r19, 0xFF	; 255
    3000:	4f e7       	ldi	r20, 0x7F	; 127
    3002:	57 e4       	ldi	r21, 0x47	; 71
    3004:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3008:	18 16       	cp	r1, r24
    300a:	4c f5       	brge	.+82     	; 0x305e <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    300c:	69 8d       	ldd	r22, Y+25	; 0x19
    300e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3010:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3012:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	40 e2       	ldi	r20, 0x20	; 32
    301a:	51 e4       	ldi	r21, 0x41	; 65
    301c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	bc 01       	movw	r22, r24
    3026:	cd 01       	movw	r24, r26
    3028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    302c:	dc 01       	movw	r26, r24
    302e:	cb 01       	movw	r24, r22
    3030:	9c 8b       	std	Y+20, r25	; 0x14
    3032:	8b 8b       	std	Y+19, r24	; 0x13
    3034:	0f c0       	rjmp	.+30     	; 0x3054 <LCD_displayCharacter+0x2b6>
    3036:	89 e1       	ldi	r24, 0x19	; 25
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	9a 8b       	std	Y+18, r25	; 0x12
    303c:	89 8b       	std	Y+17, r24	; 0x11
    303e:	89 89       	ldd	r24, Y+17	; 0x11
    3040:	9a 89       	ldd	r25, Y+18	; 0x12
    3042:	01 97       	sbiw	r24, 0x01	; 1
    3044:	f1 f7       	brne	.-4      	; 0x3042 <LCD_displayCharacter+0x2a4>
    3046:	9a 8b       	std	Y+18, r25	; 0x12
    3048:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    304a:	8b 89       	ldd	r24, Y+19	; 0x13
    304c:	9c 89       	ldd	r25, Y+20	; 0x14
    304e:	01 97       	sbiw	r24, 0x01	; 1
    3050:	9c 8b       	std	Y+20, r25	; 0x14
    3052:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3054:	8b 89       	ldd	r24, Y+19	; 0x13
    3056:	9c 89       	ldd	r25, Y+20	; 0x14
    3058:	00 97       	sbiw	r24, 0x00	; 0
    305a:	69 f7       	brne	.-38     	; 0x3036 <LCD_displayCharacter+0x298>
    305c:	14 c0       	rjmp	.+40     	; 0x3086 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    305e:	6d 89       	ldd	r22, Y+21	; 0x15
    3060:	7e 89       	ldd	r23, Y+22	; 0x16
    3062:	8f 89       	ldd	r24, Y+23	; 0x17
    3064:	98 8d       	ldd	r25, Y+24	; 0x18
    3066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	9c 8b       	std	Y+20, r25	; 0x14
    3070:	8b 8b       	std	Y+19, r24	; 0x13
    3072:	8b 89       	ldd	r24, Y+19	; 0x13
    3074:	9c 89       	ldd	r25, Y+20	; 0x14
    3076:	98 8b       	std	Y+16, r25	; 0x10
    3078:	8f 87       	std	Y+15, r24	; 0x0f
    307a:	8f 85       	ldd	r24, Y+15	; 0x0f
    307c:	98 89       	ldd	r25, Y+16	; 0x10
    307e:	01 97       	sbiw	r24, 0x01	; 1
    3080:	f1 f7       	brne	.-4      	; 0x307e <LCD_displayCharacter+0x2e0>
    3082:	98 8b       	std	Y+16, r25	; 0x10
    3084:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3086:	83 e0       	ldi	r24, 0x03	; 3
    3088:	64 e0       	ldi	r22, 0x04	; 4
    308a:	40 e0       	ldi	r20, 0x00	; 0
    308c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <GPIO_writePin>
    3090:	80 e0       	ldi	r24, 0x00	; 0
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	a0 e8       	ldi	r26, 0x80	; 128
    3096:	bf e3       	ldi	r27, 0x3F	; 63
    3098:	8b 87       	std	Y+11, r24	; 0x0b
    309a:	9c 87       	std	Y+12, r25	; 0x0c
    309c:	ad 87       	std	Y+13, r26	; 0x0d
    309e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30a8:	20 e0       	ldi	r18, 0x00	; 0
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	4a e7       	ldi	r20, 0x7A	; 122
    30ae:	53 e4       	ldi	r21, 0x43	; 67
    30b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b4:	dc 01       	movw	r26, r24
    30b6:	cb 01       	movw	r24, r22
    30b8:	8f 83       	std	Y+7, r24	; 0x07
    30ba:	98 87       	std	Y+8, r25	; 0x08
    30bc:	a9 87       	std	Y+9, r26	; 0x09
    30be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30c0:	6f 81       	ldd	r22, Y+7	; 0x07
    30c2:	78 85       	ldd	r23, Y+8	; 0x08
    30c4:	89 85       	ldd	r24, Y+9	; 0x09
    30c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c8:	20 e0       	ldi	r18, 0x00	; 0
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	40 e8       	ldi	r20, 0x80	; 128
    30ce:	5f e3       	ldi	r21, 0x3F	; 63
    30d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30d4:	88 23       	and	r24, r24
    30d6:	2c f4       	brge	.+10     	; 0x30e2 <LCD_displayCharacter+0x344>
		__ticks = 1;
    30d8:	81 e0       	ldi	r24, 0x01	; 1
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	9e 83       	std	Y+6, r25	; 0x06
    30de:	8d 83       	std	Y+5, r24	; 0x05
    30e0:	3f c0       	rjmp	.+126    	; 0x3160 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    30e2:	6f 81       	ldd	r22, Y+7	; 0x07
    30e4:	78 85       	ldd	r23, Y+8	; 0x08
    30e6:	89 85       	ldd	r24, Y+9	; 0x09
    30e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	3f ef       	ldi	r19, 0xFF	; 255
    30ee:	4f e7       	ldi	r20, 0x7F	; 127
    30f0:	57 e4       	ldi	r21, 0x47	; 71
    30f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30f6:	18 16       	cp	r1, r24
    30f8:	4c f5       	brge	.+82     	; 0x314c <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    30fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    30fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3100:	9e 85       	ldd	r25, Y+14	; 0x0e
    3102:	20 e0       	ldi	r18, 0x00	; 0
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	40 e2       	ldi	r20, 0x20	; 32
    3108:	51 e4       	ldi	r21, 0x41	; 65
    310a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	bc 01       	movw	r22, r24
    3114:	cd 01       	movw	r24, r26
    3116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    311a:	dc 01       	movw	r26, r24
    311c:	cb 01       	movw	r24, r22
    311e:	9e 83       	std	Y+6, r25	; 0x06
    3120:	8d 83       	std	Y+5, r24	; 0x05
    3122:	0f c0       	rjmp	.+30     	; 0x3142 <LCD_displayCharacter+0x3a4>
    3124:	89 e1       	ldi	r24, 0x19	; 25
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	9c 83       	std	Y+4, r25	; 0x04
    312a:	8b 83       	std	Y+3, r24	; 0x03
    312c:	8b 81       	ldd	r24, Y+3	; 0x03
    312e:	9c 81       	ldd	r25, Y+4	; 0x04
    3130:	01 97       	sbiw	r24, 0x01	; 1
    3132:	f1 f7       	brne	.-4      	; 0x3130 <LCD_displayCharacter+0x392>
    3134:	9c 83       	std	Y+4, r25	; 0x04
    3136:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3138:	8d 81       	ldd	r24, Y+5	; 0x05
    313a:	9e 81       	ldd	r25, Y+6	; 0x06
    313c:	01 97       	sbiw	r24, 0x01	; 1
    313e:	9e 83       	std	Y+6, r25	; 0x06
    3140:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3142:	8d 81       	ldd	r24, Y+5	; 0x05
    3144:	9e 81       	ldd	r25, Y+6	; 0x06
    3146:	00 97       	sbiw	r24, 0x00	; 0
    3148:	69 f7       	brne	.-38     	; 0x3124 <LCD_displayCharacter+0x386>
    314a:	14 c0       	rjmp	.+40     	; 0x3174 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    314c:	6f 81       	ldd	r22, Y+7	; 0x07
    314e:	78 85       	ldd	r23, Y+8	; 0x08
    3150:	89 85       	ldd	r24, Y+9	; 0x09
    3152:	9a 85       	ldd	r25, Y+10	; 0x0a
    3154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3158:	dc 01       	movw	r26, r24
    315a:	cb 01       	movw	r24, r22
    315c:	9e 83       	std	Y+6, r25	; 0x06
    315e:	8d 83       	std	Y+5, r24	; 0x05
    3160:	8d 81       	ldd	r24, Y+5	; 0x05
    3162:	9e 81       	ldd	r25, Y+6	; 0x06
    3164:	9a 83       	std	Y+2, r25	; 0x02
    3166:	89 83       	std	Y+1, r24	; 0x01
    3168:	89 81       	ldd	r24, Y+1	; 0x01
    316a:	9a 81       	ldd	r25, Y+2	; 0x02
    316c:	01 97       	sbiw	r24, 0x01	; 1
    316e:	f1 f7       	brne	.-4      	; 0x316c <LCD_displayCharacter+0x3ce>
    3170:	9a 83       	std	Y+2, r25	; 0x02
    3172:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,(data>>4)); /* out the first nibble of required command to the data bus D4 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3174:	e9 96       	adiw	r28, 0x39	; 57
    3176:	0f b6       	in	r0, 0x3f	; 63
    3178:	f8 94       	cli
    317a:	de bf       	out	0x3e, r29	; 62
    317c:	0f be       	out	0x3f, r0	; 63
    317e:	cd bf       	out	0x3d, r28	; 61
    3180:	cf 91       	pop	r28
    3182:	df 91       	pop	r29
    3184:	08 95       	ret

00003186 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3186:	df 93       	push	r29
    3188:	cf 93       	push	r28
    318a:	00 d0       	rcall	.+0      	; 0x318c <LCD_displayString+0x6>
    318c:	0f 92       	push	r0
    318e:	cd b7       	in	r28, 0x3d	; 61
    3190:	de b7       	in	r29, 0x3e	; 62
    3192:	9b 83       	std	Y+3, r25	; 0x03
    3194:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3196:	19 82       	std	Y+1, r1	; 0x01
    3198:	0e c0       	rjmp	.+28     	; 0x31b6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    319a:	89 81       	ldd	r24, Y+1	; 0x01
    319c:	28 2f       	mov	r18, r24
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	8a 81       	ldd	r24, Y+2	; 0x02
    31a2:	9b 81       	ldd	r25, Y+3	; 0x03
    31a4:	fc 01       	movw	r30, r24
    31a6:	e2 0f       	add	r30, r18
    31a8:	f3 1f       	adc	r31, r19
    31aa:	80 81       	ld	r24, Z
    31ac:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_displayCharacter>
		i++;
    31b0:	89 81       	ldd	r24, Y+1	; 0x01
    31b2:	8f 5f       	subi	r24, 0xFF	; 255
    31b4:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    31b6:	89 81       	ldd	r24, Y+1	; 0x01
    31b8:	28 2f       	mov	r18, r24
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	8a 81       	ldd	r24, Y+2	; 0x02
    31be:	9b 81       	ldd	r25, Y+3	; 0x03
    31c0:	fc 01       	movw	r30, r24
    31c2:	e2 0f       	add	r30, r18
    31c4:	f3 1f       	adc	r31, r19
    31c6:	80 81       	ld	r24, Z
    31c8:	88 23       	and	r24, r24
    31ca:	39 f7       	brne	.-50     	; 0x319a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	 *********************************************************/
}
    31cc:	0f 90       	pop	r0
    31ce:	0f 90       	pop	r0
    31d0:	0f 90       	pop	r0
    31d2:	cf 91       	pop	r28
    31d4:	df 91       	pop	r29
    31d6:	08 95       	ret

000031d8 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    31d8:	df 93       	push	r29
    31da:	cf 93       	push	r28
    31dc:	00 d0       	rcall	.+0      	; 0x31de <LCD_moveCursor+0x6>
    31de:	00 d0       	rcall	.+0      	; 0x31e0 <LCD_moveCursor+0x8>
    31e0:	0f 92       	push	r0
    31e2:	cd b7       	in	r28, 0x3d	; 61
    31e4:	de b7       	in	r29, 0x3e	; 62
    31e6:	8a 83       	std	Y+2, r24	; 0x02
    31e8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    31ea:	8a 81       	ldd	r24, Y+2	; 0x02
    31ec:	28 2f       	mov	r18, r24
    31ee:	30 e0       	ldi	r19, 0x00	; 0
    31f0:	3d 83       	std	Y+5, r19	; 0x05
    31f2:	2c 83       	std	Y+4, r18	; 0x04
    31f4:	8c 81       	ldd	r24, Y+4	; 0x04
    31f6:	9d 81       	ldd	r25, Y+5	; 0x05
    31f8:	81 30       	cpi	r24, 0x01	; 1
    31fa:	91 05       	cpc	r25, r1
    31fc:	c1 f0       	breq	.+48     	; 0x322e <LCD_moveCursor+0x56>
    31fe:	2c 81       	ldd	r18, Y+4	; 0x04
    3200:	3d 81       	ldd	r19, Y+5	; 0x05
    3202:	22 30       	cpi	r18, 0x02	; 2
    3204:	31 05       	cpc	r19, r1
    3206:	2c f4       	brge	.+10     	; 0x3212 <LCD_moveCursor+0x3a>
    3208:	8c 81       	ldd	r24, Y+4	; 0x04
    320a:	9d 81       	ldd	r25, Y+5	; 0x05
    320c:	00 97       	sbiw	r24, 0x00	; 0
    320e:	61 f0       	breq	.+24     	; 0x3228 <LCD_moveCursor+0x50>
    3210:	19 c0       	rjmp	.+50     	; 0x3244 <LCD_moveCursor+0x6c>
    3212:	2c 81       	ldd	r18, Y+4	; 0x04
    3214:	3d 81       	ldd	r19, Y+5	; 0x05
    3216:	22 30       	cpi	r18, 0x02	; 2
    3218:	31 05       	cpc	r19, r1
    321a:	69 f0       	breq	.+26     	; 0x3236 <LCD_moveCursor+0x5e>
    321c:	8c 81       	ldd	r24, Y+4	; 0x04
    321e:	9d 81       	ldd	r25, Y+5	; 0x05
    3220:	83 30       	cpi	r24, 0x03	; 3
    3222:	91 05       	cpc	r25, r1
    3224:	61 f0       	breq	.+24     	; 0x323e <LCD_moveCursor+0x66>
    3226:	0e c0       	rjmp	.+28     	; 0x3244 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    3228:	8b 81       	ldd	r24, Y+3	; 0x03
    322a:	89 83       	std	Y+1, r24	; 0x01
    322c:	0b c0       	rjmp	.+22     	; 0x3244 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    322e:	8b 81       	ldd	r24, Y+3	; 0x03
    3230:	80 5c       	subi	r24, 0xC0	; 192
    3232:	89 83       	std	Y+1, r24	; 0x01
    3234:	07 c0       	rjmp	.+14     	; 0x3244 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    3236:	8b 81       	ldd	r24, Y+3	; 0x03
    3238:	80 5f       	subi	r24, 0xF0	; 240
    323a:	89 83       	std	Y+1, r24	; 0x01
    323c:	03 c0       	rjmp	.+6      	; 0x3244 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    323e:	8b 81       	ldd	r24, Y+3	; 0x03
    3240:	80 5b       	subi	r24, 0xB0	; 176
    3242:	89 83       	std	Y+1, r24	; 0x01
		break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3244:	89 81       	ldd	r24, Y+1	; 0x01
    3246:	80 68       	ori	r24, 0x80	; 128
    3248:	0e 94 db 14 	call	0x29b6	; 0x29b6 <LCD_sendCommand>
}
    324c:	0f 90       	pop	r0
    324e:	0f 90       	pop	r0
    3250:	0f 90       	pop	r0
    3252:	0f 90       	pop	r0
    3254:	0f 90       	pop	r0
    3256:	cf 91       	pop	r28
    3258:	df 91       	pop	r29
    325a:	08 95       	ret

0000325c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    325c:	df 93       	push	r29
    325e:	cf 93       	push	r28
    3260:	00 d0       	rcall	.+0      	; 0x3262 <LCD_displayStringRowColumn+0x6>
    3262:	00 d0       	rcall	.+0      	; 0x3264 <LCD_displayStringRowColumn+0x8>
    3264:	cd b7       	in	r28, 0x3d	; 61
    3266:	de b7       	in	r29, 0x3e	; 62
    3268:	89 83       	std	Y+1, r24	; 0x01
    326a:	6a 83       	std	Y+2, r22	; 0x02
    326c:	5c 83       	std	Y+4, r21	; 0x04
    326e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3270:	89 81       	ldd	r24, Y+1	; 0x01
    3272:	6a 81       	ldd	r22, Y+2	; 0x02
    3274:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3278:	8b 81       	ldd	r24, Y+3	; 0x03
    327a:	9c 81       	ldd	r25, Y+4	; 0x04
    327c:	0e 94 c3 18 	call	0x3186	; 0x3186 <LCD_displayString>
}
    3280:	0f 90       	pop	r0
    3282:	0f 90       	pop	r0
    3284:	0f 90       	pop	r0
    3286:	0f 90       	pop	r0
    3288:	cf 91       	pop	r28
    328a:	df 91       	pop	r29
    328c:	08 95       	ret

0000328e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    328e:	df 93       	push	r29
    3290:	cf 93       	push	r28
    3292:	cd b7       	in	r28, 0x3d	; 61
    3294:	de b7       	in	r29, 0x3e	; 62
    3296:	62 97       	sbiw	r28, 0x12	; 18
    3298:	0f b6       	in	r0, 0x3f	; 63
    329a:	f8 94       	cli
    329c:	de bf       	out	0x3e, r29	; 62
    329e:	0f be       	out	0x3f, r0	; 63
    32a0:	cd bf       	out	0x3d, r28	; 61
    32a2:	9a 8b       	std	Y+18, r25	; 0x12
    32a4:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ASCII result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    32a6:	89 89       	ldd	r24, Y+17	; 0x11
    32a8:	9a 89       	ldd	r25, Y+18	; 0x12
    32aa:	9e 01       	movw	r18, r28
    32ac:	2f 5f       	subi	r18, 0xFF	; 255
    32ae:	3f 4f       	sbci	r19, 0xFF	; 255
    32b0:	b9 01       	movw	r22, r18
    32b2:	4a e0       	ldi	r20, 0x0A	; 10
    32b4:	50 e0       	ldi	r21, 0x00	; 0
    32b6:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <itoa>
	LCD_displayString(buff); /* Display the string */
    32ba:	ce 01       	movw	r24, r28
    32bc:	01 96       	adiw	r24, 0x01	; 1
    32be:	0e 94 c3 18 	call	0x3186	; 0x3186 <LCD_displayString>
}
    32c2:	62 96       	adiw	r28, 0x12	; 18
    32c4:	0f b6       	in	r0, 0x3f	; 63
    32c6:	f8 94       	cli
    32c8:	de bf       	out	0x3e, r29	; 62
    32ca:	0f be       	out	0x3f, r0	; 63
    32cc:	cd bf       	out	0x3d, r28	; 61
    32ce:	cf 91       	pop	r28
    32d0:	df 91       	pop	r29
    32d2:	08 95       	ret

000032d4 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    32d4:	df 93       	push	r29
    32d6:	cf 93       	push	r28
    32d8:	cd b7       	in	r28, 0x3d	; 61
    32da:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	0e 94 db 14 	call	0x29b6	; 0x29b6 <LCD_sendCommand>
}
    32e2:	cf 91       	pop	r28
    32e4:	df 91       	pop	r29
    32e6:	08 95       	ret

000032e8 <__vector_9>:
static volatile void (*g_callBackPtr_timer2)(void) = NULL_PTR;
/****************************************************************************
 *                             Timers ISRs                                   *
 ****************************************************************************/
ISR((TIMER0_OVF_vect))
{
    32e8:	1f 92       	push	r1
    32ea:	0f 92       	push	r0
    32ec:	0f b6       	in	r0, 0x3f	; 63
    32ee:	0f 92       	push	r0
    32f0:	11 24       	eor	r1, r1
    32f2:	2f 93       	push	r18
    32f4:	3f 93       	push	r19
    32f6:	4f 93       	push	r20
    32f8:	5f 93       	push	r21
    32fa:	6f 93       	push	r22
    32fc:	7f 93       	push	r23
    32fe:	8f 93       	push	r24
    3300:	9f 93       	push	r25
    3302:	af 93       	push	r26
    3304:	bf 93       	push	r27
    3306:	ef 93       	push	r30
    3308:	ff 93       	push	r31
    330a:	df 93       	push	r29
    330c:	cf 93       	push	r28
    330e:	cd b7       	in	r28, 0x3d	; 61
    3310:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0 != NULL_PTR)
    3312:	80 91 d8 00 	lds	r24, 0x00D8
    3316:	90 91 d9 00 	lds	r25, 0x00D9
    331a:	00 97       	sbiw	r24, 0x00	; 0
    331c:	29 f0       	breq	.+10     	; 0x3328 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the over flow occur */
		(*g_callBackPtr_timer0)();
    331e:	e0 91 d8 00 	lds	r30, 0x00D8
    3322:	f0 91 d9 00 	lds	r31, 0x00D9
    3326:	09 95       	icall
	}
}
    3328:	cf 91       	pop	r28
    332a:	df 91       	pop	r29
    332c:	ff 91       	pop	r31
    332e:	ef 91       	pop	r30
    3330:	bf 91       	pop	r27
    3332:	af 91       	pop	r26
    3334:	9f 91       	pop	r25
    3336:	8f 91       	pop	r24
    3338:	7f 91       	pop	r23
    333a:	6f 91       	pop	r22
    333c:	5f 91       	pop	r21
    333e:	4f 91       	pop	r20
    3340:	3f 91       	pop	r19
    3342:	2f 91       	pop	r18
    3344:	0f 90       	pop	r0
    3346:	0f be       	out	0x3f, r0	; 63
    3348:	0f 90       	pop	r0
    334a:	1f 90       	pop	r1
    334c:	18 95       	reti

0000334e <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    334e:	1f 92       	push	r1
    3350:	0f 92       	push	r0
    3352:	0f b6       	in	r0, 0x3f	; 63
    3354:	0f 92       	push	r0
    3356:	11 24       	eor	r1, r1
    3358:	2f 93       	push	r18
    335a:	3f 93       	push	r19
    335c:	4f 93       	push	r20
    335e:	5f 93       	push	r21
    3360:	6f 93       	push	r22
    3362:	7f 93       	push	r23
    3364:	8f 93       	push	r24
    3366:	9f 93       	push	r25
    3368:	af 93       	push	r26
    336a:	bf 93       	push	r27
    336c:	ef 93       	push	r30
    336e:	ff 93       	push	r31
    3370:	df 93       	push	r29
    3372:	cf 93       	push	r28
    3374:	cd b7       	in	r28, 0x3d	; 61
    3376:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0 != NULL_PTR)
    3378:	80 91 d8 00 	lds	r24, 0x00D8
    337c:	90 91 d9 00 	lds	r25, 0x00D9
    3380:	00 97       	sbiw	r24, 0x00	; 0
    3382:	29 f0       	breq	.+10     	; 0x338e <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the compare match occur */
		(*g_callBackPtr_timer0)();
    3384:	e0 91 d8 00 	lds	r30, 0x00D8
    3388:	f0 91 d9 00 	lds	r31, 0x00D9
    338c:	09 95       	icall
	}
}
    338e:	cf 91       	pop	r28
    3390:	df 91       	pop	r29
    3392:	ff 91       	pop	r31
    3394:	ef 91       	pop	r30
    3396:	bf 91       	pop	r27
    3398:	af 91       	pop	r26
    339a:	9f 91       	pop	r25
    339c:	8f 91       	pop	r24
    339e:	7f 91       	pop	r23
    33a0:	6f 91       	pop	r22
    33a2:	5f 91       	pop	r21
    33a4:	4f 91       	pop	r20
    33a6:	3f 91       	pop	r19
    33a8:	2f 91       	pop	r18
    33aa:	0f 90       	pop	r0
    33ac:	0f be       	out	0x3f, r0	; 63
    33ae:	0f 90       	pop	r0
    33b0:	1f 90       	pop	r1
    33b2:	18 95       	reti

000033b4 <__vector_8>:
ISR(TIMER1_OVF_vect)
{
    33b4:	1f 92       	push	r1
    33b6:	0f 92       	push	r0
    33b8:	0f b6       	in	r0, 0x3f	; 63
    33ba:	0f 92       	push	r0
    33bc:	11 24       	eor	r1, r1
    33be:	2f 93       	push	r18
    33c0:	3f 93       	push	r19
    33c2:	4f 93       	push	r20
    33c4:	5f 93       	push	r21
    33c6:	6f 93       	push	r22
    33c8:	7f 93       	push	r23
    33ca:	8f 93       	push	r24
    33cc:	9f 93       	push	r25
    33ce:	af 93       	push	r26
    33d0:	bf 93       	push	r27
    33d2:	ef 93       	push	r30
    33d4:	ff 93       	push	r31
    33d6:	df 93       	push	r29
    33d8:	cf 93       	push	r28
    33da:	cd b7       	in	r28, 0x3d	; 61
    33dc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1 != NULL_PTR)
    33de:	80 91 da 00 	lds	r24, 0x00DA
    33e2:	90 91 db 00 	lds	r25, 0x00DB
    33e6:	00 97       	sbiw	r24, 0x00	; 0
    33e8:	29 f0       	breq	.+10     	; 0x33f4 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the over flow occur */
		(*g_callBackPtr_timer1)();
    33ea:	e0 91 da 00 	lds	r30, 0x00DA
    33ee:	f0 91 db 00 	lds	r31, 0x00DB
    33f2:	09 95       	icall
	}
}
    33f4:	cf 91       	pop	r28
    33f6:	df 91       	pop	r29
    33f8:	ff 91       	pop	r31
    33fa:	ef 91       	pop	r30
    33fc:	bf 91       	pop	r27
    33fe:	af 91       	pop	r26
    3400:	9f 91       	pop	r25
    3402:	8f 91       	pop	r24
    3404:	7f 91       	pop	r23
    3406:	6f 91       	pop	r22
    3408:	5f 91       	pop	r21
    340a:	4f 91       	pop	r20
    340c:	3f 91       	pop	r19
    340e:	2f 91       	pop	r18
    3410:	0f 90       	pop	r0
    3412:	0f be       	out	0x3f, r0	; 63
    3414:	0f 90       	pop	r0
    3416:	1f 90       	pop	r1
    3418:	18 95       	reti

0000341a <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    341a:	1f 92       	push	r1
    341c:	0f 92       	push	r0
    341e:	0f b6       	in	r0, 0x3f	; 63
    3420:	0f 92       	push	r0
    3422:	11 24       	eor	r1, r1
    3424:	2f 93       	push	r18
    3426:	3f 93       	push	r19
    3428:	4f 93       	push	r20
    342a:	5f 93       	push	r21
    342c:	6f 93       	push	r22
    342e:	7f 93       	push	r23
    3430:	8f 93       	push	r24
    3432:	9f 93       	push	r25
    3434:	af 93       	push	r26
    3436:	bf 93       	push	r27
    3438:	ef 93       	push	r30
    343a:	ff 93       	push	r31
    343c:	df 93       	push	r29
    343e:	cf 93       	push	r28
    3440:	cd b7       	in	r28, 0x3d	; 61
    3442:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1 != NULL_PTR)
    3444:	80 91 da 00 	lds	r24, 0x00DA
    3448:	90 91 db 00 	lds	r25, 0x00DB
    344c:	00 97       	sbiw	r24, 0x00	; 0
    344e:	29 f0       	breq	.+10     	; 0x345a <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the compare match occur */
		(*g_callBackPtr_timer1)();
    3450:	e0 91 da 00 	lds	r30, 0x00DA
    3454:	f0 91 db 00 	lds	r31, 0x00DB
    3458:	09 95       	icall
	}
}
    345a:	cf 91       	pop	r28
    345c:	df 91       	pop	r29
    345e:	ff 91       	pop	r31
    3460:	ef 91       	pop	r30
    3462:	bf 91       	pop	r27
    3464:	af 91       	pop	r26
    3466:	9f 91       	pop	r25
    3468:	8f 91       	pop	r24
    346a:	7f 91       	pop	r23
    346c:	6f 91       	pop	r22
    346e:	5f 91       	pop	r21
    3470:	4f 91       	pop	r20
    3472:	3f 91       	pop	r19
    3474:	2f 91       	pop	r18
    3476:	0f 90       	pop	r0
    3478:	0f be       	out	0x3f, r0	; 63
    347a:	0f 90       	pop	r0
    347c:	1f 90       	pop	r1
    347e:	18 95       	reti

00003480 <__vector_4>:
ISR((TIMER2_OVF_vect))
{
    3480:	1f 92       	push	r1
    3482:	0f 92       	push	r0
    3484:	0f b6       	in	r0, 0x3f	; 63
    3486:	0f 92       	push	r0
    3488:	11 24       	eor	r1, r1
    348a:	2f 93       	push	r18
    348c:	3f 93       	push	r19
    348e:	4f 93       	push	r20
    3490:	5f 93       	push	r21
    3492:	6f 93       	push	r22
    3494:	7f 93       	push	r23
    3496:	8f 93       	push	r24
    3498:	9f 93       	push	r25
    349a:	af 93       	push	r26
    349c:	bf 93       	push	r27
    349e:	ef 93       	push	r30
    34a0:	ff 93       	push	r31
    34a2:	df 93       	push	r29
    34a4:	cf 93       	push	r28
    34a6:	cd b7       	in	r28, 0x3d	; 61
    34a8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2 != NULL_PTR)
    34aa:	80 91 dc 00 	lds	r24, 0x00DC
    34ae:	90 91 dd 00 	lds	r25, 0x00DD
    34b2:	00 97       	sbiw	r24, 0x00	; 0
    34b4:	29 f0       	breq	.+10     	; 0x34c0 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the over flow occur */
		(*g_callBackPtr_timer2)();
    34b6:	e0 91 dc 00 	lds	r30, 0x00DC
    34ba:	f0 91 dd 00 	lds	r31, 0x00DD
    34be:	09 95       	icall
	}
}
    34c0:	cf 91       	pop	r28
    34c2:	df 91       	pop	r29
    34c4:	ff 91       	pop	r31
    34c6:	ef 91       	pop	r30
    34c8:	bf 91       	pop	r27
    34ca:	af 91       	pop	r26
    34cc:	9f 91       	pop	r25
    34ce:	8f 91       	pop	r24
    34d0:	7f 91       	pop	r23
    34d2:	6f 91       	pop	r22
    34d4:	5f 91       	pop	r21
    34d6:	4f 91       	pop	r20
    34d8:	3f 91       	pop	r19
    34da:	2f 91       	pop	r18
    34dc:	0f 90       	pop	r0
    34de:	0f be       	out	0x3f, r0	; 63
    34e0:	0f 90       	pop	r0
    34e2:	1f 90       	pop	r1
    34e4:	18 95       	reti

000034e6 <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    34e6:	1f 92       	push	r1
    34e8:	0f 92       	push	r0
    34ea:	0f b6       	in	r0, 0x3f	; 63
    34ec:	0f 92       	push	r0
    34ee:	11 24       	eor	r1, r1
    34f0:	2f 93       	push	r18
    34f2:	3f 93       	push	r19
    34f4:	4f 93       	push	r20
    34f6:	5f 93       	push	r21
    34f8:	6f 93       	push	r22
    34fa:	7f 93       	push	r23
    34fc:	8f 93       	push	r24
    34fe:	9f 93       	push	r25
    3500:	af 93       	push	r26
    3502:	bf 93       	push	r27
    3504:	ef 93       	push	r30
    3506:	ff 93       	push	r31
    3508:	df 93       	push	r29
    350a:	cf 93       	push	r28
    350c:	cd b7       	in	r28, 0x3d	; 61
    350e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2 != NULL_PTR)
    3510:	80 91 dc 00 	lds	r24, 0x00DC
    3514:	90 91 dd 00 	lds	r25, 0x00DD
    3518:	00 97       	sbiw	r24, 0x00	; 0
    351a:	29 f0       	breq	.+10     	; 0x3526 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the compare match occur */
		(*g_callBackPtr_timer2)();
    351c:	e0 91 dc 00 	lds	r30, 0x00DC
    3520:	f0 91 dd 00 	lds	r31, 0x00DD
    3524:	09 95       	icall
	}
}
    3526:	cf 91       	pop	r28
    3528:	df 91       	pop	r29
    352a:	ff 91       	pop	r31
    352c:	ef 91       	pop	r30
    352e:	bf 91       	pop	r27
    3530:	af 91       	pop	r26
    3532:	9f 91       	pop	r25
    3534:	8f 91       	pop	r24
    3536:	7f 91       	pop	r23
    3538:	6f 91       	pop	r22
    353a:	5f 91       	pop	r21
    353c:	4f 91       	pop	r20
    353e:	3f 91       	pop	r19
    3540:	2f 91       	pop	r18
    3542:	0f 90       	pop	r0
    3544:	0f be       	out	0x3f, r0	; 63
    3546:	0f 90       	pop	r0
    3548:	1f 90       	pop	r1
    354a:	18 95       	reti

0000354c <TIMER_init>:

/****************************************************************************
 *                             Timers Functions                                   *
 ****************************************************************************/
void  TIMER_init(TIMER_Configuration * Configuration)
{
    354c:	df 93       	push	r29
    354e:	cf 93       	push	r28
    3550:	00 d0       	rcall	.+0      	; 0x3552 <TIMER_init+0x6>
    3552:	cd b7       	in	r28, 0x3d	; 61
    3554:	de b7       	in	r29, 0x3e	; 62
    3556:	9a 83       	std	Y+2, r25	; 0x02
    3558:	89 83       	std	Y+1, r24	; 0x01
	/*Check which timer of the three timers in AVR MC*/

	/*Timer0*/
	if(Configuration->id == 0)
    355a:	e9 81       	ldd	r30, Y+1	; 0x01
    355c:	fa 81       	ldd	r31, Y+2	; 0x02
    355e:	80 81       	ld	r24, Z
    3560:	88 23       	and	r24, r24
    3562:	09 f0       	breq	.+2      	; 0x3566 <TIMER_init+0x1a>
    3564:	82 c0       	rjmp	.+260    	; 0x366a <TIMER_init+0x11e>
	{
		/*Check which mode of the three modes in timer*/
		if((Configuration->mode) == Normal_Mode)
    3566:	e9 81       	ldd	r30, Y+1	; 0x01
    3568:	fa 81       	ldd	r31, Y+2	; 0x02
    356a:	81 81       	ldd	r24, Z+1	; 0x01
    356c:	88 23       	and	r24, r24
    356e:	11 f5       	brne	.+68     	; 0x35b4 <TIMER_init+0x68>
		{
			/*initialize timer*/
			TCNT0=Configuration->initial_value;
    3570:	a2 e5       	ldi	r26, 0x52	; 82
    3572:	b0 e0       	ldi	r27, 0x00	; 0
    3574:	e9 81       	ldd	r30, Y+1	; 0x01
    3576:	fa 81       	ldd	r31, Y+2	; 0x02
    3578:	82 81       	ldd	r24, Z+2	; 0x02
    357a:	8c 93       	st	X, r24
			/*enable interrupt*/
			TIMSK |= (1<<TOIE0);
    357c:	a9 e5       	ldi	r26, 0x59	; 89
    357e:	b0 e0       	ldi	r27, 0x00	; 0
    3580:	e9 e5       	ldi	r30, 0x59	; 89
    3582:	f0 e0       	ldi	r31, 0x00	; 0
    3584:	80 81       	ld	r24, Z
    3586:	81 60       	ori	r24, 0x01	; 1
    3588:	8c 93       	st	X, r24
			/*Non-PWM*/
			TCCR0 |= (1<<FOC0);
    358a:	a3 e5       	ldi	r26, 0x53	; 83
    358c:	b0 e0       	ldi	r27, 0x00	; 0
    358e:	e3 e5       	ldi	r30, 0x53	; 83
    3590:	f0 e0       	ldi	r31, 0x00	; 0
    3592:	80 81       	ld	r24, Z
    3594:	80 68       	ori	r24, 0x80	; 128
    3596:	8c 93       	st	X, r24
			/*inserting prescaler value in 3 LSB (CS02,CS01,CS00) */
			TCCR0 = (TCCR0 & 0xF8) | (Configuration->Freq_prescaler & 0x07);
    3598:	a3 e5       	ldi	r26, 0x53	; 83
    359a:	b0 e0       	ldi	r27, 0x00	; 0
    359c:	e3 e5       	ldi	r30, 0x53	; 83
    359e:	f0 e0       	ldi	r31, 0x00	; 0
    35a0:	80 81       	ld	r24, Z
    35a2:	98 2f       	mov	r25, r24
    35a4:	98 7f       	andi	r25, 0xF8	; 248
    35a6:	e9 81       	ldd	r30, Y+1	; 0x01
    35a8:	fa 81       	ldd	r31, Y+2	; 0x02
    35aa:	85 81       	ldd	r24, Z+5	; 0x05
    35ac:	87 70       	andi	r24, 0x07	; 7
    35ae:	89 2b       	or	r24, r25
    35b0:	8c 93       	st	X, r24
    35b2:	84 c1       	rjmp	.+776    	; 0x38bc <TIMER_init+0x370>
		}
		else if((Configuration->mode) == CMP_Mode)
    35b4:	e9 81       	ldd	r30, Y+1	; 0x01
    35b6:	fa 81       	ldd	r31, Y+2	; 0x02
    35b8:	81 81       	ldd	r24, Z+1	; 0x01
    35ba:	81 30       	cpi	r24, 0x01	; 1
    35bc:	49 f5       	brne	.+82     	; 0x3610 <TIMER_init+0xc4>
		{
			/*initialize timer*/
			TCNT0=Configuration->initial_value;
    35be:	a2 e5       	ldi	r26, 0x52	; 82
    35c0:	b0 e0       	ldi	r27, 0x00	; 0
    35c2:	e9 81       	ldd	r30, Y+1	; 0x01
    35c4:	fa 81       	ldd	r31, Y+2	; 0x02
    35c6:	82 81       	ldd	r24, Z+2	; 0x02
    35c8:	8c 93       	st	X, r24
			/*set compare value for compare mode*/
			OCR0=Configuration->cmp_value;
    35ca:	ac e5       	ldi	r26, 0x5C	; 92
    35cc:	b0 e0       	ldi	r27, 0x00	; 0
    35ce:	e9 81       	ldd	r30, Y+1	; 0x01
    35d0:	fa 81       	ldd	r31, Y+2	; 0x02
    35d2:	83 81       	ldd	r24, Z+3	; 0x03
    35d4:	94 81       	ldd	r25, Z+4	; 0x04
    35d6:	8c 93       	st	X, r24
			/*activate Non-PWM,CTC mode*/
			TCCR0 |= (1<<FOC0) | (1<<WGM01);
    35d8:	a3 e5       	ldi	r26, 0x53	; 83
    35da:	b0 e0       	ldi	r27, 0x00	; 0
    35dc:	e3 e5       	ldi	r30, 0x53	; 83
    35de:	f0 e0       	ldi	r31, 0x00	; 0
    35e0:	80 81       	ld	r24, Z
    35e2:	88 68       	ori	r24, 0x88	; 136
    35e4:	8c 93       	st	X, r24
			/*inserting prescaler value in 3 LSB (CS02,CS01,CS00) */
			TCCR0 = (TCCR0 & 0xF8) | (Configuration->Freq_prescaler & 0x07);
    35e6:	a3 e5       	ldi	r26, 0x53	; 83
    35e8:	b0 e0       	ldi	r27, 0x00	; 0
    35ea:	e3 e5       	ldi	r30, 0x53	; 83
    35ec:	f0 e0       	ldi	r31, 0x00	; 0
    35ee:	80 81       	ld	r24, Z
    35f0:	98 2f       	mov	r25, r24
    35f2:	98 7f       	andi	r25, 0xF8	; 248
    35f4:	e9 81       	ldd	r30, Y+1	; 0x01
    35f6:	fa 81       	ldd	r31, Y+2	; 0x02
    35f8:	85 81       	ldd	r24, Z+5	; 0x05
    35fa:	87 70       	andi	r24, 0x07	; 7
    35fc:	89 2b       	or	r24, r25
    35fe:	8c 93       	st	X, r24
			/*enable interrupt*/
			TIMSK |= (1<<OCIE0);
    3600:	a9 e5       	ldi	r26, 0x59	; 89
    3602:	b0 e0       	ldi	r27, 0x00	; 0
    3604:	e9 e5       	ldi	r30, 0x59	; 89
    3606:	f0 e0       	ldi	r31, 0x00	; 0
    3608:	80 81       	ld	r24, Z
    360a:	82 60       	ori	r24, 0x02	; 2
    360c:	8c 93       	st	X, r24
    360e:	56 c1       	rjmp	.+684    	; 0x38bc <TIMER_init+0x370>
		}
		else if((Configuration->mode) == Fast_PWM_Mode)
    3610:	e9 81       	ldd	r30, Y+1	; 0x01
    3612:	fa 81       	ldd	r31, Y+2	; 0x02
    3614:	81 81       	ldd	r24, Z+1	; 0x01
    3616:	82 30       	cpi	r24, 0x02	; 2
    3618:	09 f0       	breq	.+2      	; 0x361c <TIMER_init+0xd0>
    361a:	50 c1       	rjmp	.+672    	; 0x38bc <TIMER_init+0x370>
		{
			/*initialize timer*/
			TCNT0=Configuration->initial_value;
    361c:	a2 e5       	ldi	r26, 0x52	; 82
    361e:	b0 e0       	ldi	r27, 0x00	; 0
    3620:	e9 81       	ldd	r30, Y+1	; 0x01
    3622:	fa 81       	ldd	r31, Y+2	; 0x02
    3624:	82 81       	ldd	r24, Z+2	; 0x02
    3626:	8c 93       	st	X, r24
			/*set PB3 output pin to get the output pulses*/
			GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	63 e0       	ldi	r22, 0x03	; 3
    362c:	41 e0       	ldi	r20, 0x01	; 1
    362e:	0e 94 a3 06 	call	0xd46	; 0xd46 <GPIO_setupPinDirection>
			/*set compare value in PWM mode*/
			OCR0= Configuration->set_duty;
    3632:	ac e5       	ldi	r26, 0x5C	; 92
    3634:	b0 e0       	ldi	r27, 0x00	; 0
    3636:	e9 81       	ldd	r30, Y+1	; 0x01
    3638:	fa 81       	ldd	r31, Y+2	; 0x02
    363a:	86 81       	ldd	r24, Z+6	; 0x06
    363c:	97 81       	ldd	r25, Z+7	; 0x07
    363e:	8c 93       	st	X, r24
			/*activate Fast_PWM mode and clear OC0 on compare match*/
			TCCR0 |= (1<<WGM01) | (1<<WGM00) | (1<<COM01);
    3640:	a3 e5       	ldi	r26, 0x53	; 83
    3642:	b0 e0       	ldi	r27, 0x00	; 0
    3644:	e3 e5       	ldi	r30, 0x53	; 83
    3646:	f0 e0       	ldi	r31, 0x00	; 0
    3648:	80 81       	ld	r24, Z
    364a:	88 66       	ori	r24, 0x68	; 104
    364c:	8c 93       	st	X, r24
			/*inserting prescaler value in 3 LSB (CS02,CS01,CS00) */
			TCCR0 = (TCCR0 & 0xF8) | (Configuration->Freq_prescaler & 0x07);
    364e:	a3 e5       	ldi	r26, 0x53	; 83
    3650:	b0 e0       	ldi	r27, 0x00	; 0
    3652:	e3 e5       	ldi	r30, 0x53	; 83
    3654:	f0 e0       	ldi	r31, 0x00	; 0
    3656:	80 81       	ld	r24, Z
    3658:	98 2f       	mov	r25, r24
    365a:	98 7f       	andi	r25, 0xF8	; 248
    365c:	e9 81       	ldd	r30, Y+1	; 0x01
    365e:	fa 81       	ldd	r31, Y+2	; 0x02
    3660:	85 81       	ldd	r24, Z+5	; 0x05
    3662:	87 70       	andi	r24, 0x07	; 7
    3664:	89 2b       	or	r24, r25
    3666:	8c 93       	st	X, r24
    3668:	29 c1       	rjmp	.+594    	; 0x38bc <TIMER_init+0x370>
		}
	}

	/*Timer1*/
	else if(Configuration->id == 1)
    366a:	e9 81       	ldd	r30, Y+1	; 0x01
    366c:	fa 81       	ldd	r31, Y+2	; 0x02
    366e:	80 81       	ld	r24, Z
    3670:	81 30       	cpi	r24, 0x01	; 1
    3672:	09 f0       	breq	.+2      	; 0x3676 <TIMER_init+0x12a>
    3674:	9d c0       	rjmp	.+314    	; 0x37b0 <TIMER_init+0x264>
	{
		/*Check which mode of the three modes in timer*/
		if((Configuration->mode) == Normal_Mode)
    3676:	e9 81       	ldd	r30, Y+1	; 0x01
    3678:	fa 81       	ldd	r31, Y+2	; 0x02
    367a:	81 81       	ldd	r24, Z+1	; 0x01
    367c:	88 23       	and	r24, r24
    367e:	31 f5       	brne	.+76     	; 0x36cc <TIMER_init+0x180>
		{
			/*initialize timer*/
			TCNT1=Configuration->initial_value;
    3680:	ac e4       	ldi	r26, 0x4C	; 76
    3682:	b0 e0       	ldi	r27, 0x00	; 0
    3684:	e9 81       	ldd	r30, Y+1	; 0x01
    3686:	fa 81       	ldd	r31, Y+2	; 0x02
    3688:	82 81       	ldd	r24, Z+2	; 0x02
    368a:	88 2f       	mov	r24, r24
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	11 96       	adiw	r26, 0x01	; 1
    3690:	9c 93       	st	X, r25
    3692:	8e 93       	st	-X, r24
			/*enable interrupt*/
			TIMSK |= (1<<TOIE1);
    3694:	a9 e5       	ldi	r26, 0x59	; 89
    3696:	b0 e0       	ldi	r27, 0x00	; 0
    3698:	e9 e5       	ldi	r30, 0x59	; 89
    369a:	f0 e0       	ldi	r31, 0x00	; 0
    369c:	80 81       	ld	r24, Z
    369e:	84 60       	ori	r24, 0x04	; 4
    36a0:	8c 93       	st	X, r24
			/*Non-PWM for channel A and channel B*/
			TCCR1A |= (1<<FOC1A);
    36a2:	af e4       	ldi	r26, 0x4F	; 79
    36a4:	b0 e0       	ldi	r27, 0x00	; 0
    36a6:	ef e4       	ldi	r30, 0x4F	; 79
    36a8:	f0 e0       	ldi	r31, 0x00	; 0
    36aa:	80 81       	ld	r24, Z
    36ac:	88 60       	ori	r24, 0x08	; 8
    36ae:	8c 93       	st	X, r24
			/*activate normal mode by default values 0*/
			/*inserting prescaler value in 3 LSB (CS02,CS01,CS00) */
			TCCR1B = (TCCR1B & 0xF8) | (Configuration->Freq_prescaler & 0x07);
    36b0:	ae e4       	ldi	r26, 0x4E	; 78
    36b2:	b0 e0       	ldi	r27, 0x00	; 0
    36b4:	ee e4       	ldi	r30, 0x4E	; 78
    36b6:	f0 e0       	ldi	r31, 0x00	; 0
    36b8:	80 81       	ld	r24, Z
    36ba:	98 2f       	mov	r25, r24
    36bc:	98 7f       	andi	r25, 0xF8	; 248
    36be:	e9 81       	ldd	r30, Y+1	; 0x01
    36c0:	fa 81       	ldd	r31, Y+2	; 0x02
    36c2:	85 81       	ldd	r24, Z+5	; 0x05
    36c4:	87 70       	andi	r24, 0x07	; 7
    36c6:	89 2b       	or	r24, r25
    36c8:	8c 93       	st	X, r24
    36ca:	f8 c0       	rjmp	.+496    	; 0x38bc <TIMER_init+0x370>
		}
		else if((Configuration->mode) == CMP_Mode)
    36cc:	e9 81       	ldd	r30, Y+1	; 0x01
    36ce:	fa 81       	ldd	r31, Y+2	; 0x02
    36d0:	81 81       	ldd	r24, Z+1	; 0x01
    36d2:	81 30       	cpi	r24, 0x01	; 1
    36d4:	99 f5       	brne	.+102    	; 0x373c <TIMER_init+0x1f0>
		{
			/*initialize timer*/
			TCNT1=Configuration->initial_value;
    36d6:	ac e4       	ldi	r26, 0x4C	; 76
    36d8:	b0 e0       	ldi	r27, 0x00	; 0
    36da:	e9 81       	ldd	r30, Y+1	; 0x01
    36dc:	fa 81       	ldd	r31, Y+2	; 0x02
    36de:	82 81       	ldd	r24, Z+2	; 0x02
    36e0:	88 2f       	mov	r24, r24
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	11 96       	adiw	r26, 0x01	; 1
    36e6:	9c 93       	st	X, r25
    36e8:	8e 93       	st	-X, r24
			/*set compare value in compare mode*/
			OCR1A= Configuration->cmp_value;
    36ea:	aa e4       	ldi	r26, 0x4A	; 74
    36ec:	b0 e0       	ldi	r27, 0x00	; 0
    36ee:	e9 81       	ldd	r30, Y+1	; 0x01
    36f0:	fa 81       	ldd	r31, Y+2	; 0x02
    36f2:	83 81       	ldd	r24, Z+3	; 0x03
    36f4:	94 81       	ldd	r25, Z+4	; 0x04
    36f6:	11 96       	adiw	r26, 0x01	; 1
    36f8:	9c 93       	st	X, r25
    36fa:	8e 93       	st	-X, r24
			/*Non-PWM for channel A and channel B*/
			TCCR1A |= (1<<FOC1A);
    36fc:	af e4       	ldi	r26, 0x4F	; 79
    36fe:	b0 e0       	ldi	r27, 0x00	; 0
    3700:	ef e4       	ldi	r30, 0x4F	; 79
    3702:	f0 e0       	ldi	r31, 0x00	; 0
    3704:	80 81       	ld	r24, Z
    3706:	88 60       	ori	r24, 0x08	; 8
    3708:	8c 93       	st	X, r24
			/*activate CTC mode*/
			TCCR1B = (1<<WGM12);
    370a:	ee e4       	ldi	r30, 0x4E	; 78
    370c:	f0 e0       	ldi	r31, 0x00	; 0
    370e:	88 e0       	ldi	r24, 0x08	; 8
    3710:	80 83       	st	Z, r24
			/*inserting prescaler value in 3 LSB (CS02,CS01,CS00) */
			TCCR1B = (TCCR1B & 0xF8) | (Configuration->Freq_prescaler & 0x07);
    3712:	ae e4       	ldi	r26, 0x4E	; 78
    3714:	b0 e0       	ldi	r27, 0x00	; 0
    3716:	ee e4       	ldi	r30, 0x4E	; 78
    3718:	f0 e0       	ldi	r31, 0x00	; 0
    371a:	80 81       	ld	r24, Z
    371c:	98 2f       	mov	r25, r24
    371e:	98 7f       	andi	r25, 0xF8	; 248
    3720:	e9 81       	ldd	r30, Y+1	; 0x01
    3722:	fa 81       	ldd	r31, Y+2	; 0x02
    3724:	85 81       	ldd	r24, Z+5	; 0x05
    3726:	87 70       	andi	r24, 0x07	; 7
    3728:	89 2b       	or	r24, r25
    372a:	8c 93       	st	X, r24
			/*enable interrupt*/
			TIMSK |= (1<<OCIE1A);
    372c:	a9 e5       	ldi	r26, 0x59	; 89
    372e:	b0 e0       	ldi	r27, 0x00	; 0
    3730:	e9 e5       	ldi	r30, 0x59	; 89
    3732:	f0 e0       	ldi	r31, 0x00	; 0
    3734:	80 81       	ld	r24, Z
    3736:	80 61       	ori	r24, 0x10	; 16
    3738:	8c 93       	st	X, r24
    373a:	c0 c0       	rjmp	.+384    	; 0x38bc <TIMER_init+0x370>
		}
		else if((Configuration->mode) == Fast_PWM_Mode)
    373c:	e9 81       	ldd	r30, Y+1	; 0x01
    373e:	fa 81       	ldd	r31, Y+2	; 0x02
    3740:	81 81       	ldd	r24, Z+1	; 0x01
    3742:	82 30       	cpi	r24, 0x02	; 2
    3744:	09 f0       	breq	.+2      	; 0x3748 <TIMER_init+0x1fc>
    3746:	ba c0       	rjmp	.+372    	; 0x38bc <TIMER_init+0x370>
		{
			/*initialize timer*/
			TCNT1=Configuration->initial_value;
    3748:	ac e4       	ldi	r26, 0x4C	; 76
    374a:	b0 e0       	ldi	r27, 0x00	; 0
    374c:	e9 81       	ldd	r30, Y+1	; 0x01
    374e:	fa 81       	ldd	r31, Y+2	; 0x02
    3750:	82 81       	ldd	r24, Z+2	; 0x02
    3752:	88 2f       	mov	r24, r24
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	11 96       	adiw	r26, 0x01	; 1
    3758:	9c 93       	st	X, r25
    375a:	8e 93       	st	-X, r24
			/*set PD5 output pin to get the output pulses*/
			GPIO_setupPinDirection(PORTD_ID,PIN5_ID,PIN_OUTPUT);
    375c:	83 e0       	ldi	r24, 0x03	; 3
    375e:	65 e0       	ldi	r22, 0x05	; 5
    3760:	41 e0       	ldi	r20, 0x01	; 1
    3762:	0e 94 a3 06 	call	0xd46	; 0xd46 <GPIO_setupPinDirection>
			/*set compare value in PWM mode*/
			OCR1A= Configuration->set_duty;
    3766:	aa e4       	ldi	r26, 0x4A	; 74
    3768:	b0 e0       	ldi	r27, 0x00	; 0
    376a:	e9 81       	ldd	r30, Y+1	; 0x01
    376c:	fa 81       	ldd	r31, Y+2	; 0x02
    376e:	86 81       	ldd	r24, Z+6	; 0x06
    3770:	97 81       	ldd	r25, Z+7	; 0x07
    3772:	11 96       	adiw	r26, 0x01	; 1
    3774:	9c 93       	st	X, r25
    3776:	8e 93       	st	-X, r24
			/*activate Fast PWM mode with OC1A output pulses*/
			TCCR1A |= (1 <<  WGM11) | (1 <<  WGM10) ; /*Register TCCR1A*/
    3778:	af e4       	ldi	r26, 0x4F	; 79
    377a:	b0 e0       	ldi	r27, 0x00	; 0
    377c:	ef e4       	ldi	r30, 0x4F	; 79
    377e:	f0 e0       	ldi	r31, 0x00	; 0
    3780:	80 81       	ld	r24, Z
    3782:	83 60       	ori	r24, 0x03	; 3
    3784:	8c 93       	st	X, r24
			TCCR1B |= (1 <<  WGM13) | (1 <<  WGM12) ; /*Register TCCR1B*/
    3786:	ae e4       	ldi	r26, 0x4E	; 78
    3788:	b0 e0       	ldi	r27, 0x00	; 0
    378a:	ee e4       	ldi	r30, 0x4E	; 78
    378c:	f0 e0       	ldi	r31, 0x00	; 0
    378e:	80 81       	ld	r24, Z
    3790:	88 61       	ori	r24, 0x18	; 24
    3792:	8c 93       	st	X, r24
			/*inserting prescaler value in 3 LSB (CS02,CS01,CS00) */
			TCCR1B = (TCCR1B & 0xF8) | (Configuration->Freq_prescaler & 0x07);
    3794:	ae e4       	ldi	r26, 0x4E	; 78
    3796:	b0 e0       	ldi	r27, 0x00	; 0
    3798:	ee e4       	ldi	r30, 0x4E	; 78
    379a:	f0 e0       	ldi	r31, 0x00	; 0
    379c:	80 81       	ld	r24, Z
    379e:	98 2f       	mov	r25, r24
    37a0:	98 7f       	andi	r25, 0xF8	; 248
    37a2:	e9 81       	ldd	r30, Y+1	; 0x01
    37a4:	fa 81       	ldd	r31, Y+2	; 0x02
    37a6:	85 81       	ldd	r24, Z+5	; 0x05
    37a8:	87 70       	andi	r24, 0x07	; 7
    37aa:	89 2b       	or	r24, r25
    37ac:	8c 93       	st	X, r24
    37ae:	86 c0       	rjmp	.+268    	; 0x38bc <TIMER_init+0x370>
		}
	}

	/*Timer2*/
	else if(Configuration->id == 2)
    37b0:	e9 81       	ldd	r30, Y+1	; 0x01
    37b2:	fa 81       	ldd	r31, Y+2	; 0x02
    37b4:	80 81       	ld	r24, Z
    37b6:	82 30       	cpi	r24, 0x02	; 2
    37b8:	09 f0       	breq	.+2      	; 0x37bc <TIMER_init+0x270>
    37ba:	80 c0       	rjmp	.+256    	; 0x38bc <TIMER_init+0x370>
	{
		/*Check which mode of the three modes in timer*/
		if((Configuration->mode) == Normal_Mode)
    37bc:	e9 81       	ldd	r30, Y+1	; 0x01
    37be:	fa 81       	ldd	r31, Y+2	; 0x02
    37c0:	81 81       	ldd	r24, Z+1	; 0x01
    37c2:	88 23       	and	r24, r24
    37c4:	11 f5       	brne	.+68     	; 0x380a <TIMER_init+0x2be>
		{
			/*initialize timer*/
			TCNT2=Configuration->initial_value;
    37c6:	a4 e4       	ldi	r26, 0x44	; 68
    37c8:	b0 e0       	ldi	r27, 0x00	; 0
    37ca:	e9 81       	ldd	r30, Y+1	; 0x01
    37cc:	fa 81       	ldd	r31, Y+2	; 0x02
    37ce:	82 81       	ldd	r24, Z+2	; 0x02
    37d0:	8c 93       	st	X, r24
			/*Non-PWM*/
			TCCR2 |= (1<<FOC2);
    37d2:	a5 e4       	ldi	r26, 0x45	; 69
    37d4:	b0 e0       	ldi	r27, 0x00	; 0
    37d6:	e5 e4       	ldi	r30, 0x45	; 69
    37d8:	f0 e0       	ldi	r31, 0x00	; 0
    37da:	80 81       	ld	r24, Z
    37dc:	80 68       	ori	r24, 0x80	; 128
    37de:	8c 93       	st	X, r24
			/*inserting prescaler value in 3 LSB (CS22,CS21,CS20) */
			TCCR2 = (TCCR2 & 0xF8) | (Configuration->Freq_prescaler & 0x07);
    37e0:	a5 e4       	ldi	r26, 0x45	; 69
    37e2:	b0 e0       	ldi	r27, 0x00	; 0
    37e4:	e5 e4       	ldi	r30, 0x45	; 69
    37e6:	f0 e0       	ldi	r31, 0x00	; 0
    37e8:	80 81       	ld	r24, Z
    37ea:	98 2f       	mov	r25, r24
    37ec:	98 7f       	andi	r25, 0xF8	; 248
    37ee:	e9 81       	ldd	r30, Y+1	; 0x01
    37f0:	fa 81       	ldd	r31, Y+2	; 0x02
    37f2:	85 81       	ldd	r24, Z+5	; 0x05
    37f4:	87 70       	andi	r24, 0x07	; 7
    37f6:	89 2b       	or	r24, r25
    37f8:	8c 93       	st	X, r24
			/*enable interrupt*/
			TIMSK |= (1<<TOIE2);
    37fa:	a9 e5       	ldi	r26, 0x59	; 89
    37fc:	b0 e0       	ldi	r27, 0x00	; 0
    37fe:	e9 e5       	ldi	r30, 0x59	; 89
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	80 81       	ld	r24, Z
    3804:	80 64       	ori	r24, 0x40	; 64
    3806:	8c 93       	st	X, r24
    3808:	59 c0       	rjmp	.+178    	; 0x38bc <TIMER_init+0x370>
		}
		else if((Configuration->mode) == CMP_Mode)
    380a:	e9 81       	ldd	r30, Y+1	; 0x01
    380c:	fa 81       	ldd	r31, Y+2	; 0x02
    380e:	81 81       	ldd	r24, Z+1	; 0x01
    3810:	81 30       	cpi	r24, 0x01	; 1
    3812:	49 f5       	brne	.+82     	; 0x3866 <TIMER_init+0x31a>
		{
			/*initialize timer*/
			TCNT2=Configuration->initial_value;
    3814:	a4 e4       	ldi	r26, 0x44	; 68
    3816:	b0 e0       	ldi	r27, 0x00	; 0
    3818:	e9 81       	ldd	r30, Y+1	; 0x01
    381a:	fa 81       	ldd	r31, Y+2	; 0x02
    381c:	82 81       	ldd	r24, Z+2	; 0x02
    381e:	8c 93       	st	X, r24
			/*set compare value for compare mode*/
			OCR2=Configuration->cmp_value;
    3820:	a3 e4       	ldi	r26, 0x43	; 67
    3822:	b0 e0       	ldi	r27, 0x00	; 0
    3824:	e9 81       	ldd	r30, Y+1	; 0x01
    3826:	fa 81       	ldd	r31, Y+2	; 0x02
    3828:	83 81       	ldd	r24, Z+3	; 0x03
    382a:	94 81       	ldd	r25, Z+4	; 0x04
    382c:	8c 93       	st	X, r24
			/*activate Non-PWM,CTC mode*/
			TCCR2 |= (1<<FOC2) | (1<<WGM21);
    382e:	a5 e4       	ldi	r26, 0x45	; 69
    3830:	b0 e0       	ldi	r27, 0x00	; 0
    3832:	e5 e4       	ldi	r30, 0x45	; 69
    3834:	f0 e0       	ldi	r31, 0x00	; 0
    3836:	80 81       	ld	r24, Z
    3838:	88 68       	ori	r24, 0x88	; 136
    383a:	8c 93       	st	X, r24
			/*inserting prescaler value in 3 LSB (CS22,CS21,CS20) */
			TCCR2 = (TCCR2 & 0xF8) | (Configuration->Freq_prescaler & 0x07);
    383c:	a5 e4       	ldi	r26, 0x45	; 69
    383e:	b0 e0       	ldi	r27, 0x00	; 0
    3840:	e5 e4       	ldi	r30, 0x45	; 69
    3842:	f0 e0       	ldi	r31, 0x00	; 0
    3844:	80 81       	ld	r24, Z
    3846:	98 2f       	mov	r25, r24
    3848:	98 7f       	andi	r25, 0xF8	; 248
    384a:	e9 81       	ldd	r30, Y+1	; 0x01
    384c:	fa 81       	ldd	r31, Y+2	; 0x02
    384e:	85 81       	ldd	r24, Z+5	; 0x05
    3850:	87 70       	andi	r24, 0x07	; 7
    3852:	89 2b       	or	r24, r25
    3854:	8c 93       	st	X, r24
			/*enable interrupt*/
			TIMSK |= (1<<OCIE2);
    3856:	a9 e5       	ldi	r26, 0x59	; 89
    3858:	b0 e0       	ldi	r27, 0x00	; 0
    385a:	e9 e5       	ldi	r30, 0x59	; 89
    385c:	f0 e0       	ldi	r31, 0x00	; 0
    385e:	80 81       	ld	r24, Z
    3860:	80 68       	ori	r24, 0x80	; 128
    3862:	8c 93       	st	X, r24
    3864:	2b c0       	rjmp	.+86     	; 0x38bc <TIMER_init+0x370>
		}
		else if((Configuration->mode) == Fast_PWM_Mode)
    3866:	e9 81       	ldd	r30, Y+1	; 0x01
    3868:	fa 81       	ldd	r31, Y+2	; 0x02
    386a:	81 81       	ldd	r24, Z+1	; 0x01
    386c:	82 30       	cpi	r24, 0x02	; 2
    386e:	31 f5       	brne	.+76     	; 0x38bc <TIMER_init+0x370>
		{
			/*initialize timer*/
			TCNT2=Configuration->initial_value;
    3870:	a4 e4       	ldi	r26, 0x44	; 68
    3872:	b0 e0       	ldi	r27, 0x00	; 0
    3874:	e9 81       	ldd	r30, Y+1	; 0x01
    3876:	fa 81       	ldd	r31, Y+2	; 0x02
    3878:	82 81       	ldd	r24, Z+2	; 0x02
    387a:	8c 93       	st	X, r24
			/*set PD7 output pin to get the output pulses*/
			GPIO_setupPinDirection(PORTD_ID,PIN7_ID,PIN_OUTPUT);
    387c:	83 e0       	ldi	r24, 0x03	; 3
    387e:	67 e0       	ldi	r22, 0x07	; 7
    3880:	41 e0       	ldi	r20, 0x01	; 1
    3882:	0e 94 a3 06 	call	0xd46	; 0xd46 <GPIO_setupPinDirection>
			/*set compare value in PWM mode*/
			OCR2= Configuration->set_duty;
    3886:	a3 e4       	ldi	r26, 0x43	; 67
    3888:	b0 e0       	ldi	r27, 0x00	; 0
    388a:	e9 81       	ldd	r30, Y+1	; 0x01
    388c:	fa 81       	ldd	r31, Y+2	; 0x02
    388e:	86 81       	ldd	r24, Z+6	; 0x06
    3890:	97 81       	ldd	r25, Z+7	; 0x07
    3892:	8c 93       	st	X, r24
			/*activate Fast_PWM mode and clear OC0 on compare match*/
			TCCR2 |= (1<<WGM21) | (1<<WGM20) | (1<<COM21);
    3894:	a5 e4       	ldi	r26, 0x45	; 69
    3896:	b0 e0       	ldi	r27, 0x00	; 0
    3898:	e5 e4       	ldi	r30, 0x45	; 69
    389a:	f0 e0       	ldi	r31, 0x00	; 0
    389c:	80 81       	ld	r24, Z
    389e:	88 66       	ori	r24, 0x68	; 104
    38a0:	8c 93       	st	X, r24
			/*inserting prescaler value in 3 LSB (CS22,CS21,CS20) */
			TCCR2 = (TCCR2 & 0xF8) | (Configuration->Freq_prescaler & 0x07);
    38a2:	a5 e4       	ldi	r26, 0x45	; 69
    38a4:	b0 e0       	ldi	r27, 0x00	; 0
    38a6:	e5 e4       	ldi	r30, 0x45	; 69
    38a8:	f0 e0       	ldi	r31, 0x00	; 0
    38aa:	80 81       	ld	r24, Z
    38ac:	98 2f       	mov	r25, r24
    38ae:	98 7f       	andi	r25, 0xF8	; 248
    38b0:	e9 81       	ldd	r30, Y+1	; 0x01
    38b2:	fa 81       	ldd	r31, Y+2	; 0x02
    38b4:	85 81       	ldd	r24, Z+5	; 0x05
    38b6:	87 70       	andi	r24, 0x07	; 7
    38b8:	89 2b       	or	r24, r25
    38ba:	8c 93       	st	X, r24
		}

	}
}
    38bc:	0f 90       	pop	r0
    38be:	0f 90       	pop	r0
    38c0:	cf 91       	pop	r28
    38c2:	df 91       	pop	r29
    38c4:	08 95       	ret

000038c6 <TIMER_Deinit>:
void TIMER_Deinit (Timer_ID id)
{
    38c6:	df 93       	push	r29
    38c8:	cf 93       	push	r28
    38ca:	0f 92       	push	r0
    38cc:	cd b7       	in	r28, 0x3d	; 61
    38ce:	de b7       	in	r29, 0x3e	; 62
    38d0:	89 83       	std	Y+1, r24	; 0x01
	/*Check which timer of the three timers in AVR MC*/

	/*Timer0*/
	if(id == 0)
    38d2:	89 81       	ldd	r24, Y+1	; 0x01
    38d4:	88 23       	and	r24, r24
    38d6:	51 f4       	brne	.+20     	; 0x38ec <TIMER_Deinit+0x26>
	{
		/*Clear TCCR0 register*/
		TCCR0 = 0x00;
    38d8:	e3 e5       	ldi	r30, 0x53	; 83
    38da:	f0 e0       	ldi	r31, 0x00	; 0
    38dc:	10 82       	st	Z, r1
		/*Clear TCNT0 register*/
		TCNT0= 0;
    38de:	e2 e5       	ldi	r30, 0x52	; 82
    38e0:	f0 e0       	ldi	r31, 0x00	; 0
    38e2:	10 82       	st	Z, r1
		/*Clear OCR0 register*/
		OCR0=0;
    38e4:	ec e5       	ldi	r30, 0x5C	; 92
    38e6:	f0 e0       	ldi	r31, 0x00	; 0
    38e8:	10 82       	st	Z, r1
    38ea:	22 c0       	rjmp	.+68     	; 0x3930 <TIMER_Deinit+0x6a>
	}

	/*Timer1*/
	else if(id == 1 )
    38ec:	89 81       	ldd	r24, Y+1	; 0x01
    38ee:	81 30       	cpi	r24, 0x01	; 1
    38f0:	99 f4       	brne	.+38     	; 0x3918 <TIMER_Deinit+0x52>
	{
		/*Clear TCCR1A register*/
		TCCR1A = 0x00;
    38f2:	ef e4       	ldi	r30, 0x4F	; 79
    38f4:	f0 e0       	ldi	r31, 0x00	; 0
    38f6:	10 82       	st	Z, r1
		/*Clear TCCR1B register*/
		TCCR1B = 0x00;
    38f8:	ee e4       	ldi	r30, 0x4E	; 78
    38fa:	f0 e0       	ldi	r31, 0x00	; 0
    38fc:	10 82       	st	Z, r1
		/*Clear TCNT1 register*/
		TCNT1= 0;
    38fe:	ec e4       	ldi	r30, 0x4C	; 76
    3900:	f0 e0       	ldi	r31, 0x00	; 0
    3902:	11 82       	std	Z+1, r1	; 0x01
    3904:	10 82       	st	Z, r1
		/*Clear OCR1A register*/
		OCR1A=0;
    3906:	ea e4       	ldi	r30, 0x4A	; 74
    3908:	f0 e0       	ldi	r31, 0x00	; 0
    390a:	11 82       	std	Z+1, r1	; 0x01
    390c:	10 82       	st	Z, r1
		/*Clear OCR1B register*/
		OCR1B=0;
    390e:	e8 e4       	ldi	r30, 0x48	; 72
    3910:	f0 e0       	ldi	r31, 0x00	; 0
    3912:	11 82       	std	Z+1, r1	; 0x01
    3914:	10 82       	st	Z, r1
    3916:	0c c0       	rjmp	.+24     	; 0x3930 <TIMER_Deinit+0x6a>
	}

	/*Timer2*/
	else if(id == 2)
    3918:	89 81       	ldd	r24, Y+1	; 0x01
    391a:	82 30       	cpi	r24, 0x02	; 2
    391c:	49 f4       	brne	.+18     	; 0x3930 <TIMER_Deinit+0x6a>
	{
		/*Clear TCCR2 register*/
		TCCR2 = 0x00;
    391e:	e5 e4       	ldi	r30, 0x45	; 69
    3920:	f0 e0       	ldi	r31, 0x00	; 0
    3922:	10 82       	st	Z, r1
		/*Clear TCNT2 register*/
		TCNT2= 0;
    3924:	e4 e4       	ldi	r30, 0x44	; 68
    3926:	f0 e0       	ldi	r31, 0x00	; 0
    3928:	10 82       	st	Z, r1
		/*Clear OCR2 register*/
		OCR2=0;
    392a:	e3 e4       	ldi	r30, 0x43	; 67
    392c:	f0 e0       	ldi	r31, 0x00	; 0
    392e:	10 82       	st	Z, r1
	}
	/*Clear TIMSK register for all timers interrupt*/
	TIMSK=0x00;
    3930:	e9 e5       	ldi	r30, 0x59	; 89
    3932:	f0 e0       	ldi	r31, 0x00	; 0
    3934:	10 82       	st	Z, r1
}
    3936:	0f 90       	pop	r0
    3938:	cf 91       	pop	r28
    393a:	df 91       	pop	r29
    393c:	08 95       	ret

0000393e <TIMER_setCallback>:
void TIMER_setCallback(void(*a_ptr)(),TIMER_Mode mode,Timer_ID id)
{
    393e:	df 93       	push	r29
    3940:	cf 93       	push	r28
    3942:	00 d0       	rcall	.+0      	; 0x3944 <TIMER_setCallback+0x6>
    3944:	00 d0       	rcall	.+0      	; 0x3946 <TIMER_setCallback+0x8>
    3946:	cd b7       	in	r28, 0x3d	; 61
    3948:	de b7       	in	r29, 0x3e	; 62
    394a:	9a 83       	std	Y+2, r25	; 0x02
    394c:	89 83       	std	Y+1, r24	; 0x01
    394e:	6b 83       	std	Y+3, r22	; 0x03
    3950:	4c 83       	std	Y+4, r20	; 0x04
	/*Check which timer of the three timers in AVR MC*/

	/*Timer0*/
	if(id == 0)
    3952:	8c 81       	ldd	r24, Y+4	; 0x04
    3954:	88 23       	and	r24, r24
    3956:	39 f4       	brne	.+14     	; 0x3966 <TIMER_setCallback+0x28>
	{
		g_callBackPtr_timer0  = a_ptr;
    3958:	89 81       	ldd	r24, Y+1	; 0x01
    395a:	9a 81       	ldd	r25, Y+2	; 0x02
    395c:	90 93 d9 00 	sts	0x00D9, r25
    3960:	80 93 d8 00 	sts	0x00D8, r24
    3964:	13 c0       	rjmp	.+38     	; 0x398c <TIMER_setCallback+0x4e>
	}

	/*Timer1*/
	else if(id == 1)
    3966:	8c 81       	ldd	r24, Y+4	; 0x04
    3968:	81 30       	cpi	r24, 0x01	; 1
    396a:	39 f4       	brne	.+14     	; 0x397a <TIMER_setCallback+0x3c>
	{
		g_callBackPtr_timer1  = a_ptr;
    396c:	89 81       	ldd	r24, Y+1	; 0x01
    396e:	9a 81       	ldd	r25, Y+2	; 0x02
    3970:	90 93 db 00 	sts	0x00DB, r25
    3974:	80 93 da 00 	sts	0x00DA, r24
    3978:	09 c0       	rjmp	.+18     	; 0x398c <TIMER_setCallback+0x4e>
	}

	/*Timer2*/
	else if(id == 2)
    397a:	8c 81       	ldd	r24, Y+4	; 0x04
    397c:	82 30       	cpi	r24, 0x02	; 2
    397e:	31 f4       	brne	.+12     	; 0x398c <TIMER_setCallback+0x4e>
	{
		g_callBackPtr_timer2  = a_ptr;
    3980:	89 81       	ldd	r24, Y+1	; 0x01
    3982:	9a 81       	ldd	r25, Y+2	; 0x02
    3984:	90 93 dd 00 	sts	0x00DD, r25
    3988:	80 93 dc 00 	sts	0x00DC, r24
	}
}
    398c:	0f 90       	pop	r0
    398e:	0f 90       	pop	r0
    3990:	0f 90       	pop	r0
    3992:	0f 90       	pop	r0
    3994:	cf 91       	pop	r28
    3996:	df 91       	pop	r29
    3998:	08 95       	ret

0000399a <UART_init>:
#include "uart.h"
#include "common_macros.h"
#include <AVR/io.h>

void UART_init(UART_Configuration * config)
{
    399a:	df 93       	push	r29
    399c:	cf 93       	push	r28
    399e:	00 d0       	rcall	.+0      	; 0x39a0 <UART_init+0x6>
    39a0:	00 d0       	rcall	.+0      	; 0x39a2 <UART_init+0x8>
    39a2:	cd b7       	in	r28, 0x3d	; 61
    39a4:	de b7       	in	r29, 0x3e	; 62
    39a6:	9c 83       	std	Y+4, r25	; 0x04
    39a8:	8b 83       	std	Y+3, r24	; 0x03
	/*
	 *  Declare uint16 UBRR_value to calculate UBRR value and store it
	 */
	uint16 UBRR_value = 0;
    39aa:	1a 82       	std	Y+2, r1	; 0x02
    39ac:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * We will use double transmission speed by seting U2X by 1
	 */

	UCSRA |= (1<<U2X);
    39ae:	ab e2       	ldi	r26, 0x2B	; 43
    39b0:	b0 e0       	ldi	r27, 0x00	; 0
    39b2:	eb e2       	ldi	r30, 0x2B	; 43
    39b4:	f0 e0       	ldi	r31, 0x00	; 0
    39b6:	80 81       	ld	r24, Z
    39b8:	82 60       	ori	r24, 0x02	; 2
    39ba:	8c 93       	st	X, r24
	/*
	 *  Enabling Rx & Tx of the UART peripheral
	 */
	UCSRB |= (1 << RXEN) | (1 << TXEN);
    39bc:	aa e2       	ldi	r26, 0x2A	; 42
    39be:	b0 e0       	ldi	r27, 0x00	; 0
    39c0:	ea e2       	ldi	r30, 0x2A	; 42
    39c2:	f0 e0       	ldi	r31, 0x00	; 0
    39c4:	80 81       	ld	r24, Z
    39c6:	88 61       	ori	r24, 0x18	; 24
    39c8:	8c 93       	st	X, r24
	UCSRC |= 1<<URSEL;
    39ca:	a0 e4       	ldi	r26, 0x40	; 64
    39cc:	b0 e0       	ldi	r27, 0x00	; 0
    39ce:	e0 e4       	ldi	r30, 0x40	; 64
    39d0:	f0 e0       	ldi	r31, 0x00	; 0
    39d2:	80 81       	ld	r24, Z
    39d4:	80 68       	ori	r24, 0x80	; 128
    39d6:	8c 93       	st	X, r24
	/*
	 * Choosing 8-bits data
	 */
	UCSRC = (UCSRC & 0xCF) | (config->parity << 4);
    39d8:	a0 e4       	ldi	r26, 0x40	; 64
    39da:	b0 e0       	ldi	r27, 0x00	; 0
    39dc:	e0 e4       	ldi	r30, 0x40	; 64
    39de:	f0 e0       	ldi	r31, 0x00	; 0
    39e0:	80 81       	ld	r24, Z
    39e2:	28 2f       	mov	r18, r24
    39e4:	2f 7c       	andi	r18, 0xCF	; 207
    39e6:	eb 81       	ldd	r30, Y+3	; 0x03
    39e8:	fc 81       	ldd	r31, Y+4	; 0x04
    39ea:	81 81       	ldd	r24, Z+1	; 0x01
    39ec:	88 2f       	mov	r24, r24
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	82 95       	swap	r24
    39f2:	92 95       	swap	r25
    39f4:	90 7f       	andi	r25, 0xF0	; 240
    39f6:	98 27       	eor	r25, r24
    39f8:	80 7f       	andi	r24, 0xF0	; 240
    39fa:	98 27       	eor	r25, r24
    39fc:	82 2b       	or	r24, r18
    39fe:	8c 93       	st	X, r24
	/*
	 * choose Parity bit and choose 1-bit as stop bit not 2-bits
	 */
	UCSRC = (UCSRC & 0xF9) | (config->data_bits << 1);
    3a00:	a0 e4       	ldi	r26, 0x40	; 64
    3a02:	b0 e0       	ldi	r27, 0x00	; 0
    3a04:	e0 e4       	ldi	r30, 0x40	; 64
    3a06:	f0 e0       	ldi	r31, 0x00	; 0
    3a08:	80 81       	ld	r24, Z
    3a0a:	28 2f       	mov	r18, r24
    3a0c:	29 7f       	andi	r18, 0xF9	; 249
    3a0e:	eb 81       	ldd	r30, Y+3	; 0x03
    3a10:	fc 81       	ldd	r31, Y+4	; 0x04
    3a12:	80 81       	ld	r24, Z
    3a14:	88 2f       	mov	r24, r24
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	88 0f       	add	r24, r24
    3a1a:	99 1f       	adc	r25, r25
    3a1c:	82 2b       	or	r24, r18
    3a1e:	8c 93       	st	X, r24
	/*
	 * Writing the baud rate in UBRR
	 */
	UBRR_value= ((uint16) ( (  ( F_CPU ) / ( 8UL * config->baud_rate ) ) - 1 ) );
    3a20:	eb 81       	ldd	r30, Y+3	; 0x03
    3a22:	fc 81       	ldd	r31, Y+4	; 0x04
    3a24:	83 81       	ldd	r24, Z+3	; 0x03
    3a26:	94 81       	ldd	r25, Z+4	; 0x04
    3a28:	cc 01       	movw	r24, r24
    3a2a:	a0 e0       	ldi	r26, 0x00	; 0
    3a2c:	b0 e0       	ldi	r27, 0x00	; 0
    3a2e:	88 0f       	add	r24, r24
    3a30:	99 1f       	adc	r25, r25
    3a32:	aa 1f       	adc	r26, r26
    3a34:	bb 1f       	adc	r27, r27
    3a36:	88 0f       	add	r24, r24
    3a38:	99 1f       	adc	r25, r25
    3a3a:	aa 1f       	adc	r26, r26
    3a3c:	bb 1f       	adc	r27, r27
    3a3e:	88 0f       	add	r24, r24
    3a40:	99 1f       	adc	r25, r25
    3a42:	aa 1f       	adc	r26, r26
    3a44:	bb 1f       	adc	r27, r27
    3a46:	9c 01       	movw	r18, r24
    3a48:	ad 01       	movw	r20, r26
    3a4a:	80 e4       	ldi	r24, 0x40	; 64
    3a4c:	92 e4       	ldi	r25, 0x42	; 66
    3a4e:	af e0       	ldi	r26, 0x0F	; 15
    3a50:	b0 e0       	ldi	r27, 0x00	; 0
    3a52:	bc 01       	movw	r22, r24
    3a54:	cd 01       	movw	r24, r26
    3a56:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__udivmodsi4>
    3a5a:	da 01       	movw	r26, r20
    3a5c:	c9 01       	movw	r24, r18
    3a5e:	01 97       	sbiw	r24, 0x01	; 1
    3a60:	9a 83       	std	Y+2, r25	; 0x02
    3a62:	89 83       	std	Y+1, r24	; 0x01

	UBRRH = (UBRR_value>>8);
    3a64:	e0 e4       	ldi	r30, 0x40	; 64
    3a66:	f0 e0       	ldi	r31, 0x00	; 0
    3a68:	89 81       	ldd	r24, Y+1	; 0x01
    3a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a6c:	89 2f       	mov	r24, r25
    3a6e:	99 27       	eor	r25, r25
    3a70:	80 83       	st	Z, r24
	UBRRL =  UBRR_value;
    3a72:	e9 e2       	ldi	r30, 0x29	; 41
    3a74:	f0 e0       	ldi	r31, 0x00	; 0
    3a76:	89 81       	ldd	r24, Y+1	; 0x01
    3a78:	80 83       	st	Z, r24
}
    3a7a:	0f 90       	pop	r0
    3a7c:	0f 90       	pop	r0
    3a7e:	0f 90       	pop	r0
    3a80:	0f 90       	pop	r0
    3a82:	cf 91       	pop	r28
    3a84:	df 91       	pop	r29
    3a86:	08 95       	ret

00003a88 <UART_receiveByte>:

uint8 UART_receiveByte()
{
    3a88:	df 93       	push	r29
    3a8a:	cf 93       	push	r28
    3a8c:	cd b7       	in	r28, 0x3d	; 61
    3a8e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Waiting for data utill it be received by UART
	 */
	while(BIT_IS_CLEAR(UCSRA,RXC));
    3a90:	eb e2       	ldi	r30, 0x2B	; 43
    3a92:	f0 e0       	ldi	r31, 0x00	; 0
    3a94:	80 81       	ld	r24, Z
    3a96:	88 23       	and	r24, r24
    3a98:	dc f7       	brge	.-10     	; 0x3a90 <UART_receiveByte+0x8>
	/*
	 * return the receive data
	 */
	return UDR;
    3a9a:	ec e2       	ldi	r30, 0x2C	; 44
    3a9c:	f0 e0       	ldi	r31, 0x00	; 0
    3a9e:	80 81       	ld	r24, Z
}
    3aa0:	cf 91       	pop	r28
    3aa2:	df 91       	pop	r29
    3aa4:	08 95       	ret

00003aa6 <UART_sendByte>:
void UART_sendByte(uint8 data)
{
    3aa6:	df 93       	push	r29
    3aa8:	cf 93       	push	r28
    3aaa:	0f 92       	push	r0
    3aac:	cd b7       	in	r28, 0x3d	; 61
    3aae:	de b7       	in	r29, 0x3e	; 62
    3ab0:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
    3ab2:	ec e2       	ldi	r30, 0x2C	; 44
    3ab4:	f0 e0       	ldi	r31, 0x00	; 0
    3ab6:	89 81       	ldd	r24, Y+1	; 0x01
    3ab8:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(UCSRA,TXC)); // Wait until the transmission is complete TXC = 1
    3aba:	eb e2       	ldi	r30, 0x2B	; 43
    3abc:	f0 e0       	ldi	r31, 0x00	; 0
    3abe:	80 81       	ld	r24, Z
    3ac0:	88 2f       	mov	r24, r24
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	80 74       	andi	r24, 0x40	; 64
    3ac6:	90 70       	andi	r25, 0x00	; 0
    3ac8:	00 97       	sbiw	r24, 0x00	; 0
    3aca:	b9 f3       	breq	.-18     	; 0x3aba <UART_sendByte+0x14>
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
    3acc:	ab e2       	ldi	r26, 0x2B	; 43
    3ace:	b0 e0       	ldi	r27, 0x00	; 0
    3ad0:	eb e2       	ldi	r30, 0x2B	; 43
    3ad2:	f0 e0       	ldi	r31, 0x00	; 0
    3ad4:	80 81       	ld	r24, Z
    3ad6:	80 64       	ori	r24, 0x40	; 64
    3ad8:	8c 93       	st	X, r24
}
    3ada:	0f 90       	pop	r0
    3adc:	cf 91       	pop	r28
    3ade:	df 91       	pop	r29
    3ae0:	08 95       	ret

00003ae2 <UART_receiveString>:
void UART_receiveString(uint8* str)
{
    3ae2:	0f 93       	push	r16
    3ae4:	1f 93       	push	r17
    3ae6:	df 93       	push	r29
    3ae8:	cf 93       	push	r28
    3aea:	00 d0       	rcall	.+0      	; 0x3aec <UART_receiveString+0xa>
    3aec:	0f 92       	push	r0
    3aee:	cd b7       	in	r28, 0x3d	; 61
    3af0:	de b7       	in	r29, 0x3e	; 62
    3af2:	9b 83       	std	Y+3, r25	; 0x03
    3af4:	8a 83       	std	Y+2, r24	; 0x02
	/*Declare index initialized by */
	uint8 idx=0;
    3af6:	19 82       	std	Y+1, r1	; 0x01
	/*receive first character*/
	str[idx]=UART_receiveByte();
    3af8:	89 81       	ldd	r24, Y+1	; 0x01
    3afa:	28 2f       	mov	r18, r24
    3afc:	30 e0       	ldi	r19, 0x00	; 0
    3afe:	8a 81       	ldd	r24, Y+2	; 0x02
    3b00:	9b 81       	ldd	r25, Y+3	; 0x03
    3b02:	8c 01       	movw	r16, r24
    3b04:	02 0f       	add	r16, r18
    3b06:	13 1f       	adc	r17, r19
    3b08:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <UART_receiveByte>
    3b0c:	f8 01       	movw	r30, r16
    3b0e:	80 83       	st	Z, r24
    3b10:	0f c0       	rjmp	.+30     	; 0x3b30 <UART_receiveString+0x4e>
/*receive data until special sign(#) between the two UART*/
	while(str[idx]!='#')
	{
		idx++; /*increment index*/
    3b12:	89 81       	ldd	r24, Y+1	; 0x01
    3b14:	8f 5f       	subi	r24, 0xFF	; 255
    3b16:	89 83       	std	Y+1, r24	; 0x01
		str[idx]=UART_receiveByte();/*receive a character*/
    3b18:	89 81       	ldd	r24, Y+1	; 0x01
    3b1a:	28 2f       	mov	r18, r24
    3b1c:	30 e0       	ldi	r19, 0x00	; 0
    3b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b20:	9b 81       	ldd	r25, Y+3	; 0x03
    3b22:	8c 01       	movw	r16, r24
    3b24:	02 0f       	add	r16, r18
    3b26:	13 1f       	adc	r17, r19
    3b28:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <UART_receiveByte>
    3b2c:	f8 01       	movw	r30, r16
    3b2e:	80 83       	st	Z, r24
	/*Declare index initialized by */
	uint8 idx=0;
	/*receive first character*/
	str[idx]=UART_receiveByte();
/*receive data until special sign(#) between the two UART*/
	while(str[idx]!='#')
    3b30:	89 81       	ldd	r24, Y+1	; 0x01
    3b32:	28 2f       	mov	r18, r24
    3b34:	30 e0       	ldi	r19, 0x00	; 0
    3b36:	8a 81       	ldd	r24, Y+2	; 0x02
    3b38:	9b 81       	ldd	r25, Y+3	; 0x03
    3b3a:	fc 01       	movw	r30, r24
    3b3c:	e2 0f       	add	r30, r18
    3b3e:	f3 1f       	adc	r31, r19
    3b40:	80 81       	ld	r24, Z
    3b42:	83 32       	cpi	r24, 0x23	; 35
    3b44:	31 f7       	brne	.-52     	; 0x3b12 <UART_receiveString+0x30>
	{
		idx++; /*increment index*/
		str[idx]=UART_receiveByte();/*receive a character*/
	}
	str[idx]='\0';
    3b46:	89 81       	ldd	r24, Y+1	; 0x01
    3b48:	28 2f       	mov	r18, r24
    3b4a:	30 e0       	ldi	r19, 0x00	; 0
    3b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b4e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b50:	fc 01       	movw	r30, r24
    3b52:	e2 0f       	add	r30, r18
    3b54:	f3 1f       	adc	r31, r19
    3b56:	10 82       	st	Z, r1
}
    3b58:	0f 90       	pop	r0
    3b5a:	0f 90       	pop	r0
    3b5c:	0f 90       	pop	r0
    3b5e:	cf 91       	pop	r28
    3b60:	df 91       	pop	r29
    3b62:	1f 91       	pop	r17
    3b64:	0f 91       	pop	r16
    3b66:	08 95       	ret

00003b68 <UART_sendString>:
void UART_sendString(uint8* str)
{
    3b68:	df 93       	push	r29
    3b6a:	cf 93       	push	r28
    3b6c:	00 d0       	rcall	.+0      	; 0x3b6e <UART_sendString+0x6>
    3b6e:	0f 92       	push	r0
    3b70:	cd b7       	in	r28, 0x3d	; 61
    3b72:	de b7       	in	r29, 0x3e	; 62
    3b74:	9b 83       	std	Y+3, r25	; 0x03
    3b76:	8a 83       	std	Y+2, r24	; 0x02
	/*declare an index  and initialized by 0*/
	uint8 idx=0;
    3b78:	19 82       	std	Y+1, r1	; 0x01
    3b7a:	0e c0       	rjmp	.+28     	; 0x3b98 <UART_sendString+0x30>
	/*sending the string*/
	while(str[idx] != '\0')
	{
		UART_sendByte(str[idx]);
    3b7c:	89 81       	ldd	r24, Y+1	; 0x01
    3b7e:	28 2f       	mov	r18, r24
    3b80:	30 e0       	ldi	r19, 0x00	; 0
    3b82:	8a 81       	ldd	r24, Y+2	; 0x02
    3b84:	9b 81       	ldd	r25, Y+3	; 0x03
    3b86:	fc 01       	movw	r30, r24
    3b88:	e2 0f       	add	r30, r18
    3b8a:	f3 1f       	adc	r31, r19
    3b8c:	80 81       	ld	r24, Z
    3b8e:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <UART_sendByte>
		idx++;
    3b92:	89 81       	ldd	r24, Y+1	; 0x01
    3b94:	8f 5f       	subi	r24, 0xFF	; 255
    3b96:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(uint8* str)
{
	/*declare an index  and initialized by 0*/
	uint8 idx=0;
	/*sending the string*/
	while(str[idx] != '\0')
    3b98:	89 81       	ldd	r24, Y+1	; 0x01
    3b9a:	28 2f       	mov	r18, r24
    3b9c:	30 e0       	ldi	r19, 0x00	; 0
    3b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba0:	9b 81       	ldd	r25, Y+3	; 0x03
    3ba2:	fc 01       	movw	r30, r24
    3ba4:	e2 0f       	add	r30, r18
    3ba6:	f3 1f       	adc	r31, r19
    3ba8:	80 81       	ld	r24, Z
    3baa:	88 23       	and	r24, r24
    3bac:	39 f7       	brne	.-50     	; 0x3b7c <UART_sendString+0x14>
	{
		UART_sendByte(str[idx]);
		idx++;
	}
}
    3bae:	0f 90       	pop	r0
    3bb0:	0f 90       	pop	r0
    3bb2:	0f 90       	pop	r0
    3bb4:	cf 91       	pop	r28
    3bb6:	df 91       	pop	r29
    3bb8:	08 95       	ret

00003bba <__udivmodsi4>:
    3bba:	a1 e2       	ldi	r26, 0x21	; 33
    3bbc:	1a 2e       	mov	r1, r26
    3bbe:	aa 1b       	sub	r26, r26
    3bc0:	bb 1b       	sub	r27, r27
    3bc2:	fd 01       	movw	r30, r26
    3bc4:	0d c0       	rjmp	.+26     	; 0x3be0 <__udivmodsi4_ep>

00003bc6 <__udivmodsi4_loop>:
    3bc6:	aa 1f       	adc	r26, r26
    3bc8:	bb 1f       	adc	r27, r27
    3bca:	ee 1f       	adc	r30, r30
    3bcc:	ff 1f       	adc	r31, r31
    3bce:	a2 17       	cp	r26, r18
    3bd0:	b3 07       	cpc	r27, r19
    3bd2:	e4 07       	cpc	r30, r20
    3bd4:	f5 07       	cpc	r31, r21
    3bd6:	20 f0       	brcs	.+8      	; 0x3be0 <__udivmodsi4_ep>
    3bd8:	a2 1b       	sub	r26, r18
    3bda:	b3 0b       	sbc	r27, r19
    3bdc:	e4 0b       	sbc	r30, r20
    3bde:	f5 0b       	sbc	r31, r21

00003be0 <__udivmodsi4_ep>:
    3be0:	66 1f       	adc	r22, r22
    3be2:	77 1f       	adc	r23, r23
    3be4:	88 1f       	adc	r24, r24
    3be6:	99 1f       	adc	r25, r25
    3be8:	1a 94       	dec	r1
    3bea:	69 f7       	brne	.-38     	; 0x3bc6 <__udivmodsi4_loop>
    3bec:	60 95       	com	r22
    3bee:	70 95       	com	r23
    3bf0:	80 95       	com	r24
    3bf2:	90 95       	com	r25
    3bf4:	9b 01       	movw	r18, r22
    3bf6:	ac 01       	movw	r20, r24
    3bf8:	bd 01       	movw	r22, r26
    3bfa:	cf 01       	movw	r24, r30
    3bfc:	08 95       	ret

00003bfe <__prologue_saves__>:
    3bfe:	2f 92       	push	r2
    3c00:	3f 92       	push	r3
    3c02:	4f 92       	push	r4
    3c04:	5f 92       	push	r5
    3c06:	6f 92       	push	r6
    3c08:	7f 92       	push	r7
    3c0a:	8f 92       	push	r8
    3c0c:	9f 92       	push	r9
    3c0e:	af 92       	push	r10
    3c10:	bf 92       	push	r11
    3c12:	cf 92       	push	r12
    3c14:	df 92       	push	r13
    3c16:	ef 92       	push	r14
    3c18:	ff 92       	push	r15
    3c1a:	0f 93       	push	r16
    3c1c:	1f 93       	push	r17
    3c1e:	cf 93       	push	r28
    3c20:	df 93       	push	r29
    3c22:	cd b7       	in	r28, 0x3d	; 61
    3c24:	de b7       	in	r29, 0x3e	; 62
    3c26:	ca 1b       	sub	r28, r26
    3c28:	db 0b       	sbc	r29, r27
    3c2a:	0f b6       	in	r0, 0x3f	; 63
    3c2c:	f8 94       	cli
    3c2e:	de bf       	out	0x3e, r29	; 62
    3c30:	0f be       	out	0x3f, r0	; 63
    3c32:	cd bf       	out	0x3d, r28	; 61
    3c34:	09 94       	ijmp

00003c36 <__epilogue_restores__>:
    3c36:	2a 88       	ldd	r2, Y+18	; 0x12
    3c38:	39 88       	ldd	r3, Y+17	; 0x11
    3c3a:	48 88       	ldd	r4, Y+16	; 0x10
    3c3c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c3e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c40:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c42:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c44:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c46:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c48:	b9 84       	ldd	r11, Y+9	; 0x09
    3c4a:	c8 84       	ldd	r12, Y+8	; 0x08
    3c4c:	df 80       	ldd	r13, Y+7	; 0x07
    3c4e:	ee 80       	ldd	r14, Y+6	; 0x06
    3c50:	fd 80       	ldd	r15, Y+5	; 0x05
    3c52:	0c 81       	ldd	r16, Y+4	; 0x04
    3c54:	1b 81       	ldd	r17, Y+3	; 0x03
    3c56:	aa 81       	ldd	r26, Y+2	; 0x02
    3c58:	b9 81       	ldd	r27, Y+1	; 0x01
    3c5a:	ce 0f       	add	r28, r30
    3c5c:	d1 1d       	adc	r29, r1
    3c5e:	0f b6       	in	r0, 0x3f	; 63
    3c60:	f8 94       	cli
    3c62:	de bf       	out	0x3e, r29	; 62
    3c64:	0f be       	out	0x3f, r0	; 63
    3c66:	cd bf       	out	0x3d, r28	; 61
    3c68:	ed 01       	movw	r28, r26
    3c6a:	08 95       	ret

00003c6c <strcpy>:
    3c6c:	fb 01       	movw	r30, r22
    3c6e:	dc 01       	movw	r26, r24
    3c70:	01 90       	ld	r0, Z+
    3c72:	0d 92       	st	X+, r0
    3c74:	00 20       	and	r0, r0
    3c76:	e1 f7       	brne	.-8      	; 0x3c70 <strcpy+0x4>
    3c78:	08 95       	ret

00003c7a <itoa>:
    3c7a:	fb 01       	movw	r30, r22
    3c7c:	9f 01       	movw	r18, r30
    3c7e:	e8 94       	clt
    3c80:	42 30       	cpi	r20, 0x02	; 2
    3c82:	c4 f0       	brlt	.+48     	; 0x3cb4 <itoa+0x3a>
    3c84:	45 32       	cpi	r20, 0x25	; 37
    3c86:	b4 f4       	brge	.+44     	; 0x3cb4 <itoa+0x3a>
    3c88:	4a 30       	cpi	r20, 0x0A	; 10
    3c8a:	29 f4       	brne	.+10     	; 0x3c96 <itoa+0x1c>
    3c8c:	97 fb       	bst	r25, 7
    3c8e:	1e f4       	brtc	.+6      	; 0x3c96 <itoa+0x1c>
    3c90:	90 95       	com	r25
    3c92:	81 95       	neg	r24
    3c94:	9f 4f       	sbci	r25, 0xFF	; 255
    3c96:	64 2f       	mov	r22, r20
    3c98:	77 27       	eor	r23, r23
    3c9a:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <__udivmodhi4>
    3c9e:	80 5d       	subi	r24, 0xD0	; 208
    3ca0:	8a 33       	cpi	r24, 0x3A	; 58
    3ca2:	0c f0       	brlt	.+2      	; 0x3ca6 <itoa+0x2c>
    3ca4:	89 5d       	subi	r24, 0xD9	; 217
    3ca6:	81 93       	st	Z+, r24
    3ca8:	cb 01       	movw	r24, r22
    3caa:	00 97       	sbiw	r24, 0x00	; 0
    3cac:	a1 f7       	brne	.-24     	; 0x3c96 <itoa+0x1c>
    3cae:	16 f4       	brtc	.+4      	; 0x3cb4 <itoa+0x3a>
    3cb0:	5d e2       	ldi	r21, 0x2D	; 45
    3cb2:	51 93       	st	Z+, r21
    3cb4:	10 82       	st	Z, r1
    3cb6:	c9 01       	movw	r24, r18
    3cb8:	0c 94 5e 1e 	jmp	0x3cbc	; 0x3cbc <strrev>

00003cbc <strrev>:
    3cbc:	dc 01       	movw	r26, r24
    3cbe:	fc 01       	movw	r30, r24
    3cc0:	67 2f       	mov	r22, r23
    3cc2:	71 91       	ld	r23, Z+
    3cc4:	77 23       	and	r23, r23
    3cc6:	e1 f7       	brne	.-8      	; 0x3cc0 <strrev+0x4>
    3cc8:	32 97       	sbiw	r30, 0x02	; 2
    3cca:	04 c0       	rjmp	.+8      	; 0x3cd4 <strrev+0x18>
    3ccc:	7c 91       	ld	r23, X
    3cce:	6d 93       	st	X+, r22
    3cd0:	70 83       	st	Z, r23
    3cd2:	62 91       	ld	r22, -Z
    3cd4:	ae 17       	cp	r26, r30
    3cd6:	bf 07       	cpc	r27, r31
    3cd8:	c8 f3       	brcs	.-14     	; 0x3ccc <strrev+0x10>
    3cda:	08 95       	ret

00003cdc <__udivmodhi4>:
    3cdc:	aa 1b       	sub	r26, r26
    3cde:	bb 1b       	sub	r27, r27
    3ce0:	51 e1       	ldi	r21, 0x11	; 17
    3ce2:	07 c0       	rjmp	.+14     	; 0x3cf2 <__udivmodhi4_ep>

00003ce4 <__udivmodhi4_loop>:
    3ce4:	aa 1f       	adc	r26, r26
    3ce6:	bb 1f       	adc	r27, r27
    3ce8:	a6 17       	cp	r26, r22
    3cea:	b7 07       	cpc	r27, r23
    3cec:	10 f0       	brcs	.+4      	; 0x3cf2 <__udivmodhi4_ep>
    3cee:	a6 1b       	sub	r26, r22
    3cf0:	b7 0b       	sbc	r27, r23

00003cf2 <__udivmodhi4_ep>:
    3cf2:	88 1f       	adc	r24, r24
    3cf4:	99 1f       	adc	r25, r25
    3cf6:	5a 95       	dec	r21
    3cf8:	a9 f7       	brne	.-22     	; 0x3ce4 <__udivmodhi4_loop>
    3cfa:	80 95       	com	r24
    3cfc:	90 95       	com	r25
    3cfe:	bc 01       	movw	r22, r24
    3d00:	cd 01       	movw	r24, r26
    3d02:	08 95       	ret

00003d04 <_exit>:
    3d04:	f8 94       	cli

00003d06 <__stop_program>:
    3d06:	ff cf       	rjmp	.-2      	; 0x3d06 <__stop_program>
